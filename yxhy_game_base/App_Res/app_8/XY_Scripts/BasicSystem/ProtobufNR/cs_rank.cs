// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace cs
{
    /// <summary>成绩信息</summary>
    public partial class ScoreInfo
    {
        public ScoreInfo()
        {
            Clear();
        }
        /// <summary>波数</summary>
        public uint WaveNum { get; set; }

        /// <summary>耗时</summary>
        public uint CostTimeIns { get; set; }

        /// <summary>战斗力</summary>
        public uint Fighting { get; set; }

        /// <summary>铜钱数</summary>
        public uint CopperNum { get; set; }

        /// <summary>积分</summary>
        public uint Score { get; set; }


        public void Clear()
        {
            WaveNum = 0;
            CostTimeIns = 0;
            Fighting = 0;
            CopperNum = 0;
            Score = 0;
        }
    }

    /// <summary>排名信息</summary>
    public partial class RankInfo
    {
        public RankInfo()
        {
            Clear();
        }
        /// <summary>排名</summary>
        public uint Ranking { get; set; }

        /// <summary>成绩</summary>
        public global::cs.ScoreInfo ScoreInfo { get; set; }

        public global::cs.RankInfo.RoleBriefInfo RoleBrief { get; set; }

        public global::cs.RankInfo.FactionBriefInfo FactionBrief { get; set; }

        /// <summary>排行值</summary>
        public uint RankValue { get; set; }


        public void Clear()
        {
            Ranking = 0;
            if (ScoreInfo != null)
            {
                ScoreInfo.Clear();
            }
            if (RoleBrief != null)
            {
                RoleBrief.Clear();
            }
            if (FactionBrief != null)
            {
                FactionBrief.Clear();
            }
            RankValue = 0;
        }
        /// <summary>玩家简要信息</summary>
        public partial class RoleBriefInfo
        {
            public RoleBriefInfo()
            {
                Clear();
            }
            /// <summary>角色ID</summary>
            public global::cs.MyUint64 RoleID { get; set; }

            /// <summary>角色名称</summary>
            public string RoleName { get; set; }

            /// <summary>模型id</summary>
            public uint ModelID { get; set; }

            /// <summary>玩家等级</summary>
            public uint Grade { get; set; }

            /// <summary>武器ID</summary>
            public uint WeaponID { get; set; }

            /// <summary>玩家所在家族</summary>
            public string FactionName { get; set; }

            /// <summary>玩家战斗力</summary>
            public int Fighting { get; set; }


            public void Clear()
            {
                if (RoleID != null)
                {
                    RoleID.Clear();
                }
                RoleName = "";
                ModelID = 0;
                Grade = 0;
                WeaponID = 0;
                FactionName = "";
                Fighting = 0;
            }
        }

        /// <summary>帮会简要信息</summary>
        public partial class FactionBriefInfo
        {
            public FactionBriefInfo()
            {
                Clear();
            }
            public global::cs.MyUint64 FactionID { get; set; }

            /// <summary>名称</summary>
            public string Name { get; set; }

            /// <summary>帮主名称</summary>
            public string LeaderName { get; set; }

            /// <summary>帮会等级</summary>
            public int Grade { get; set; }


            public void Clear()
            {
                if (FactionID != null)
                {
                    FactionID.Clear();
                }
                Name = "";
                LeaderName = "";
                Grade = 0;
            }
        }

    }

    /// <summary>排行榜查询请求 CS_QUERY_RANKINFO_REQ = 2157</summary>
    public partial class CSQueryRankInfoReq
    {
        public CSQueryRankInfoReq()
        {
            StartNum = 1;
            QueryNum = 10;
            Clear();
        }
        /// <summary>请求排行榜类型，关联EnmRankType</summary>
        public int RankType { get; set; }

        /// <summary>请求的开始数目</summary>
        public uint StartNum { get; set; }

        /// <summary>请求的个数</summary>
        public uint QueryNum { get; set; }


        public void Clear()
        {
            RankType = 0;
        }
    }

    /// <summary>排行榜查询回复 CS_QUERY_RANKINFO_RES = 2158</summary>
    public partial class CSQueryRankInfoRes
    {
        public CSQueryRankInfoRes()
        {
            RankInfoList = new List<global::cs.RankInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for RankInfoList</summary>
        public List<global::cs.RankInfo> RankInfoListCacheList = new List<global::cs.RankInfo>(50);

        public int RetCode { get; set; }

        /// <summary>请求排行榜类型，关联EnmRankType</summary>
        public int RankType { get; set; }

        /// <summary>排名信息列表</summary>
        public List<global::cs.RankInfo> RankInfoList { get; set; }


        public void Clear()
        {
            RetCode = 0;
            RankType = 0;
            if (RankInfoList != null)
            {
                for (int i = 0; i < RankInfoList.Count;  ++i)
                {
                    RankInfoList[i].Clear();
                    ReturnRankInfoListElement(RankInfoList[i]);
                }
                RankInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            RankInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                RankInfoListCacheList.Add(new global::cs.RankInfo());
            }
        }

        /// <summary>get a free element from RankInfoListCacheList</summary>
        public global::cs.RankInfo GetFreeRankInfoListElement()
        {
            global::cs.RankInfo ret = null;
            if (RankInfoListCacheList.Count > 0)
            {
                 ret = RankInfoListCacheList[0];
                RankInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.RankInfo();
            }
            return ret;
        }

        /// <summary>return a free element to RankInfoListCacheList</summary>
        public void ReturnRankInfoListElement(global::cs.RankInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < RankInfoListCacheList.Count;  ++i)
            {
                if (RankInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                RankInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary>请求查询当前玩家的排名信息 CS_QUERY_CUR_ROLE_RANK_REQ = 2164</summary>
    public partial class CSQueryCurRoleRankReq
    {
        public CSQueryCurRoleRankReq()
        {
            Clear();
        }
        /// <summary>是否查询当前玩家附近玩家排名信息</summary>
        public bool IsQueryNear { get; set; }


        public void Clear()
        {
            IsQueryNear = false;
        }
    }

    /// <summary>回复查询当前玩家的排名信息 CS_QUERY_CUR_ROLE_RANK_RES = 2165</summary>
    public partial class CSQueryCurRoleRankRes
    {
        public CSQueryCurRoleRankRes()
        {
            NearRankInfoList = new List<global::cs.RankInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for NearRankInfoList</summary>
        public List<global::cs.RankInfo> NearRankInfoListCacheList = new List<global::cs.RankInfo>(50);

        public int RetCode { get; set; }

        /// <summary>当前玩家排名</summary>
        public global::cs.RankInfo CurPlayerRankInfo { get; set; }

        /// <summary>当前玩家附近的排名列表</summary>
        public List<global::cs.RankInfo> NearRankInfoList { get; set; }


        public void Clear()
        {
            RetCode = 0;
            if (CurPlayerRankInfo != null)
            {
                CurPlayerRankInfo.Clear();
            }
            if (NearRankInfoList != null)
            {
                for (int i = 0; i < NearRankInfoList.Count;  ++i)
                {
                    NearRankInfoList[i].Clear();
                    ReturnNearRankInfoListElement(NearRankInfoList[i]);
                }
                NearRankInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            NearRankInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                NearRankInfoListCacheList.Add(new global::cs.RankInfo());
            }
        }

        /// <summary>get a free element from NearRankInfoListCacheList</summary>
        public global::cs.RankInfo GetFreeNearRankInfoListElement()
        {
            global::cs.RankInfo ret = null;
            if (NearRankInfoListCacheList.Count > 0)
            {
                 ret = NearRankInfoListCacheList[0];
                NearRankInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.RankInfo();
            }
            return ret;
        }

        /// <summary>return a free element to NearRankInfoListCacheList</summary>
        public void ReturnNearRankInfoListElement(global::cs.RankInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < NearRankInfoListCacheList.Count;  ++i)
            {
                if (NearRankInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                NearRankInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary>查询好友排名 CS_QUERY_FRIEND_RANK_REQ = 2298</summary>
    public partial class CSQueryFriendRankReq
    {
        public CSQueryFriendRankReq()
        {
            StartNum = 1;
            QueryNum = 10;
            Clear();
        }
        /// <summary>请求排行榜类型，关联cs_define_enum.proto EnmRankType</summary>
        public int RankType { get; set; }

        /// <summary>请求的开始数目</summary>
        public uint StartNum { get; set; }

        /// <summary>请求的个数</summary>
        public uint QueryNum { get; set; }


        public void Clear()
        {
            RankType = 0;
        }
    }

    /// <summary>好友排行榜查询回复 CS_QUERY_FRIEND_RANK_RES = 2299</summary>
    public partial class CSQueryFriendRankRes
    {
        public CSQueryFriendRankRes()
        {
            RankInfoList = new List<global::cs.RankInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for RankInfoList</summary>
        public List<global::cs.RankInfo> RankInfoListCacheList = new List<global::cs.RankInfo>(50);

        public int RetCode { get; set; }

        /// <summary>请求排行榜类型，关联cs_define_enum.proto EnmRankType</summary>
        public int RankType { get; set; }

        /// <summary>排名信息列表</summary>
        public List<global::cs.RankInfo> RankInfoList { get; set; }


        public void Clear()
        {
            RetCode = 0;
            RankType = 0;
            if (RankInfoList != null)
            {
                for (int i = 0; i < RankInfoList.Count;  ++i)
                {
                    RankInfoList[i].Clear();
                    ReturnRankInfoListElement(RankInfoList[i]);
                }
                RankInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            RankInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                RankInfoListCacheList.Add(new global::cs.RankInfo());
            }
        }

        /// <summary>get a free element from RankInfoListCacheList</summary>
        public global::cs.RankInfo GetFreeRankInfoListElement()
        {
            global::cs.RankInfo ret = null;
            if (RankInfoListCacheList.Count > 0)
            {
                 ret = RankInfoListCacheList[0];
                RankInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.RankInfo();
            }
            return ret;
        }

        /// <summary>return a free element to RankInfoListCacheList</summary>
        public void ReturnRankInfoListElement(global::cs.RankInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < RankInfoListCacheList.Count;  ++i)
            {
                if (RankInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                RankInfoListCacheList.Add(element);
            }
        }
    }



























































































































































































































}
