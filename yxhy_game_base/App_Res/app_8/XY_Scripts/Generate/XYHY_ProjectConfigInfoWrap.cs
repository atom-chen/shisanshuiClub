//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class XYHY_ProjectConfigInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(XYHY.ProjectConfigInfo), typeof(System.Object));
		L.RegFunction("New", _CreateXYHY_ProjectConfigInfo);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("VersionCheckUrl", get_VersionCheckUrl, set_VersionCheckUrl);
		L.RegVar("GameServerIp", get_GameServerIp, set_GameServerIp);
		L.RegVar("GameServerPort", get_GameServerPort, set_GameServerPort);
		L.RegVar("HasDebugLogOutput", get_HasDebugLogOutput, set_HasDebugLogOutput);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateXYHY_ProjectConfigInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				XYHY.ProjectConfigInfo obj = new XYHY.ProjectConfigInfo();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: XYHY.ProjectConfigInfo.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VersionCheckUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			XYHY.ProjectConfigInfo obj = (XYHY.ProjectConfigInfo)o;
			string ret = obj.VersionCheckUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index VersionCheckUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameServerIp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			XYHY.ProjectConfigInfo obj = (XYHY.ProjectConfigInfo)o;
			string ret = obj.GameServerIp;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameServerIp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameServerPort(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			XYHY.ProjectConfigInfo obj = (XYHY.ProjectConfigInfo)o;
			int ret = obj.GameServerPort;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameServerPort on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasDebugLogOutput(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			XYHY.ProjectConfigInfo obj = (XYHY.ProjectConfigInfo)o;
			bool ret = obj.HasDebugLogOutput;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HasDebugLogOutput on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VersionCheckUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			XYHY.ProjectConfigInfo obj = (XYHY.ProjectConfigInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.VersionCheckUrl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index VersionCheckUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameServerIp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			XYHY.ProjectConfigInfo obj = (XYHY.ProjectConfigInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.GameServerIp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameServerIp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameServerPort(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			XYHY.ProjectConfigInfo obj = (XYHY.ProjectConfigInfo)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.GameServerPort = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameServerPort on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HasDebugLogOutput(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			XYHY.ProjectConfigInfo obj = (XYHY.ProjectConfigInfo)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.HasDebugLogOutput = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HasDebugLogOutput on a nil value" : e.Message);
		}
	}
}

