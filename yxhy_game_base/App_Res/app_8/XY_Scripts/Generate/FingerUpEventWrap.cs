//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FingerUpEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(FingerUpEvent), typeof(FingerEvent));
		L.RegFunction("New", _CreateFingerUpEvent);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("TimeHeldDown", get_TimeHeldDown, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateFingerUpEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				FingerUpEvent obj = new FingerUpEvent();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: FingerUpEvent.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TimeHeldDown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			FingerUpEvent obj = (FingerUpEvent)o;
			float ret = obj.TimeHeldDown;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TimeHeldDown on a nil value" : e.Message);
		}
	}
}

