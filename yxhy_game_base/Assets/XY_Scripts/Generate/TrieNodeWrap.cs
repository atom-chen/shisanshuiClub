//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TrieNodeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TrieNode), typeof(System.Object));
		L.RegFunction("TryGetValue", TryGetValue);
		L.RegFunction("Add", Add);
		L.RegFunction("New", _CreateTrieNode);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("m_end", get_m_end, set_m_end);
		L.RegVar("m_values", get_m_values, set_m_values);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTrieNode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				TrieNode obj = new TrieNode();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TrieNode.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TrieNode obj = (TrieNode)ToLua.CheckObject(L, 1, typeof(TrieNode));
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 2);
			TrieNode arg1 = null;
			bool o = obj.TryGetValue(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushObject(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TrieNode obj = (TrieNode)ToLua.CheckObject(L, 1, typeof(TrieNode));
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 2);
			TrieNode o = obj.Add(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_end(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TrieNode obj = (TrieNode)o;
			bool ret = obj.m_end;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_end on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_values(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TrieNode obj = (TrieNode)o;
			System.Collections.Generic.Dictionary<char,TrieNode> ret = obj.m_values;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_values on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_end(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TrieNode obj = (TrieNode)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_end = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_end on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_values(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TrieNode obj = (TrieNode)o;
			System.Collections.Generic.Dictionary<char,TrieNode> arg0 = (System.Collections.Generic.Dictionary<char,TrieNode>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<char,TrieNode>));
			obj.m_values = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_values on a nil value" : e.Message);
		}
	}
}

