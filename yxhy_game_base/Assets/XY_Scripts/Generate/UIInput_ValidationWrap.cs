//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIInput_ValidationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UIInput.Validation));
		L.RegVar("None", get_None, null);
		L.RegVar("Integer", get_Integer, null);
		L.RegVar("Float", get_Float, null);
		L.RegVar("Alphanumeric", get_Alphanumeric, null);
		L.RegVar("Username", get_Username, null);
		L.RegVar("Name", get_Name, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, UIInput.Validation.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Integer(IntPtr L)
	{
		ToLua.Push(L, UIInput.Validation.Integer);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Float(IntPtr L)
	{
		ToLua.Push(L, UIInput.Validation.Float);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Alphanumeric(IntPtr L)
	{
		ToLua.Push(L, UIInput.Validation.Alphanumeric);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Username(IntPtr L)
	{
		ToLua.Push(L, UIInput.Validation.Username);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		ToLua.Push(L, UIInput.Validation.Name);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UIInput.Validation o = (UIInput.Validation)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

