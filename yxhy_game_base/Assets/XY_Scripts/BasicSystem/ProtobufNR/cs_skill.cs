// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace cs
{
    /// <summary>CS_REQUEST_SKILL_UP</summary>
    public partial class CSSkillUpReq
    {
        public CSSkillUpReq()
        {
            Clear();
        }
        /// <summary>秘笈类型</summary>
        public int TipsID { get; set; }

        /// <summary>技能id</summary>
        public uint SkillID { get; set; }

        /// <summary>一键升级 1-一键升级，0 非</summary>
        public uint AutoLevelUp { get; set; }


        public void Clear()
        {
            TipsID = 0;
            SkillID = 0;
            AutoLevelUp = 0;
        }
    }

    /// <summary>CS_REPONSE_SKILL_UP</summary>
    public partial class CSSkillUpRes
    {
        public CSSkillUpRes()
        {
            Clear();
        }
        /// <summary>升级结果</summary>
        public int RetCode { get; set; }

        /// <summary>秘笈类型</summary>
        public int TipsID { get; set; }

        /// <summary>技能类型</summary>
        public uint SkillID { get; set; }

        /// <summary>技能等级</summary>
        public uint SkillLevel { get; set; }


        public void Clear()
        {
            RetCode = 0;
            TipsID = 0;
            SkillID = 0;
            SkillLevel = 0;
        }
    }

    /// <summary>CS_REQUIST_SKILL_ADVANCE</summary>
    public partial class CSSkillAdvanceReq
    {
        public CSSkillAdvanceReq()
        {
            Clear();
        }
        /// <summary>技能书类型</summary>
        public int TipsID { get; set; }

        /// <summary>技能id</summary>
        public uint SkillID { get; set; }


        public void Clear()
        {
            TipsID = 0;
            SkillID = 0;
        }
    }

    /// <summary>CS_REPONSE_SKILL_ADVANDE</summary>
    public partial class CSSkillAdvanceRes
    {
        public CSSkillAdvanceRes()
        {
            AdvanceType = global::cs.EnmSkillAdvanceType.SKILL_ADVANCE_TYPE_WHITE;
            Clear();
        }
        /// <summary>进阶结果</summary>
        public int RetCode { get; set; }

        /// <summary>秘笈类型</summary>
        public int TipsID { get; set; }

        /// <summary>技能类型</summary>
        public uint SkillID { get; set; }

        /// <summary>技能进阶类型</summary>
        public global::cs.EnmSkillAdvanceType AdvanceType { get; set; }

        /// <summary>技能进阶等级</summary>
        public uint AdvanceLevel { get; set; }


        public void Clear()
        {
            RetCode = 0;
            TipsID = 0;
            SkillID = 0;
            AdvanceLevel = 0;
        }
    }

    public partial class AdvanceItem
    {
        public AdvanceItem()
        {
            AdvancePlaceType = global::cs.EnmAdvancePlaceType.SKILL_ADVANCE_PLACE_TYPE_1;
            Clear();
        }
        /// <summary>技能书残页位置</summary>
        public global::cs.EnmAdvancePlaceType AdvancePlaceType { get; set; }

        /// <summary>包裹类型</summary>
        public uint BagType { get; set; }

        /// <summary>包裹所以</summary>
        public uint BagSlot { get; set; }


        public void Clear()
        {
            BagType = 0;
            BagSlot = 0;
        }
    }

    public partial class RetAdvanceItem
    {
        public RetAdvanceItem()
        {
            AdvancePlaceType = global::cs.EnmAdvancePlaceType.SKILL_ADVANCE_PLACE_TYPE_1;
            Clear();
        }
        /// <summary>技能书残页位置</summary>
        public global::cs.EnmAdvancePlaceType AdvancePlaceType { get; set; }

        /// <summary>技能书残页装备物品</summary>
        public uint AdvanceItemID { get; set; }


        public void Clear()
        {
            AdvanceItemID = 0;
        }
    }

    /// <summary>CS_REQUIST_ADVANCE_ITEM_ADD</summary>
    public partial class CSAdvanceItemAddReq
    {
        public CSAdvanceItemAddReq()
        {
            Items = new List<global::cs.AdvanceItem>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for Items</summary>
        public List<global::cs.AdvanceItem> ItemsCacheList = new List<global::cs.AdvanceItem>(50);

        /// <summary>技能书类型</summary>
        public int TipsID { get; set; }

        /// <summary>技能id</summary>
        public uint SkillID { get; set; }

        /// <summary>残页信息</summary>
        public List<global::cs.AdvanceItem> Items { get; set; }


        public void Clear()
        {
            TipsID = 0;
            SkillID = 0;
            if (Items != null)
            {
                for (int i = 0; i < Items.Count;  ++i)
                {
                    Items[i].Clear();
                    ReturnItemsElement(Items[i]);
                }
                Items.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            ItemsCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                ItemsCacheList.Add(new global::cs.AdvanceItem());
            }
        }

        /// <summary>get a free element from ItemsCacheList</summary>
        public global::cs.AdvanceItem GetFreeItemsElement()
        {
            global::cs.AdvanceItem ret = null;
            if (ItemsCacheList.Count > 0)
            {
                 ret = ItemsCacheList[0];
                ItemsCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AdvanceItem();
            }
            return ret;
        }

        /// <summary>return a free element to ItemsCacheList</summary>
        public void ReturnItemsElement(global::cs.AdvanceItem element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < ItemsCacheList.Count;  ++i)
            {
                if (ItemsCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                ItemsCacheList.Add(element);
            }
        }
    }

    /// <summary>CS_REPONSE_ADVANCE_ITEM_ADD</summary>
    public partial class CSAdvanceItemAddRes
    {
        public CSAdvanceItemAddRes()
        {
            Items = new List<global::cs.RetAdvanceItem>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for Items</summary>
        public List<global::cs.RetAdvanceItem> ItemsCacheList = new List<global::cs.RetAdvanceItem>(50);

        /// <summary>技能学习类型</summary>
        public int RetCode { get; set; }

        /// <summary>秘笈类型</summary>
        public int TipsID { get; set; }

        /// <summary>技能类型</summary>
        public uint SkillID { get; set; }

        /// <summary>残页数据</summary>
        public List<global::cs.RetAdvanceItem> Items { get; set; }


        public void Clear()
        {
            RetCode = 0;
            TipsID = 0;
            SkillID = 0;
            if (Items != null)
            {
                for (int i = 0; i < Items.Count;  ++i)
                {
                    Items[i].Clear();
                    ReturnItemsElement(Items[i]);
                }
                Items.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            ItemsCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                ItemsCacheList.Add(new global::cs.RetAdvanceItem());
            }
        }

        /// <summary>get a free element from ItemsCacheList</summary>
        public global::cs.RetAdvanceItem GetFreeItemsElement()
        {
            global::cs.RetAdvanceItem ret = null;
            if (ItemsCacheList.Count > 0)
            {
                 ret = ItemsCacheList[0];
                ItemsCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.RetAdvanceItem();
            }
            return ret;
        }

        /// <summary>return a free element to ItemsCacheList</summary>
        public void ReturnItemsElement(global::cs.RetAdvanceItem element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < ItemsCacheList.Count;  ++i)
            {
                if (ItemsCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                ItemsCacheList.Add(element);
            }
        }
    }

    /// <summary>CS_REQUIST_EQUIP_SKILL_SLOT</summary>
    public partial class CSEquipSkillSlotReq
    {
        public CSEquipSkillSlotReq()
        {
            Clear();
        }
        /// <summary>职业</summary>
        public int WeaponType { get; set; }

        /// <summary>button类型,主动被动，普通</summary>
        public int SkillType { get; set; }

        /// <summary>技能buttonid</summary>
        public global::cs.EnmSkillButton ButtonType { get; set; }

        /// <summary>技能槽位索引</summary>
        public global::cs.EnmSkillButtonSlot ButtonSlot { get; set; }

        /// <summary>技能所属技能书</summary>
        public int TipsID { get; set; }

        /// <summary>技能ID</summary>
        public uint SkillID { get; set; }


        public void Clear()
        {
            WeaponType = 0;
            SkillType = 0;
            ButtonType = 0;
            ButtonSlot = 0;
            TipsID = 0;
            SkillID = 0;
        }
    }

    /// <summary>CS_REPONSE_EQUIP_SKILL_SLOT</summary>
    public partial class CSEquipSkillSlotRes
    {
        public CSEquipSkillSlotRes()
        {
            Clear();
        }
        public uint RetCode { get; set; }

        /// <summary>
        /// <para>操作结果</para>
        /// <para>职业</para>
        /// </summary>
        public int WeaponType { get; set; }

        /// <summary>button类型,主动被动，普通</summary>
        public int SkillType { get; set; }

        /// <summary>技能buttonid</summary>
        public global::cs.EnmSkillButton ButtonType { get; set; }

        /// <summary>技能槽位索引</summary>
        public global::cs.EnmSkillButtonSlot ButtonSlot { get; set; }

        /// <summary>技能所属技能书</summary>
        public int TipsID { get; set; }

        /// <summary>技能ID</summary>
        public uint SkillID { get; set; }


        public void Clear()
        {
            RetCode = 0;
            WeaponType = 0;
            SkillType = 0;
            ButtonType = 0;
            ButtonSlot = 0;
            TipsID = 0;
            SkillID = 0;
        }
    }

    /// <summary>CS_REQUIST_UNINSTALL_SKILL_SLOT</summary>
    public partial class CSUninstallSkillSlotReq
    {
        public CSUninstallSkillSlotReq()
        {
            Clear();
        }
        /// <summary>职业</summary>
        public int WeaponType { get; set; }

        /// <summary>button类型,主动被动，普通</summary>
        public int SkillType { get; set; }

        /// <summary>技能buttonid</summary>
        public global::cs.EnmSkillButton ButtonType { get; set; }

        /// <summary>技能槽位索引</summary>
        public global::cs.EnmSkillButtonSlot ButtonSlot { get; set; }


        public void Clear()
        {
            WeaponType = 0;
            SkillType = 0;
            ButtonType = 0;
            ButtonSlot = 0;
        }
    }

    /// <summary>CS_REPONSE_UNINSTALL_SKILL_SLOT</summary>
    public partial class CSUninstallSkillSlotRes
    {
        public CSUninstallSkillSlotRes()
        {
            Clear();
        }
        public uint RetCode { get; set; }

        /// <summary>
        /// <para>操作结果</para>
        /// <para>职业</para>
        /// </summary>
        public int WeaponType { get; set; }

        /// <summary>button类型,主动被动，普通</summary>
        public int SkillType { get; set; }

        /// <summary>技能槽位索引</summary>
        public global::cs.EnmSkillButtonSlot ButtonSlot { get; set; }


        public void Clear()
        {
            RetCode = 0;
            WeaponType = 0;
            SkillType = 0;
            ButtonSlot = 0;
        }
    }

    /// <summary>CS_NOTIFY_TIPS_SKILL_LEARN</summary>
    public partial class CSNotifyTipsLearn
    {
        public CSNotifyTipsLearn()
        {
            Clear();
        }
        /// <summary>职业信息</summary>
        public global::cs.EnmWeaponTypeID weapontype { get; set; }

        /// <summary>秘笈技能书学习信息</summary>
        public global::cs.OneSkillTipsData TipsInfo { get; set; }


        public void Clear()
        {
            weapontype = 0;
            if (TipsInfo != null)
            {
                TipsInfo.Clear();
            }
        }
    }

    /// <summary>CS_REQUIRED_BUTTON_SLOT_SWAP</summary>
    public partial class CSRequiredButtonSlotSwap
    {
        public CSRequiredButtonSlotSwap()
        {
            Clear();
        }
        /// <summary>职业信息</summary>
        public global::cs.EnmWeaponTypeID weapontype { get; set; }

        /// <summary>skilltype</summary>
        public int SkillType { get; set; }

        /// <summary>
        /// <para>技能类型</para>
        /// <para>buttonid</para>
        /// </summary>
        public global::cs.EnmSkillButton ButtonType { get; set; }

        /// <summary>
        /// <para>原槽位</para>
        /// <para>秘笈技能书学习信息</para>
        /// </summary>
        public global::cs.EnmSkillButtonSlot SrcSlot { get; set; }

        /// <summary>原槽位</summary>
        public global::cs.EnmSkillButtonSlot DesSlot { get; set; }


        public void Clear()
        {
            weapontype = 0;
            SkillType = 0;
            ButtonType = 0;
            SrcSlot = 0;
            DesSlot = 0;
        }
    }

    /// <summary>CS_RESPONSE_BUTTON_SLOT_SWAP</summary>
    public partial class CSResponseButtonSlotSwap
    {
        public CSResponseButtonSlotSwap()
        {
            Clear();
        }
        /// <summary>返回结果</summary>
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary>
    /// <para>技能施法Begin</para>
    /// <para>CS_DO_SKILL_REQ</para>
    /// </summary>
    public partial class CSDoSkillReq
    {
        public CSDoSkillReq()
        {
            Clear();
        }
        public uint SkillID { get; set; }

        public global::cs.Triple CurPos { get; set; }

        /// <summary>客户端玩家当前位置</summary>
        public global::cs.Triple Dir { get; set; }

        /// <summary>朝向</summary>
        public ulong CasterID { get; set; }

        /// <summary>施法者id, 如果是人可以不发，如果是怪需要发送</summary>
        public int AngerBit { get; set; }


        public void Clear()
        {
            SkillID = 0;
            if (CurPos != null)
            {
                CurPos.Clear();
            }
            if (Dir != null)
            {
                Dir.Clear();
            }
            CasterID = 0;
            AngerBit = 0;
        }
    }

    /// <summary>CS_DO_SKILL_RES</summary>
    public partial class CSDoSkillRes
    {
        public CSDoSkillRes()
        {
            AttrList = new List<global::cs.AttrData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AttrList</summary>
        public List<global::cs.AttrData> AttrListCacheList = new List<global::cs.AttrData>(50);

        public int iRetCode { get; set; }

        public uint SkillID { get; set; }

        public List<global::cs.AttrData> AttrList { get; set; }


        public void Clear()
        {
            iRetCode = 0;
            SkillID = 0;
            if (AttrList != null)
            {
                for (int i = 0; i < AttrList.Count;  ++i)
                {
                    AttrList[i].Clear();
                    ReturnAttrListElement(AttrList[i]);
                }
                AttrList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AttrListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AttrListCacheList.Add(new global::cs.AttrData());
            }
        }

        /// <summary>get a free element from AttrListCacheList</summary>
        public global::cs.AttrData GetFreeAttrListElement()
        {
            global::cs.AttrData ret = null;
            if (AttrListCacheList.Count > 0)
            {
                 ret = AttrListCacheList[0];
                AttrListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AttrData();
            }
            return ret;
        }

        /// <summary>return a free element to AttrListCacheList</summary>
        public void ReturnAttrListElement(global::cs.AttrData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AttrListCacheList.Count;  ++i)
            {
                if (AttrListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AttrListCacheList.Add(element);
            }
        }
    }

    /// <summary>CS_DO_SKILL_NOTIFY</summary>
    public partial class CSDoSkillNotify
    {
        public CSDoSkillNotify()
        {
            AttrList = new List<global::cs.AttrData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AttrList</summary>
        public List<global::cs.AttrData> AttrListCacheList = new List<global::cs.AttrData>(50);

        public uint SkillID { get; set; }

        public ulong CasterID { get; set; }

        public global::cs.Triple CurPos { get; set; }

        /// <summary>施法者位置</summary>
        public global::cs.Triple Dir { get; set; }

        /// <summary>
        /// <para>施法者朝向</para>
        /// <para>扣血扣篮</para>
        /// </summary>
        public List<global::cs.AttrData> AttrList { get; set; }

        public int AngerBit { get; set; }


        public void Clear()
        {
            SkillID = 0;
            CasterID = 0;
            if (CurPos != null)
            {
                CurPos.Clear();
            }
            if (Dir != null)
            {
                Dir.Clear();
            }
            if (AttrList != null)
            {
                for (int i = 0; i < AttrList.Count;  ++i)
                {
                    AttrList[i].Clear();
                    ReturnAttrListElement(AttrList[i]);
                }
                AttrList.Clear();
            }
            AngerBit = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AttrListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AttrListCacheList.Add(new global::cs.AttrData());
            }
        }

        /// <summary>get a free element from AttrListCacheList</summary>
        public global::cs.AttrData GetFreeAttrListElement()
        {
            global::cs.AttrData ret = null;
            if (AttrListCacheList.Count > 0)
            {
                 ret = AttrListCacheList[0];
                AttrListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AttrData();
            }
            return ret;
        }

        /// <summary>return a free element to AttrListCacheList</summary>
        public void ReturnAttrListElement(global::cs.AttrData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AttrListCacheList.Count;  ++i)
            {
                if (AttrListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AttrListCacheList.Add(element);
            }
        }
    }

    public partial class CSSkillCastTargetInfo
    {
        public CSSkillCastTargetInfo()
        {
            Clear();
        }
        public ulong ActorID { get; set; }

        public global::cs.Triple TargetPos { get; set; }


        public void Clear()
        {
            ActorID = 0;
            if (TargetPos != null)
            {
                TargetPos.Clear();
            }
        }
    }

    /// <summary>CS_SKILL_CAST_REQ</summary>
    public partial class CSSkillCastReq
    {
        public CSSkillCastReq()
        {
            LstTargetInfo = new List<global::cs.CSSkillCastTargetInfo>();
            SummonNpcPosID = new List<global::cs.Triple>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for LstTargetInfo</summary>
        public List<global::cs.CSSkillCastTargetInfo> LstTargetInfoCacheList = new List<global::cs.CSSkillCastTargetInfo>(50);

        /// <summary>a cache list for SummonNpcPosID</summary>
        public List<global::cs.Triple> SummonNpcPosIDCacheList = new List<global::cs.Triple>(50);

        public ulong CasterID { get; set; }

        /// <summary>施法者id, 如果是人可以不发，如果是怪需要发送</summary>
        public global::cs.Triple Pos { get; set; }

        /// <summary>受击点,玩家如果带位移，就是位移此处距离的位置</summary>
        public uint SkillID { get; set; }

        /// <summary>一个技能里有很多个节点，这就是那个节点的序号</summary>
        public int Order { get; set; }

        /// <summary>目标列表</summary>
        public List<global::cs.CSSkillCastTargetInfo> LstTargetInfo { get; set; }

        /// <summary>召唤怪位置坐标数组</summary>
        public List<global::cs.Triple> SummonNpcPosID { get; set; }


        public void Clear()
        {
            CasterID = 0;
            if (Pos != null)
            {
                Pos.Clear();
            }
            SkillID = 0;
            Order = 0;
            if (LstTargetInfo != null)
            {
                for (int i = 0; i < LstTargetInfo.Count;  ++i)
                {
                    LstTargetInfo[i].Clear();
                    ReturnLstTargetInfoElement(LstTargetInfo[i]);
                }
                LstTargetInfo.Clear();
            }
            if (SummonNpcPosID != null)
            {
                for (int i = 0; i < SummonNpcPosID.Count;  ++i)
                {
                    SummonNpcPosID[i].Clear();
                    ReturnSummonNpcPosIDElement(SummonNpcPosID[i]);
                }
                SummonNpcPosID.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            LstTargetInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                LstTargetInfoCacheList.Add(new global::cs.CSSkillCastTargetInfo());
            }
            SummonNpcPosIDCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                SummonNpcPosIDCacheList.Add(new global::cs.Triple());
            }
        }

        /// <summary>get a free element from LstTargetInfoCacheList</summary>
        public global::cs.CSSkillCastTargetInfo GetFreeLstTargetInfoElement()
        {
            global::cs.CSSkillCastTargetInfo ret = null;
            if (LstTargetInfoCacheList.Count > 0)
            {
                 ret = LstTargetInfoCacheList[0];
                LstTargetInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSSkillCastTargetInfo();
            }
            return ret;
        }

        /// <summary>return a free element to LstTargetInfoCacheList</summary>
        public void ReturnLstTargetInfoElement(global::cs.CSSkillCastTargetInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < LstTargetInfoCacheList.Count;  ++i)
            {
                if (LstTargetInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                LstTargetInfoCacheList.Add(element);
            }
        }

        /// <summary>get a free element from SummonNpcPosIDCacheList</summary>
        public global::cs.Triple GetFreeSummonNpcPosIDElement()
        {
            global::cs.Triple ret = null;
            if (SummonNpcPosIDCacheList.Count > 0)
            {
                 ret = SummonNpcPosIDCacheList[0];
                SummonNpcPosIDCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.Triple();
            }
            return ret;
        }

        /// <summary>return a free element to SummonNpcPosIDCacheList</summary>
        public void ReturnSummonNpcPosIDElement(global::cs.Triple element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < SummonNpcPosIDCacheList.Count;  ++i)
            {
                if (SummonNpcPosIDCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                SummonNpcPosIDCacheList.Add(element);
            }
        }
    }

    /// <summary>CS_SKILL_CAST_RES</summary>
    public partial class CSSkillCastRes
    {
        public CSSkillCastRes()
        {
            Clear();
        }
        public int iRetCode { get; set; }

        public uint SkillID { get; set; }


        public void Clear()
        {
            iRetCode = 0;
            SkillID = 0;
        }
    }

    public partial class CSHurt
    {
        public CSHurt()
        {
            Clear();
        }
        public int key { get; set; }

        public int value { get; set; }


        public void Clear()
        {
            key = 0;
            value = 0;
        }
    }

    public partial class CSHurtInfo
    {
        public CSHurtInfo()
        {
            HurtValue = new List<global::cs.CSHurt>();
            BuffInfoLst = new List<global::cs.SingleBuffInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for HurtValue</summary>
        public List<global::cs.CSHurt> HurtValueCacheList = new List<global::cs.CSHurt>(50);

        /// <summary>a cache list for BuffInfoLst</summary>
        public List<global::cs.SingleBuffInfo> BuffInfoLstCacheList = new List<global::cs.SingleBuffInfo>(50);

        public ulong ActorID { get; set; }

        public int iEffectType { get; set; }

        /// <summary> 施法效果，会心一击，击退等。。</summary>
        public List<global::cs.CSHurt> HurtValue { get; set; }

        public List<global::cs.SingleBuffInfo> BuffInfoLst { get; set; }

        public global::cs.Triple SkillPos { get; set; }

        /// <summary>技能修改的位置(击退、拖拽、击飞,目前客户端上报，服务器校验)</summary>
        public int ResitanceBit { get; set; }

        /// <summary>受击点抗性标识 1 发生生抗性免疫</summary>
        public int AbsorbBit { get; set; }

        /// <summary>是否发生吸收伤害标示</summary>
        public int RelationType { get; set; }


        public void Clear()
        {
            ActorID = 0;
            iEffectType = 0;
            if (HurtValue != null)
            {
                for (int i = 0; i < HurtValue.Count;  ++i)
                {
                    HurtValue[i].Clear();
                    ReturnHurtValueElement(HurtValue[i]);
                }
                HurtValue.Clear();
            }
            if (BuffInfoLst != null)
            {
                for (int i = 0; i < BuffInfoLst.Count;  ++i)
                {
                    BuffInfoLst[i].Clear();
                    ReturnBuffInfoLstElement(BuffInfoLst[i]);
                }
                BuffInfoLst.Clear();
            }
            if (SkillPos != null)
            {
                SkillPos.Clear();
            }
            ResitanceBit = 0;
            AbsorbBit = 0;
            RelationType = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            HurtValueCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                HurtValueCacheList.Add(new global::cs.CSHurt());
            }
            BuffInfoLstCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                BuffInfoLstCacheList.Add(new global::cs.SingleBuffInfo());
            }
        }

        /// <summary>get a free element from HurtValueCacheList</summary>
        public global::cs.CSHurt GetFreeHurtValueElement()
        {
            global::cs.CSHurt ret = null;
            if (HurtValueCacheList.Count > 0)
            {
                 ret = HurtValueCacheList[0];
                HurtValueCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSHurt();
            }
            return ret;
        }

        /// <summary>return a free element to HurtValueCacheList</summary>
        public void ReturnHurtValueElement(global::cs.CSHurt element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < HurtValueCacheList.Count;  ++i)
            {
                if (HurtValueCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                HurtValueCacheList.Add(element);
            }
        }

        /// <summary>get a free element from BuffInfoLstCacheList</summary>
        public global::cs.SingleBuffInfo GetFreeBuffInfoLstElement()
        {
            global::cs.SingleBuffInfo ret = null;
            if (BuffInfoLstCacheList.Count > 0)
            {
                 ret = BuffInfoLstCacheList[0];
                BuffInfoLstCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SingleBuffInfo();
            }
            return ret;
        }

        /// <summary>return a free element to BuffInfoLstCacheList</summary>
        public void ReturnBuffInfoLstElement(global::cs.SingleBuffInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < BuffInfoLstCacheList.Count;  ++i)
            {
                if (BuffInfoLstCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                BuffInfoLstCacheList.Add(element);
            }
        }
    }

    /// <summary>CS_SKILL_EFFECT_NOTIFY</summary>
    public partial class CSSkillEffectNotify
    {
        public CSSkillEffectNotify()
        {
            HurtLst = new List<global::cs.CSHurtInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for HurtLst</summary>
        public List<global::cs.CSHurtInfo> HurtLstCacheList = new List<global::cs.CSHurtInfo>(50);

        public ulong CasterID { get; set; }

        /// <summary>这个需要和服务器讨论(这个是直接根据order取出那个受击技能id呢，还是直接发那个castskill id 及order过来)</summary>
        public uint SkillID { get; set; }

        public uint OrderID { get; set; }

        public List<global::cs.CSHurtInfo> HurtLst { get; set; }

        public uint KillNum { get; set; }


        public void Clear()
        {
            CasterID = 0;
            SkillID = 0;
            OrderID = 0;
            if (HurtLst != null)
            {
                for (int i = 0; i < HurtLst.Count;  ++i)
                {
                    HurtLst[i].Clear();
                    ReturnHurtLstElement(HurtLst[i]);
                }
                HurtLst.Clear();
            }
            KillNum = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            HurtLstCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                HurtLstCacheList.Add(new global::cs.CSHurtInfo());
            }
        }

        /// <summary>get a free element from HurtLstCacheList</summary>
        public global::cs.CSHurtInfo GetFreeHurtLstElement()
        {
            global::cs.CSHurtInfo ret = null;
            if (HurtLstCacheList.Count > 0)
            {
                 ret = HurtLstCacheList[0];
                HurtLstCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSHurtInfo();
            }
            return ret;
        }

        /// <summary>return a free element to HurtLstCacheList</summary>
        public void ReturnHurtLstElement(global::cs.CSHurtInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < HurtLstCacheList.Count;  ++i)
            {
                if (HurtLstCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                HurtLstCacheList.Add(element);
            }
        }
    }

    /// <summary>
    /// <para>阵营</para>
    /// <para>CS_NPC_CAMP_FOR_PLAYER_NOTIFY = 2135;</para>
    /// </summary>
    public partial class CSNpcCampForPlayerNotify
    {
        public CSNpcCampForPlayerNotify()
        {
            CampInfo = new List<global::cs.CampAttr>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for CampInfo</summary>
        public List<global::cs.CampAttr> CampInfoCacheList = new List<global::cs.CampAttr>(50);

        /// <summary>玩家对npc阵营属性组</summary>
        public List<global::cs.CampAttr> CampInfo { get; set; }


        public void Clear()
        {
            if (CampInfo != null)
            {
                for (int i = 0; i < CampInfo.Count;  ++i)
                {
                    CampInfo[i].Clear();
                    ReturnCampInfoElement(CampInfo[i]);
                }
                CampInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            CampInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                CampInfoCacheList.Add(new global::cs.CampAttr());
            }
        }

        /// <summary>get a free element from CampInfoCacheList</summary>
        public global::cs.CampAttr GetFreeCampInfoElement()
        {
            global::cs.CampAttr ret = null;
            if (CampInfoCacheList.Count > 0)
            {
                 ret = CampInfoCacheList[0];
                CampInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CampAttr();
            }
            return ret;
        }

        /// <summary>return a free element to CampInfoCacheList</summary>
        public void ReturnCampInfoElement(global::cs.CampAttr element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < CampInfoCacheList.Count;  ++i)
            {
                if (CampInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                CampInfoCacheList.Add(element);
            }
        }
    }

    /// <summary> CS_SKILL_CHECK_POS_REQ = 2251 技能施法上报施法后的位置</summary>
    public partial class CSSkillHeroPosReq
    {
        public CSSkillHeroPosReq()
        {
            Clear();
        }
        /// <summary>如果是怪物，才上报actorid, 如果是人设置为0</summary>
        public ulong ActorID { get; set; }

        /// <summary> 朝向</summary>
        public global::cs.Triple Dir { get; set; }

        /// <summary> 当前位置</summary>
        public global::cs.Triple Pos { get; set; }


        public void Clear()
        {
            ActorID = 0;
            if (Dir != null)
            {
                Dir.Clear();
            }
            if (Pos != null)
            {
                Pos.Clear();
            }
        }
    }

    /// <summary>
    /// <para>广播玩家当前位置</para>
    /// <para>CS_SKILL_CURR_POS_NOTIFY = 2250;</para>
    /// </summary>
    public partial class CSSkillHeroPosNotify
    {
        public CSSkillHeroPosNotify()
        {
            Clear();
        }
        public ulong ActorID { get; set; }

        /// <summary> 朝向</summary>
        public global::cs.Triple Dir { get; set; }

        /// <summary> 当前位置</summary>
        public global::cs.Triple Pos { get; set; }


        public void Clear()
        {
            ActorID = 0;
            if (Dir != null)
            {
                Dir.Clear();
            }
            if (Pos != null)
            {
                Pos.Clear();
            }
        }
    }

    /// <summary>
    /// <para>服务器通知客户端</para>
    /// <para>CS_SKILL_CONTRAL_NPC_NOTIFY = 2252;</para>
    /// </summary>
    public partial class CSSkillContralNpcNotify
    {
        public CSSkillContralNpcNotify()
        {
            Clear();
        }
        /// <summary>npcid gid</summary>
        public ulong ActorID { get; set; }

        /// <summary>技能的skill id</summary>
        public uint uiSkillID { get; set; }

        /// <summary>施法方向</summary>
        public global::cs.Triple DirPos { get; set; }

        /// <summary>连招技能标识, 1为连招</summary>
        public int ComboBit { get; set; }

        /// <summary>当前位置</summary>
        public global::cs.Triple CurrPos { get; set; }


        public void Clear()
        {
            ActorID = 0;
            uiSkillID = 0;
            if (DirPos != null)
            {
                DirPos.Clear();
            }
            ComboBit = 0;
            if (CurrPos != null)
            {
                CurrPos.Clear();
            }
        }
    }

    /// <summary>
    /// <para>通知Actor携带buff信息</para>
    /// <para>CS_ALL_BUFF_INFO_NOTIFY= 2255;</para>
    /// </summary>
    public partial class CSSkillAllBuffInfoNotify
    {
        public CSSkillAllBuffInfoNotify()
        {
            BuffInfo = new List<global::cs.SingleBuffInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for BuffInfo</summary>
        public List<global::cs.SingleBuffInfo> BuffInfoCacheList = new List<global::cs.SingleBuffInfo>(50);

        public List<global::cs.SingleBuffInfo> BuffInfo { get; set; }


        public void Clear()
        {
            if (BuffInfo != null)
            {
                for (int i = 0; i < BuffInfo.Count;  ++i)
                {
                    BuffInfo[i].Clear();
                    ReturnBuffInfoElement(BuffInfo[i]);
                }
                BuffInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            BuffInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                BuffInfoCacheList.Add(new global::cs.SingleBuffInfo());
            }
        }

        /// <summary>get a free element from BuffInfoCacheList</summary>
        public global::cs.SingleBuffInfo GetFreeBuffInfoElement()
        {
            global::cs.SingleBuffInfo ret = null;
            if (BuffInfoCacheList.Count > 0)
            {
                 ret = BuffInfoCacheList[0];
                BuffInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SingleBuffInfo();
            }
            return ret;
        }

        /// <summary>return a free element to BuffInfoCacheList</summary>
        public void ReturnBuffInfoElement(global::cs.SingleBuffInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < BuffInfoCacheList.Count;  ++i)
            {
                if (BuffInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                BuffInfoCacheList.Add(element);
            }
        }
    }

    /// <summary>
    /// <para>通知Actor增加 buff信息</para>
    /// <para>CS_ADD_BUFF_NOTIFY= 2265;</para>
    /// </summary>
    public partial class CSSkillAddBuffNotify
    {
        public CSSkillAddBuffNotify()
        {
            BuffInfo = new List<global::cs.SingleBuffInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for BuffInfo</summary>
        public List<global::cs.SingleBuffInfo> BuffInfoCacheList = new List<global::cs.SingleBuffInfo>(50);

        /// <summary>Actorgid</summary>
        public ulong ActorID { get; set; }

        public List<global::cs.SingleBuffInfo> BuffInfo { get; set; }


        public void Clear()
        {
            ActorID = 0;
            if (BuffInfo != null)
            {
                for (int i = 0; i < BuffInfo.Count;  ++i)
                {
                    BuffInfo[i].Clear();
                    ReturnBuffInfoElement(BuffInfo[i]);
                }
                BuffInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            BuffInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                BuffInfoCacheList.Add(new global::cs.SingleBuffInfo());
            }
        }

        /// <summary>get a free element from BuffInfoCacheList</summary>
        public global::cs.SingleBuffInfo GetFreeBuffInfoElement()
        {
            global::cs.SingleBuffInfo ret = null;
            if (BuffInfoCacheList.Count > 0)
            {
                 ret = BuffInfoCacheList[0];
                BuffInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SingleBuffInfo();
            }
            return ret;
        }

        /// <summary>return a free element to BuffInfoCacheList</summary>
        public void ReturnBuffInfoElement(global::cs.SingleBuffInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < BuffInfoCacheList.Count;  ++i)
            {
                if (BuffInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                BuffInfoCacheList.Add(element);
            }
        }
    }

    /// <summary>
    /// <para>通知Actor删除 buff信息</para>
    /// <para>CS_DEL_BUFF_NOTIFY= 2266;</para>
    /// </summary>
    public partial class CSSkillDelBuffNotify
    {
        public CSSkillDelBuffNotify()
        {
            BuffInfo = new List<uint>();
            Clear();
        }
        /// <summary>Actorgid</summary>
        public ulong ActorID { get; set; }

        public List<uint> BuffInfo { get; set; }


        public void Clear()
        {
            ActorID = 0;
            if (BuffInfo != null)
            {
                BuffInfo.Clear();
            }
        }
    }

    /// <summary>
    /// <para>通知Actor dota效果</para>
    /// <para>CS_DOTA_EFFECT_NOTIFY= 2285;</para>
    /// </summary>
    public partial class CSDotaEffectNotify
    {
        public CSDotaEffectNotify()
        {
            HurtValue = new List<global::cs.CSHurt>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for HurtValue</summary>
        public List<global::cs.CSHurt> HurtValueCacheList = new List<global::cs.CSHurt>(50);

        public ulong ActorID { get; set; }

        public List<global::cs.CSHurt> HurtValue { get; set; }

        public ulong CasterID { get; set; }


        public void Clear()
        {
            ActorID = 0;
            if (HurtValue != null)
            {
                for (int i = 0; i < HurtValue.Count;  ++i)
                {
                    HurtValue[i].Clear();
                    ReturnHurtValueElement(HurtValue[i]);
                }
                HurtValue.Clear();
            }
            CasterID = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            HurtValueCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                HurtValueCacheList.Add(new global::cs.CSHurt());
            }
        }

        /// <summary>get a free element from HurtValueCacheList</summary>
        public global::cs.CSHurt GetFreeHurtValueElement()
        {
            global::cs.CSHurt ret = null;
            if (HurtValueCacheList.Count > 0)
            {
                 ret = HurtValueCacheList[0];
                HurtValueCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSHurt();
            }
            return ret;
        }

        /// <summary>return a free element to HurtValueCacheList</summary>
        public void ReturnHurtValueElement(global::cs.CSHurt element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < HurtValueCacheList.Count;  ++i)
            {
                if (HurtValueCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                HurtValueCacheList.Add(element);
            }
        }
    }

    /// <summary>技能id和等级</summary>
    public partial class CSSkillInfo
    {
        public CSSkillInfo()
        {
            Clear();
        }
        public uint SkillID { get; set; }

        public uint SkillLevel { get; set; }


        public void Clear()
        {
            SkillID = 0;
            SkillLevel = 0;
        }
    }

    /// <summary>
    /// <para>技能书升级技能通知</para>
    /// <para>CS_SKILL_LEVEL_UP_NOTIFY</para>
    /// </summary>
    public partial class CSSkillLevelUpNotify
    {
        public CSSkillLevelUpNotify()
        {
            SkillInfo = new List<global::cs.CSSkillInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for SkillInfo</summary>
        public List<global::cs.CSSkillInfo> SkillInfoCacheList = new List<global::cs.CSSkillInfo>(50);

        public uint TipsID { get; set; }

        public List<global::cs.CSSkillInfo> SkillInfo { get; set; }


        public void Clear()
        {
            TipsID = 0;
            if (SkillInfo != null)
            {
                for (int i = 0; i < SkillInfo.Count;  ++i)
                {
                    SkillInfo[i].Clear();
                    ReturnSkillInfoElement(SkillInfo[i]);
                }
                SkillInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            SkillInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                SkillInfoCacheList.Add(new global::cs.CSSkillInfo());
            }
        }

        /// <summary>get a free element from SkillInfoCacheList</summary>
        public global::cs.CSSkillInfo GetFreeSkillInfoElement()
        {
            global::cs.CSSkillInfo ret = null;
            if (SkillInfoCacheList.Count > 0)
            {
                 ret = SkillInfoCacheList[0];
                SkillInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSSkillInfo();
            }
            return ret;
        }

        /// <summary>return a free element to SkillInfoCacheList</summary>
        public void ReturnSkillInfoElement(global::cs.CSSkillInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < SkillInfoCacheList.Count;  ++i)
            {
                if (SkillInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                SkillInfoCacheList.Add(element);
            }
        }
    }

    /// <summary>
    /// <para>非技能书学习协议</para>
    /// <para>CS_SPECIAL_SKILL_LEARN_REQ</para>
    /// </summary>
    public partial class CSSpecialSkillLearnReq
    {
        public CSSpecialSkillLearnReq()
        {
            Clear();
        }
        public uint TipsID { get; set; }

        /// <summary>技能书id</summary>
        public uint iSkillID { get; set; }

        /// <summary>技能id</summary>
        public int WeaponType { get; set; }


        public void Clear()
        {
            TipsID = 0;
            iSkillID = 0;
            WeaponType = 0;
        }
    }

    /// <summary>
    /// <para>非技能书学习协议返回</para>
    /// <para>CS_SPECIAL_SKILL_LEARN_RES</para>
    /// </summary>
    public partial class CSSpecialSkillLearnRes
    {
        public CSSpecialSkillLearnRes()
        {
            Clear();
        }
        /// <summary>升级结果</summary>
        public int RetCode { get; set; }

        /// <summary>技能学习结果， 0成功，非零失败，字典值</summary>
        public uint TipsID { get; set; }

        /// <summary>技能书id</summary>
        public uint iSkillID { get; set; }

        /// <summary>技能级id</summary>
        public global::cs.AttrData stLastSkillPoint { get; set; }


        public void Clear()
        {
            RetCode = 0;
            TipsID = 0;
            iSkillID = 0;
            if (stLastSkillPoint != null)
            {
                stLastSkillPoint.Clear();
            }
        }
    }

    /// <summary>
    /// <para>技能点重置</para>
    /// <para>CS_SKILL_POINT_RESET_REQ</para>
    /// </summary>
    public partial class CSSkillPointResetReq
    {
        public CSSkillPointResetReq()
        {
            Clear();
        }
        public int iWeaponType { get; set; }


        public void Clear()
        {
            iWeaponType = 0;
        }
    }

    /// <summary>
    /// <para>非技能点重置</para>
    /// <para>CS_SKILL_POINT_RESET_RES</para>
    /// </summary>
    public partial class CSSkillPointResetRes
    {
        public CSSkillPointResetRes()
        {
            Clear();
        }
        public int RetCode { get; set; }

        /// <summary>技能学习结果， 0成功，非零失败，字典值</summary>
        public global::cs.AttrData stLastSkillPoint { get; set; }


        public void Clear()
        {
            RetCode = 0;
            if (stLastSkillPoint != null)
            {
                stLastSkillPoint.Clear();
            }
        }
    }

    /// <summary>
    /// <para>武魂升级消息</para>
    /// <para>CS_FIGHT_SOUL_UP_REQ</para>
    /// </summary>
    public partial class CSFightSoulUpReq
    {
        public CSFightSoulUpReq()
        {
            Clear();
        }
        /// <summary>武魂ID，即1-7的武魂ID</summary>
        public uint SoulID { get; set; }

        /// <summary>武魂消耗材料ID</summary>
        public uint ItemID { get; set; }

        /// <summary>武魂消耗材料的数量</summary>
        public uint ItemNum { get; set; }


        public void Clear()
        {
            SoulID = 0;
            ItemID = 0;
            ItemNum = 0;
        }
    }

    /// <summary>CS_FIGHT_SOUL_UP_RES</summary>
    public partial class CSFightSoulUpRes
    {
        public CSFightSoulUpRes()
        {
            Clear();
        }
        public int RetCode { get; set; }

        /// <summary>武魂ID，即1-7的武魂ID</summary>
        public uint SoulID { get; set; }

        /// <summary>武魂等级</summary>
        public uint SoulGrade { get; set; }


        public void Clear()
        {
            RetCode = 0;
            SoulID = 0;
            SoulGrade = 0;
        }
    }

    /// <summary>
    /// <para>武魂数据消息</para>
    /// <para>CS_FIGHT_SOUL_REQ</para>
    /// </summary>
    public partial class CSFightSoulReq
    {
        public CSFightSoulReq()
        {
            Clear();
        }

        public void Clear()
        {
        }
    }

    /// <summary>CS_FIGHT_SOUL_RES</summary>
    public partial class CSFightSoulRes
    {
        public CSFightSoulRes()
        {
            FightSoulList = new List<global::cs.FightSoul>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for FightSoulList</summary>
        public List<global::cs.FightSoul> FightSoulListCacheList = new List<global::cs.FightSoul>(50);

        public int RetCode { get; set; }

        public List<global::cs.FightSoul> FightSoulList { get; set; }


        public void Clear()
        {
            RetCode = 0;
            if (FightSoulList != null)
            {
                for (int i = 0; i < FightSoulList.Count;  ++i)
                {
                    FightSoulList[i].Clear();
                    ReturnFightSoulListElement(FightSoulList[i]);
                }
                FightSoulList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            FightSoulListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                FightSoulListCacheList.Add(new global::cs.FightSoul());
            }
        }

        /// <summary>get a free element from FightSoulListCacheList</summary>
        public global::cs.FightSoul GetFreeFightSoulListElement()
        {
            global::cs.FightSoul ret = null;
            if (FightSoulListCacheList.Count > 0)
            {
                 ret = FightSoulListCacheList[0];
                FightSoulListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.FightSoul();
            }
            return ret;
        }

        /// <summary>return a free element to FightSoulListCacheList</summary>
        public void ReturnFightSoulListElement(global::cs.FightSoul element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < FightSoulListCacheList.Count;  ++i)
            {
                if (FightSoulListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                FightSoulListCacheList.Add(element);
            }
        }
    }

    /// <summary>CS_AI_PLAYER_DOSKILL_NOTIFY</summary>
    public partial class CSAiPlayerDoSkillNotify
    {
        public CSAiPlayerDoSkillNotify()
        {
            SkillID = new List<uint>();
            Clear();
        }
        /// <summary>ai gid</summary>
        public ulong ActorID { get; set; }

        /// <summary>怒气技能标识 1-是，0-否</summary>
        public uint AngerFlag { get; set; }

        /// <summary>技能ID，怒气技能会带多个技能ID，非怒气技能只有一个ID</summary>
        public List<uint> SkillID { get; set; }

        /// <summary>施法方向</summary>
        public global::cs.Triple DirPos { get; set; }


        public void Clear()
        {
            ActorID = 0;
            AngerFlag = 0;
            if (SkillID != null)
            {
                SkillID.Clear();
            }
            if (DirPos != null)
            {
                DirPos.Clear();
            }
        }
    }

    /// <summary>CS_WEAPON_ANGER_SKILL_BUTTON_NOTIFY</summary>
    public partial class CSWeaponAngerSkillNotify
    {
        public CSWeaponAngerSkillNotify()
        {
            AllWeaponSkillInfo = new List<global::cs.OneWeaponButtonData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AllWeaponSkillInfo</summary>
        public List<global::cs.OneWeaponButtonData> AllWeaponSkillInfoCacheList = new List<global::cs.OneWeaponButtonData>(50);

        /// <summary>
        /// <para>各职业怒气按钮情况</para>
        /// <para>单个所属武器技能配置情况</para>
        /// </summary>
        public List<global::cs.OneWeaponButtonData> AllWeaponSkillInfo { get; set; }


        public void Clear()
        {
            if (AllWeaponSkillInfo != null)
            {
                for (int i = 0; i < AllWeaponSkillInfo.Count;  ++i)
                {
                    AllWeaponSkillInfo[i].Clear();
                    ReturnAllWeaponSkillInfoElement(AllWeaponSkillInfo[i]);
                }
                AllWeaponSkillInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AllWeaponSkillInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AllWeaponSkillInfoCacheList.Add(new global::cs.OneWeaponButtonData());
            }
        }

        /// <summary>get a free element from AllWeaponSkillInfoCacheList</summary>
        public global::cs.OneWeaponButtonData GetFreeAllWeaponSkillInfoElement()
        {
            global::cs.OneWeaponButtonData ret = null;
            if (AllWeaponSkillInfoCacheList.Count > 0)
            {
                 ret = AllWeaponSkillInfoCacheList[0];
                AllWeaponSkillInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.OneWeaponButtonData();
            }
            return ret;
        }

        /// <summary>return a free element to AllWeaponSkillInfoCacheList</summary>
        public void ReturnAllWeaponSkillInfoElement(global::cs.OneWeaponButtonData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AllWeaponSkillInfoCacheList.Count;  ++i)
            {
                if (AllWeaponSkillInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AllWeaponSkillInfoCacheList.Add(element);
            }
        }
    }



























































































































































































































}
