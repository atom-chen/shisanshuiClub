// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace cs
{
    public partial class MyUint64
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MyUint64 Deserialize(Stream stream)
        {
            var instance = new MyUint64();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MyUint64 DeserializeLengthDelimited(Stream stream)
        {
            var instance = new MyUint64();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MyUint64 DeserializeLength(Stream stream, int length)
        {
            var instance = new MyUint64();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MyUint64 Deserialize(byte[] buffer)
        {
            var instance = new MyUint64();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.MyUint64 Deserialize(byte[] buffer, global::cs.MyUint64 instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.MyUint64 Deserialize(Stream stream, global::cs.MyUint64 instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.High = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Low = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.MyUint64 DeserializeLengthDelimited(Stream stream, global::cs.MyUint64 instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.High = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Low = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.MyUint64 DeserializeLength(Stream stream, int length, global::cs.MyUint64 instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.High = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Low = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MyUint64 instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.High);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Low);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MyUint64 instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, MyUint64 instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class TconndAddr
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TconndAddr Deserialize(Stream stream)
        {
            var instance = new TconndAddr();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TconndAddr DeserializeLengthDelimited(Stream stream)
        {
            var instance = new TconndAddr();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static TconndAddr DeserializeLength(Stream stream, int length)
        {
            var instance = new TconndAddr();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static TconndAddr Deserialize(byte[] buffer)
        {
            var instance = new TconndAddr();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.TconndAddr Deserialize(byte[] buffer, global::cs.TconndAddr instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.TconndAddr Deserialize(Stream stream, global::cs.TconndAddr instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Ip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Port = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.TconndAddr DeserializeLengthDelimited(Stream stream, global::cs.TconndAddr instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Ip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Port = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.TconndAddr DeserializeLength(Stream stream, int length, global::cs.TconndAddr instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Ip = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Port = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, TconndAddr instance)
        {
            var msField = stack.Pop();
            if (instance.Ip == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Ip is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Ip));
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Port);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(TconndAddr instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, TconndAddr instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class GlobalRoleBriefInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GlobalRoleBriefInfo Deserialize(Stream stream)
        {
            var instance = new GlobalRoleBriefInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GlobalRoleBriefInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new GlobalRoleBriefInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GlobalRoleBriefInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new GlobalRoleBriefInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GlobalRoleBriefInfo Deserialize(byte[] buffer)
        {
            var instance = new GlobalRoleBriefInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.GlobalRoleBriefInfo Deserialize(byte[] buffer, global::cs.GlobalRoleBriefInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.GlobalRoleBriefInfo Deserialize(Stream stream, global::cs.GlobalRoleBriefInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.AccID == null)
                            instance.AccID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.AccID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ModelID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Level = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.WorldID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.GlobalRoleBriefInfo DeserializeLengthDelimited(Stream stream, global::cs.GlobalRoleBriefInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.AccID == null)
                            instance.AccID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.AccID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ModelID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Level = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.WorldID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.GlobalRoleBriefInfo DeserializeLength(Stream stream, int length, global::cs.GlobalRoleBriefInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.AccID == null)
                            instance.AccID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.AccID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ModelID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Level = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.WorldID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GlobalRoleBriefInfo instance)
        {
            var msField = stack.Pop();
            if (instance.AccID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("AccID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.AccID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.RoleID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleID is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.RoleID);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ModelID);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Level);
            if (instance.RoleName == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleName is required by the proto specification.");
            // Key for field: 5, LengthDelimited
            stream.WriteByte(42);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.RoleName));
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.WorldID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GlobalRoleBriefInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, GlobalRoleBriefInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class ZoneInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ZoneInfo Deserialize(Stream stream)
        {
            var instance = new ZoneInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ZoneInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new ZoneInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ZoneInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new ZoneInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ZoneInfo Deserialize(byte[] buffer)
        {
            var instance = new ZoneInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.ZoneInfo Deserialize(byte[] buffer, global::cs.ZoneInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.ZoneInfo Deserialize(Stream stream, global::cs.ZoneInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ZoneIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.ZoneName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ZoneInfo DeserializeLengthDelimited(Stream stream, global::cs.ZoneInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ZoneIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.ZoneName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ZoneInfo DeserializeLength(Stream stream, int length, global::cs.ZoneInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ZoneIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.ZoneName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ZoneInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ZoneIndex);
            if (instance.ZoneName == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ZoneName is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.ZoneName));
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ZoneInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ZoneInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class GameWorld
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameWorld Deserialize(Stream stream)
        {
            var instance = new GameWorld();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameWorld DeserializeLengthDelimited(Stream stream)
        {
            var instance = new GameWorld();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static GameWorld DeserializeLength(Stream stream, int length)
        {
            var instance = new GameWorld();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static GameWorld Deserialize(byte[] buffer)
        {
            var instance = new GameWorld();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.GameWorld Deserialize(byte[] buffer, global::cs.GameWorld instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.GameWorld Deserialize(Stream stream, global::cs.GameWorld instance)
        {
            if (instance.AddrList == null)
                instance.AddrList = new List<global::cs.TconndAddr>();
            if (instance.RoleList == null)
                instance.RoleList = new List<global::cs.GlobalRoleBriefInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.WorldName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.WorldID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.LoadType = (global::cs.EnmWorldLoadType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.TconndAddr AddrListElement = instance.GetFreeAddrListElement();
                        instance.AddrList.Add(global::cs.TconndAddr.DeserializeLengthDelimited(stream, AddrListElement));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        global::cs.GlobalRoleBriefInfo RoleListElement = instance.GetFreeRoleListElement();
                        instance.RoleList.Add(global::cs.GlobalRoleBriefInfo.DeserializeLengthDelimited(stream, RoleListElement));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.ZoneOpenTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.ZoneIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.GameWorld DeserializeLengthDelimited(Stream stream, global::cs.GameWorld instance)
        {
            if (instance.AddrList == null)
                instance.AddrList = new List<global::cs.TconndAddr>();
            if (instance.RoleList == null)
                instance.RoleList = new List<global::cs.GlobalRoleBriefInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.WorldName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.WorldID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.LoadType = (global::cs.EnmWorldLoadType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.TconndAddr AddrListElement = instance.GetFreeAddrListElement();
                        instance.AddrList.Add(global::cs.TconndAddr.DeserializeLengthDelimited(stream, AddrListElement));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        global::cs.GlobalRoleBriefInfo RoleListElement = instance.GetFreeRoleListElement();
                        instance.RoleList.Add(global::cs.GlobalRoleBriefInfo.DeserializeLengthDelimited(stream, RoleListElement));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.ZoneOpenTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.ZoneIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.GameWorld DeserializeLength(Stream stream, int length, global::cs.GameWorld instance)
        {
            if (instance.AddrList == null)
                instance.AddrList = new List<global::cs.TconndAddr>();
            if (instance.RoleList == null)
                instance.RoleList = new List<global::cs.GlobalRoleBriefInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.WorldName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.WorldID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.LoadType = (global::cs.EnmWorldLoadType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.TconndAddr AddrListElement = instance.GetFreeAddrListElement();
                        instance.AddrList.Add(global::cs.TconndAddr.DeserializeLengthDelimited(stream, AddrListElement));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        global::cs.GlobalRoleBriefInfo RoleListElement = instance.GetFreeRoleListElement();
                        instance.RoleList.Add(global::cs.GlobalRoleBriefInfo.DeserializeLengthDelimited(stream, RoleListElement));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.ZoneOpenTime = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.ZoneIndex = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, GameWorld instance)
        {
            var msField = stack.Pop();
            if (instance.WorldName == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("WorldName is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.WorldName));
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.WorldID);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.LoadType);
            if (instance.AddrList != null)
            {
                foreach (var i4 in instance.AddrList)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    ﻿msField.SetLength(0);
                    global::cs.TconndAddr.Serialize(msField, i4);
                    // Length delimited byte array
                    uint length4 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                    msField.WriteTo(stream);

                }
            }
            if (instance.RoleList != null)
            {
                foreach (var i5 in instance.RoleList)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    ﻿msField.SetLength(0);
                    global::cs.GlobalRoleBriefInfo.Serialize(msField, i5);
                    // Length delimited byte array
                    uint length5 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                    msField.WriteTo(stream);

                }
            }
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ZoneOpenTime);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ZoneIndex);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(GameWorld instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, GameWorld instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSRoleData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSRoleData Deserialize(Stream stream)
        {
            var instance = new CSRoleData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSRoleData DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSRoleData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSRoleData DeserializeLength(Stream stream, int length)
        {
            var instance = new CSRoleData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSRoleData Deserialize(byte[] buffer)
        {
            var instance = new CSRoleData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSRoleData Deserialize(byte[] buffer, global::cs.CSRoleData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSRoleData Deserialize(Stream stream, global::cs.CSRoleData instance)
        {
            if (instance.RoleAttr == null)
                instance.RoleAttr = new List<global::cs.AttrData>();
            if (instance.AllCampAttr == null)
                instance.AllCampAttr = new List<global::cs.CampAttr>();
            if (instance.GuidIDList == null)
                instance.GuidIDList = new List<uint>();
            if (instance.OutWardInfo == null)
                instance.OutWardInfo = new List<global::cs.SingleOutWardInfo>();
            if (instance.FightSoulInfo == null)
                instance.FightSoulInfo = new List<global::cs.FightSoul>();
            if (instance.PositionStrengthen == null)
                instance.PositionStrengthen = new List<global::cs.PositionStrengthenInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.BagData == null)
                            instance.BagData = global::cs.PlayerBagData.DeserializeLengthDelimited(stream);
                        else
                            global::cs.PlayerBagData.DeserializeLengthDelimited(stream, instance.BagData);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.AttrData RoleAttrElement = instance.GetFreeRoleAttrElement();
                        instance.RoleAttr.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, RoleAttrElement));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.SkillInfo == null)
                            instance.SkillInfo = global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream, instance.SkillInfo);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.CampAttr AllCampAttrElement = instance.GetFreeAllCampAttrElement();
                        instance.AllCampAttr.Add(global::cs.CampAttr.DeserializeLengthDelimited(stream, AllCampAttrElement));
                        continue;
                    // Field 8 Varint
                    case 64:
                        // repeated
                        instance.GuidIDList.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.AccID == null)
                            instance.AccID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.AccID);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        if (instance.BiaoCheID == null)
                            instance.BiaoCheID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.BiaoCheID);
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        // repeated
                        global::cs.SingleOutWardInfo OutWardInfoElement = instance.GetFreeOutWardInfoElement();
                        instance.OutWardInfo.Add(global::cs.SingleOutWardInfo.DeserializeLengthDelimited(stream, OutWardInfoElement));
                        continue;
                    // Field 12 LengthDelimited
                    case 98:
                        // repeated
                        global::cs.FightSoul FightSoulInfoElement = instance.GetFreeFightSoulInfoElement();
                        instance.FightSoulInfo.Add(global::cs.FightSoul.DeserializeLengthDelimited(stream, FightSoulInfoElement));
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        if (instance.RideInfo == null)
                            instance.RideInfo = global::cs.RideInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.RideInfo.DeserializeLengthDelimited(stream, instance.RideInfo);
                        continue;
                    // Field 14 LengthDelimited
                    case 114:
                        if (instance.OfflineExp == null)
                            instance.OfflineExp = global::cs.OfflineExp.DeserializeLengthDelimited(stream);
                        else
                            global::cs.OfflineExp.DeserializeLengthDelimited(stream, instance.OfflineExp);
                        continue;
                    // Field 15 LengthDelimited
                    case 122:
                        // repeated
                        global::cs.PositionStrengthenInfo PositionStrengthenElement = instance.GetFreePositionStrengthenElement();
                        instance.PositionStrengthen.Add(global::cs.PositionStrengthenInfo.DeserializeLengthDelimited(stream, PositionStrengthenElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    case 16:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSRoleData DeserializeLengthDelimited(Stream stream, global::cs.CSRoleData instance)
        {
            if (instance.RoleAttr == null)
                instance.RoleAttr = new List<global::cs.AttrData>();
            if (instance.AllCampAttr == null)
                instance.AllCampAttr = new List<global::cs.CampAttr>();
            if (instance.GuidIDList == null)
                instance.GuidIDList = new List<uint>();
            if (instance.OutWardInfo == null)
                instance.OutWardInfo = new List<global::cs.SingleOutWardInfo>();
            if (instance.FightSoulInfo == null)
                instance.FightSoulInfo = new List<global::cs.FightSoul>();
            if (instance.PositionStrengthen == null)
                instance.PositionStrengthen = new List<global::cs.PositionStrengthenInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.BagData == null)
                            instance.BagData = global::cs.PlayerBagData.DeserializeLengthDelimited(stream);
                        else
                            global::cs.PlayerBagData.DeserializeLengthDelimited(stream, instance.BagData);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.AttrData RoleAttrElement = instance.GetFreeRoleAttrElement();
                        instance.RoleAttr.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, RoleAttrElement));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.SkillInfo == null)
                            instance.SkillInfo = global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream, instance.SkillInfo);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.CampAttr AllCampAttrElement = instance.GetFreeAllCampAttrElement();
                        instance.AllCampAttr.Add(global::cs.CampAttr.DeserializeLengthDelimited(stream, AllCampAttrElement));
                        continue;
                    // Field 8 Varint
                    case 64:
                        // repeated
                        instance.GuidIDList.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.AccID == null)
                            instance.AccID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.AccID);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        if (instance.BiaoCheID == null)
                            instance.BiaoCheID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.BiaoCheID);
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        // repeated
                        global::cs.SingleOutWardInfo OutWardInfoElement = instance.GetFreeOutWardInfoElement();
                        instance.OutWardInfo.Add(global::cs.SingleOutWardInfo.DeserializeLengthDelimited(stream, OutWardInfoElement));
                        continue;
                    // Field 12 LengthDelimited
                    case 98:
                        // repeated
                        global::cs.FightSoul FightSoulInfoElement = instance.GetFreeFightSoulInfoElement();
                        instance.FightSoulInfo.Add(global::cs.FightSoul.DeserializeLengthDelimited(stream, FightSoulInfoElement));
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        if (instance.RideInfo == null)
                            instance.RideInfo = global::cs.RideInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.RideInfo.DeserializeLengthDelimited(stream, instance.RideInfo);
                        continue;
                    // Field 14 LengthDelimited
                    case 114:
                        if (instance.OfflineExp == null)
                            instance.OfflineExp = global::cs.OfflineExp.DeserializeLengthDelimited(stream);
                        else
                            global::cs.OfflineExp.DeserializeLengthDelimited(stream, instance.OfflineExp);
                        continue;
                    // Field 15 LengthDelimited
                    case 122:
                        // repeated
                        global::cs.PositionStrengthenInfo PositionStrengthenElement = instance.GetFreePositionStrengthenElement();
                        instance.PositionStrengthen.Add(global::cs.PositionStrengthenInfo.DeserializeLengthDelimited(stream, PositionStrengthenElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    case 16:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSRoleData DeserializeLength(Stream stream, int length, global::cs.CSRoleData instance)
        {
            if (instance.RoleAttr == null)
                instance.RoleAttr = new List<global::cs.AttrData>();
            if (instance.AllCampAttr == null)
                instance.AllCampAttr = new List<global::cs.CampAttr>();
            if (instance.GuidIDList == null)
                instance.GuidIDList = new List<uint>();
            if (instance.OutWardInfo == null)
                instance.OutWardInfo = new List<global::cs.SingleOutWardInfo>();
            if (instance.FightSoulInfo == null)
                instance.FightSoulInfo = new List<global::cs.FightSoul>();
            if (instance.PositionStrengthen == null)
                instance.PositionStrengthen = new List<global::cs.PositionStrengthenInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.BagData == null)
                            instance.BagData = global::cs.PlayerBagData.DeserializeLengthDelimited(stream);
                        else
                            global::cs.PlayerBagData.DeserializeLengthDelimited(stream, instance.BagData);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.AttrData RoleAttrElement = instance.GetFreeRoleAttrElement();
                        instance.RoleAttr.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, RoleAttrElement));
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.SkillInfo == null)
                            instance.SkillInfo = global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream, instance.SkillInfo);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.CampAttr AllCampAttrElement = instance.GetFreeAllCampAttrElement();
                        instance.AllCampAttr.Add(global::cs.CampAttr.DeserializeLengthDelimited(stream, AllCampAttrElement));
                        continue;
                    // Field 8 Varint
                    case 64:
                        // repeated
                        instance.GuidIDList.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream));
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.AccID == null)
                            instance.AccID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.AccID);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        if (instance.BiaoCheID == null)
                            instance.BiaoCheID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.BiaoCheID);
                        continue;
                    // Field 11 LengthDelimited
                    case 90:
                        // repeated
                        global::cs.SingleOutWardInfo OutWardInfoElement = instance.GetFreeOutWardInfoElement();
                        instance.OutWardInfo.Add(global::cs.SingleOutWardInfo.DeserializeLengthDelimited(stream, OutWardInfoElement));
                        continue;
                    // Field 12 LengthDelimited
                    case 98:
                        // repeated
                        global::cs.FightSoul FightSoulInfoElement = instance.GetFreeFightSoulInfoElement();
                        instance.FightSoulInfo.Add(global::cs.FightSoul.DeserializeLengthDelimited(stream, FightSoulInfoElement));
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        if (instance.RideInfo == null)
                            instance.RideInfo = global::cs.RideInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.RideInfo.DeserializeLengthDelimited(stream, instance.RideInfo);
                        continue;
                    // Field 14 LengthDelimited
                    case 114:
                        if (instance.OfflineExp == null)
                            instance.OfflineExp = global::cs.OfflineExp.DeserializeLengthDelimited(stream);
                        else
                            global::cs.OfflineExp.DeserializeLengthDelimited(stream, instance.OfflineExp);
                        continue;
                    // Field 15 LengthDelimited
                    case 122:
                        // repeated
                        global::cs.PositionStrengthenInfo PositionStrengthenElement = instance.GetFreePositionStrengthenElement();
                        instance.PositionStrengthen.Add(global::cs.PositionStrengthenInfo.DeserializeLengthDelimited(stream, PositionStrengthenElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    case 16:
                        if(key.WireType != global::SilentOrbit.ProtocolBuffers.Wire.LengthDelimited)
                            break;
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSRoleData instance)
        {
            var msField = stack.Pop();
            if (instance.RoleID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.RoleID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.RoleName == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleName is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.RoleName));
            if (instance.BagData == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("BagData is required by the proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            ﻿msField.SetLength(0);
            global::cs.PlayerBagData.Serialize(msField, instance.BagData);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            msField.WriteTo(stream);

            if (instance.RoleAttr != null)
            {
                foreach (var i4 in instance.RoleAttr)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    ﻿msField.SetLength(0);
                    global::cs.AttrData.Serialize(msField, i4);
                    // Length delimited byte array
                    uint length4 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                    msField.WriteTo(stream);

                }
            }
            if (instance.SkillInfo == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("SkillInfo is required by the proto specification.");
            // Key for field: 5, LengthDelimited
            stream.WriteByte(42);
            ﻿msField.SetLength(0);
            global::cs.SkillRoleInfo.Serialize(msField, instance.SkillInfo);
            // Length delimited byte array
            uint length5 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
            msField.WriteTo(stream);

            if (instance.AllCampAttr != null)
            {
                foreach (var i6 in instance.AllCampAttr)
                {
                    // Key for field: 6, LengthDelimited
                    stream.WriteByte(50);
                    ﻿msField.SetLength(0);
                    global::cs.CampAttr.Serialize(msField, i6);
                    // Length delimited byte array
                    uint length6 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length6);
                    msField.WriteTo(stream);

                }
            }
            if (instance.GuidIDList != null)
            {
                foreach (var i8 in instance.GuidIDList)
                {
                    // Key for field: 8, Varint
                    stream.WriteByte(64);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, i8);
                }
            }
            if (instance.AccID != null)
            {
                // Key for field: 9, LengthDelimited
                stream.WriteByte(74);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.AccID);
                // Length delimited byte array
                uint length9 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length9);
                msField.WriteTo(stream);

            }
            if (instance.BiaoCheID != null)
            {
                // Key for field: 10, LengthDelimited
                stream.WriteByte(82);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.BiaoCheID);
                // Length delimited byte array
                uint length10 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length10);
                msField.WriteTo(stream);

            }
            if (instance.OutWardInfo != null)
            {
                foreach (var i11 in instance.OutWardInfo)
                {
                    // Key for field: 11, LengthDelimited
                    stream.WriteByte(90);
                    ﻿msField.SetLength(0);
                    global::cs.SingleOutWardInfo.Serialize(msField, i11);
                    // Length delimited byte array
                    uint length11 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length11);
                    msField.WriteTo(stream);

                }
            }
            if (instance.FightSoulInfo != null)
            {
                foreach (var i12 in instance.FightSoulInfo)
                {
                    // Key for field: 12, LengthDelimited
                    stream.WriteByte(98);
                    ﻿msField.SetLength(0);
                    global::cs.FightSoul.Serialize(msField, i12);
                    // Length delimited byte array
                    uint length12 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length12);
                    msField.WriteTo(stream);

                }
            }
            if (instance.RideInfo != null)
            {
                // Key for field: 13, LengthDelimited
                stream.WriteByte(106);
                ﻿msField.SetLength(0);
                global::cs.RideInfo.Serialize(msField, instance.RideInfo);
                // Length delimited byte array
                uint length13 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length13);
                msField.WriteTo(stream);

            }
            if (instance.OfflineExp != null)
            {
                // Key for field: 14, LengthDelimited
                stream.WriteByte(114);
                ﻿msField.SetLength(0);
                global::cs.OfflineExp.Serialize(msField, instance.OfflineExp);
                // Length delimited byte array
                uint length14 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length14);
                msField.WriteTo(stream);

            }
            if (instance.PositionStrengthen != null)
            {
                foreach (var i15 in instance.PositionStrengthen)
                {
                    // Key for field: 15, LengthDelimited
                    stream.WriteByte(122);
                    ﻿msField.SetLength(0);
                    global::cs.PositionStrengthenInfo.Serialize(msField, i15);
                    // Length delimited byte array
                    uint length15 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length15);
                    msField.WriteTo(stream);

                }
            }
            if (instance.FactionID != null)
            {
                // Key for field: 16, LengthDelimited
                stream.WriteByte(130);
                stream.WriteByte(1);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.FactionID);
                // Length delimited byte array
                uint length16 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length16);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSRoleData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSRoleData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class NpcDieLog
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NpcDieLog Deserialize(Stream stream)
        {
            var instance = new NpcDieLog();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NpcDieLog DeserializeLengthDelimited(Stream stream)
        {
            var instance = new NpcDieLog();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NpcDieLog DeserializeLength(Stream stream, int length)
        {
            var instance = new NpcDieLog();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static NpcDieLog Deserialize(byte[] buffer)
        {
            var instance = new NpcDieLog();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.NpcDieLog Deserialize(byte[] buffer, global::cs.NpcDieLog instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.NpcDieLog Deserialize(Stream stream, global::cs.NpcDieLog instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.iMonsterId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.iType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.uTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.iMapId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.iPosX = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.iPosY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.iPosZ = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 Varint
                    case 64:
                        instance.iReason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.NpcDieLog DeserializeLengthDelimited(Stream stream, global::cs.NpcDieLog instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.iMonsterId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.iType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.uTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.iMapId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.iPosX = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.iPosY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.iPosZ = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 Varint
                    case 64:
                        instance.iReason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.NpcDieLog DeserializeLength(Stream stream, int length, global::cs.NpcDieLog instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.iMonsterId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.iType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.uTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.iMapId = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.iPosX = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.iPosY = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.iPosZ = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 8 Varint
                    case 64:
                        instance.iReason = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, NpcDieLog instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iMonsterId);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iType);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.uTime);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iMapId);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iPosX);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iPosY);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iPosZ);
            // Key for field: 8, Varint
            stream.WriteByte(64);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iReason);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(NpcDieLog instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, NpcDieLog instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class ItemBaseInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ItemBaseInfo Deserialize(Stream stream)
        {
            var instance = new ItemBaseInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ItemBaseInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new ItemBaseInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ItemBaseInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new ItemBaseInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ItemBaseInfo Deserialize(byte[] buffer)
        {
            var instance = new ItemBaseInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.ItemBaseInfo Deserialize(byte[] buffer, global::cs.ItemBaseInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.ItemBaseInfo Deserialize(Stream stream, global::cs.ItemBaseInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BagType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SlotID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.ItemGID == null)
                            instance.ItemGID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ItemGID);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ItemNo = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.GetTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ItemBaseInfo DeserializeLengthDelimited(Stream stream, global::cs.ItemBaseInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BagType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SlotID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.ItemGID == null)
                            instance.ItemGID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ItemGID);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ItemNo = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.GetTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ItemBaseInfo DeserializeLength(Stream stream, int length, global::cs.ItemBaseInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BagType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SlotID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.ItemGID == null)
                            instance.ItemGID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ItemGID);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ItemNo = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.GetTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ItemBaseInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.BagType);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SlotID);
            if (instance.ItemGID != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.ItemGID);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                msField.WriteTo(stream);

            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.ItemNo);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.GetTime);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ItemBaseInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ItemBaseInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class AttrPair
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AttrPair Deserialize(Stream stream)
        {
            var instance = new AttrPair();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AttrPair DeserializeLengthDelimited(Stream stream)
        {
            var instance = new AttrPair();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AttrPair DeserializeLength(Stream stream, int length)
        {
            var instance = new AttrPair();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static AttrPair Deserialize(byte[] buffer)
        {
            var instance = new AttrPair();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.AttrPair Deserialize(byte[] buffer, global::cs.AttrPair instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.AttrPair Deserialize(Stream stream, global::cs.AttrPair instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.AttrRatio = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AttrClass = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.AttrRangeID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.AttrPair DeserializeLengthDelimited(Stream stream, global::cs.AttrPair instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.AttrRatio = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AttrClass = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.AttrRangeID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.AttrPair DeserializeLength(Stream stream, int length, global::cs.AttrPair instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Value = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.AttrRatio = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AttrClass = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.AttrRangeID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, AttrPair instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Value);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.AttrRatio);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.AttrClass);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.AttrRangeID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(AttrPair instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, AttrPair instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class EquipAttr
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EquipAttr Deserialize(Stream stream)
        {
            var instance = new EquipAttr();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EquipAttr DeserializeLengthDelimited(Stream stream)
        {
            var instance = new EquipAttr();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EquipAttr DeserializeLength(Stream stream, int length)
        {
            var instance = new EquipAttr();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static EquipAttr Deserialize(byte[] buffer)
        {
            var instance = new EquipAttr();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.EquipAttr Deserialize(byte[] buffer, global::cs.EquipAttr instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.EquipAttr Deserialize(Stream stream, global::cs.EquipAttr instance)
        {
            if (instance.stAttrPair == null)
                instance.stAttrPair = new List<global::cs.AttrPair>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.AttrPair stAttrPairElement = instance.GetFreestAttrPairElement();
                        instance.stAttrPair.Add(global::cs.AttrPair.DeserializeLengthDelimited(stream, stAttrPairElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.EquipAttr DeserializeLengthDelimited(Stream stream, global::cs.EquipAttr instance)
        {
            if (instance.stAttrPair == null)
                instance.stAttrPair = new List<global::cs.AttrPair>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.AttrPair stAttrPairElement = instance.GetFreestAttrPairElement();
                        instance.stAttrPair.Add(global::cs.AttrPair.DeserializeLengthDelimited(stream, stAttrPairElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.EquipAttr DeserializeLength(Stream stream, int length, global::cs.EquipAttr instance)
        {
            if (instance.stAttrPair == null)
                instance.stAttrPair = new List<global::cs.AttrPair>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.AttrPair stAttrPairElement = instance.GetFreestAttrPairElement();
                        instance.stAttrPair.Add(global::cs.AttrPair.DeserializeLengthDelimited(stream, stAttrPairElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, EquipAttr instance)
        {
            var msField = stack.Pop();
            if (instance.stAttrPair != null)
            {
                foreach (var i1 in instance.stAttrPair)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.AttrPair.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(EquipAttr instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, EquipAttr instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class EquipHoleInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EquipHoleInfo Deserialize(Stream stream)
        {
            var instance = new EquipHoleInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EquipHoleInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new EquipHoleInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static EquipHoleInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new EquipHoleInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static EquipHoleInfo Deserialize(byte[] buffer)
        {
            var instance = new EquipHoleInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.EquipHoleInfo Deserialize(byte[] buffer, global::cs.EquipHoleInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.EquipHoleInfo Deserialize(Stream stream, global::cs.EquipHoleInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.HoleType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.HoleOrder = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FillItemID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.EquipHoleInfo DeserializeLengthDelimited(Stream stream, global::cs.EquipHoleInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.HoleType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.HoleOrder = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FillItemID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.EquipHoleInfo DeserializeLength(Stream stream, int length, global::cs.EquipHoleInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.HoleType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.HoleOrder = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FillItemID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, EquipHoleInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.HoleType);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.HoleOrder);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.FillItemID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(EquipHoleInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, EquipHoleInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class SlotInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SlotInfo Deserialize(Stream stream)
        {
            var instance = new SlotInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SlotInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new SlotInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SlotInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new SlotInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SlotInfo Deserialize(byte[] buffer)
        {
            var instance = new SlotInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.SlotInfo Deserialize(byte[] buffer, global::cs.SlotInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.SlotInfo Deserialize(Stream stream, global::cs.SlotInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BagType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SlotID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SlotInfo DeserializeLengthDelimited(Stream stream, global::cs.SlotInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BagType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SlotID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SlotInfo DeserializeLength(Stream stream, int length, global::cs.SlotInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.BagType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SlotID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SlotInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.BagType);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SlotID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SlotInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SlotInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class Equip
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Equip Deserialize(Stream stream)
        {
            var instance = new Equip();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Equip DeserializeLengthDelimited(Stream stream)
        {
            var instance = new Equip();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Equip DeserializeLength(Stream stream, int length)
        {
            var instance = new Equip();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Equip Deserialize(byte[] buffer)
        {
            var instance = new Equip();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.Equip Deserialize(byte[] buffer, global::cs.Equip instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.Equip Deserialize(Stream stream, global::cs.Equip instance)
        {
            instance.EquipTypeID = global::cs.EnmEquipTypeID.ENM_EQUIP_TYPE_WEAPON;
            if (instance.HoleList == null)
                instance.HoleList = new List<global::cs.EquipHoleInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.stEquipAttr == null)
                            instance.stEquipAttr = global::cs.EquipAttr.DeserializeLengthDelimited(stream);
                        else
                            global::cs.EquipAttr.DeserializeLengthDelimited(stream, instance.stEquipAttr);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.stBaseInfo == null)
                            instance.stBaseInfo = global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream, instance.stBaseInfo);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.StarLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.StrengthenLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.EquipTypeID = (global::cs.EnmEquipTypeID)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.WeaponID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.QuenchingFlag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.StoreQuenchingAttr == null)
                            instance.StoreQuenchingAttr = global::cs.AttrPair.DeserializeLengthDelimited(stream);
                        else
                            global::cs.AttrPair.DeserializeLengthDelimited(stream, instance.StoreQuenchingAttr);
                        continue;
                    // Field 9 Varint
                    case 72:
                        instance.Lock = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 10 Varint
                    case 80:
                        instance.EnhanceLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.EnhancePoint = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        // repeated
                        global::cs.EquipHoleInfo HoleListElement = instance.GetFreeHoleListElement();
                        instance.HoleList.Add(global::cs.EquipHoleInfo.DeserializeLengthDelimited(stream, HoleListElement));
                        continue;
                    // Field 14 Varint
                    case 112:
                        instance.Identify = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.Equip DeserializeLengthDelimited(Stream stream, global::cs.Equip instance)
        {
            instance.EquipTypeID = global::cs.EnmEquipTypeID.ENM_EQUIP_TYPE_WEAPON;
            if (instance.HoleList == null)
                instance.HoleList = new List<global::cs.EquipHoleInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.stEquipAttr == null)
                            instance.stEquipAttr = global::cs.EquipAttr.DeserializeLengthDelimited(stream);
                        else
                            global::cs.EquipAttr.DeserializeLengthDelimited(stream, instance.stEquipAttr);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.stBaseInfo == null)
                            instance.stBaseInfo = global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream, instance.stBaseInfo);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.StarLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.StrengthenLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.EquipTypeID = (global::cs.EnmEquipTypeID)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.WeaponID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.QuenchingFlag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.StoreQuenchingAttr == null)
                            instance.StoreQuenchingAttr = global::cs.AttrPair.DeserializeLengthDelimited(stream);
                        else
                            global::cs.AttrPair.DeserializeLengthDelimited(stream, instance.StoreQuenchingAttr);
                        continue;
                    // Field 9 Varint
                    case 72:
                        instance.Lock = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 10 Varint
                    case 80:
                        instance.EnhanceLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.EnhancePoint = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        // repeated
                        global::cs.EquipHoleInfo HoleListElement = instance.GetFreeHoleListElement();
                        instance.HoleList.Add(global::cs.EquipHoleInfo.DeserializeLengthDelimited(stream, HoleListElement));
                        continue;
                    // Field 14 Varint
                    case 112:
                        instance.Identify = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.Equip DeserializeLength(Stream stream, int length, global::cs.Equip instance)
        {
            instance.EquipTypeID = global::cs.EnmEquipTypeID.ENM_EQUIP_TYPE_WEAPON;
            if (instance.HoleList == null)
                instance.HoleList = new List<global::cs.EquipHoleInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.stEquipAttr == null)
                            instance.stEquipAttr = global::cs.EquipAttr.DeserializeLengthDelimited(stream);
                        else
                            global::cs.EquipAttr.DeserializeLengthDelimited(stream, instance.stEquipAttr);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.stBaseInfo == null)
                            instance.stBaseInfo = global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream, instance.stBaseInfo);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.StarLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.StrengthenLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.EquipTypeID = (global::cs.EnmEquipTypeID)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.WeaponID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.QuenchingFlag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.StoreQuenchingAttr == null)
                            instance.StoreQuenchingAttr = global::cs.AttrPair.DeserializeLengthDelimited(stream);
                        else
                            global::cs.AttrPair.DeserializeLengthDelimited(stream, instance.StoreQuenchingAttr);
                        continue;
                    // Field 9 Varint
                    case 72:
                        instance.Lock = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 10 Varint
                    case 80:
                        instance.EnhanceLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.EnhancePoint = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 13 LengthDelimited
                    case 106:
                        // repeated
                        global::cs.EquipHoleInfo HoleListElement = instance.GetFreeHoleListElement();
                        instance.HoleList.Add(global::cs.EquipHoleInfo.DeserializeLengthDelimited(stream, HoleListElement));
                        continue;
                    // Field 14 Varint
                    case 112:
                        instance.Identify = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Equip instance)
        {
            var msField = stack.Pop();
            if (instance.stEquipAttr != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                global::cs.EquipAttr.Serialize(msField, instance.stEquipAttr);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                msField.WriteTo(stream);

            }
            if (instance.stBaseInfo != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                global::cs.ItemBaseInfo.Serialize(msField, instance.stBaseInfo);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                msField.WriteTo(stream);

            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.StarLevel);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.StrengthenLevel);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.EquipTypeID);
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.WeaponID);
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.QuenchingFlag);
            if (instance.StoreQuenchingAttr != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                ﻿msField.SetLength(0);
                global::cs.AttrPair.Serialize(msField, instance.StoreQuenchingAttr);
                // Length delimited byte array
                uint length8 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length8);
                msField.WriteTo(stream);

            }
            // Key for field: 9, Varint
            stream.WriteByte(72);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Lock);
            // Key for field: 10, Varint
            stream.WriteByte(80);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.EnhanceLevel);
            // Key for field: 11, Varint
            stream.WriteByte(88);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.EnhancePoint);
            if (instance.HoleList != null)
            {
                foreach (var i13 in instance.HoleList)
                {
                    // Key for field: 13, LengthDelimited
                    stream.WriteByte(106);
                    ﻿msField.SetLength(0);
                    global::cs.EquipHoleInfo.Serialize(msField, i13);
                    // Length delimited byte array
                    uint length13 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length13);
                    msField.WriteTo(stream);

                }
            }
            // Key for field: 14, Varint
            stream.WriteByte(112);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Identify);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Equip instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Equip instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class Good
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Good Deserialize(Stream stream)
        {
            var instance = new Good();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Good DeserializeLengthDelimited(Stream stream)
        {
            var instance = new Good();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Good DeserializeLength(Stream stream, int length)
        {
            var instance = new Good();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Good Deserialize(byte[] buffer)
        {
            var instance = new Good();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.Good Deserialize(byte[] buffer, global::cs.Good instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.Good Deserialize(Stream stream, global::cs.Good instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.stBaseInfo == null)
                            instance.stBaseInfo = global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream, instance.stBaseInfo);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Count = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.GoodType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.LearnFlag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.Good DeserializeLengthDelimited(Stream stream, global::cs.Good instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.stBaseInfo == null)
                            instance.stBaseInfo = global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream, instance.stBaseInfo);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Count = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.GoodType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.LearnFlag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.Good DeserializeLength(Stream stream, int length, global::cs.Good instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.stBaseInfo == null)
                            instance.stBaseInfo = global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ItemBaseInfo.DeserializeLengthDelimited(stream, instance.stBaseInfo);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Count = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.GoodType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.LearnFlag = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Good instance)
        {
            var msField = stack.Pop();
            if (instance.stBaseInfo != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                global::cs.ItemBaseInfo.Serialize(msField, instance.stBaseInfo);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                msField.WriteTo(stream);

            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Count);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.GoodType);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.LearnFlag);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Good instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Good instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class BagPair
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BagPair Deserialize(Stream stream)
        {
            var instance = new BagPair();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BagPair DeserializeLengthDelimited(Stream stream)
        {
            var instance = new BagPair();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BagPair DeserializeLength(Stream stream, int length)
        {
            var instance = new BagPair();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BagPair Deserialize(byte[] buffer)
        {
            var instance = new BagPair();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.BagPair Deserialize(byte[] buffer, global::cs.BagPair instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.BagPair Deserialize(Stream stream, global::cs.BagPair instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.IdleSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.MaxSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.BagPair DeserializeLengthDelimited(Stream stream, global::cs.BagPair instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.IdleSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.MaxSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.BagPair DeserializeLength(Stream stream, int length, global::cs.BagPair instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.Type = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.IdleSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.MaxSize = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BagPair instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Type);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.IdleSize);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MaxSize);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BagPair instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, BagPair instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class BagInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BagInfo Deserialize(Stream stream)
        {
            var instance = new BagInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BagInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new BagInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static BagInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new BagInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static BagInfo Deserialize(byte[] buffer)
        {
            var instance = new BagInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.BagInfo Deserialize(byte[] buffer, global::cs.BagInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.BagInfo Deserialize(Stream stream, global::cs.BagInfo instance)
        {
            if (instance.stBagList == null)
                instance.stBagList = new List<global::cs.BagPair>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.BagPair stBagListElement = instance.GetFreestBagListElement();
                        instance.stBagList.Add(global::cs.BagPair.DeserializeLengthDelimited(stream, stBagListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.BagInfo DeserializeLengthDelimited(Stream stream, global::cs.BagInfo instance)
        {
            if (instance.stBagList == null)
                instance.stBagList = new List<global::cs.BagPair>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.BagPair stBagListElement = instance.GetFreestBagListElement();
                        instance.stBagList.Add(global::cs.BagPair.DeserializeLengthDelimited(stream, stBagListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.BagInfo DeserializeLength(Stream stream, int length, global::cs.BagInfo instance)
        {
            if (instance.stBagList == null)
                instance.stBagList = new List<global::cs.BagPair>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.BagPair stBagListElement = instance.GetFreestBagListElement();
                        instance.stBagList.Add(global::cs.BagPair.DeserializeLengthDelimited(stream, stBagListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, BagInfo instance)
        {
            var msField = stack.Pop();
            if (instance.stBagList != null)
            {
                foreach (var i1 in instance.stBagList)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.BagPair.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(BagInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, BagInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class PlayerBagData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerBagData Deserialize(Stream stream)
        {
            var instance = new PlayerBagData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerBagData DeserializeLengthDelimited(Stream stream)
        {
            var instance = new PlayerBagData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerBagData DeserializeLength(Stream stream, int length)
        {
            var instance = new PlayerBagData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerBagData Deserialize(byte[] buffer)
        {
            var instance = new PlayerBagData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.PlayerBagData Deserialize(byte[] buffer, global::cs.PlayerBagData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerBagData Deserialize(Stream stream, global::cs.PlayerBagData instance)
        {
            if (instance.EquipList == null)
                instance.EquipList = new List<global::cs.Equip>();
            if (instance.GoodList == null)
                instance.GoodList = new List<global::cs.Good>();
            if (instance.TmpBagList == null)
                instance.TmpBagList = new List<global::cs.SelectGoods>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.BagInfo == null)
                            instance.BagInfo = global::cs.BagInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.BagInfo.DeserializeLengthDelimited(stream, instance.BagInfo);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.Equip EquipListElement = instance.GetFreeEquipListElement();
                        instance.EquipList.Add(global::cs.Equip.DeserializeLengthDelimited(stream, EquipListElement));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.Good GoodListElement = instance.GetFreeGoodListElement();
                        instance.GoodList.Add(global::cs.Good.DeserializeLengthDelimited(stream, GoodListElement));
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.SelectGoods TmpBagListElement = instance.GetFreeTmpBagListElement();
                        instance.TmpBagList.Add(global::cs.SelectGoods.DeserializeLengthDelimited(stream, TmpBagListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerBagData DeserializeLengthDelimited(Stream stream, global::cs.PlayerBagData instance)
        {
            if (instance.EquipList == null)
                instance.EquipList = new List<global::cs.Equip>();
            if (instance.GoodList == null)
                instance.GoodList = new List<global::cs.Good>();
            if (instance.TmpBagList == null)
                instance.TmpBagList = new List<global::cs.SelectGoods>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.BagInfo == null)
                            instance.BagInfo = global::cs.BagInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.BagInfo.DeserializeLengthDelimited(stream, instance.BagInfo);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.Equip EquipListElement = instance.GetFreeEquipListElement();
                        instance.EquipList.Add(global::cs.Equip.DeserializeLengthDelimited(stream, EquipListElement));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.Good GoodListElement = instance.GetFreeGoodListElement();
                        instance.GoodList.Add(global::cs.Good.DeserializeLengthDelimited(stream, GoodListElement));
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.SelectGoods TmpBagListElement = instance.GetFreeTmpBagListElement();
                        instance.TmpBagList.Add(global::cs.SelectGoods.DeserializeLengthDelimited(stream, TmpBagListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerBagData DeserializeLength(Stream stream, int length, global::cs.PlayerBagData instance)
        {
            if (instance.EquipList == null)
                instance.EquipList = new List<global::cs.Equip>();
            if (instance.GoodList == null)
                instance.GoodList = new List<global::cs.Good>();
            if (instance.TmpBagList == null)
                instance.TmpBagList = new List<global::cs.SelectGoods>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.BagInfo == null)
                            instance.BagInfo = global::cs.BagInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.BagInfo.DeserializeLengthDelimited(stream, instance.BagInfo);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.Equip EquipListElement = instance.GetFreeEquipListElement();
                        instance.EquipList.Add(global::cs.Equip.DeserializeLengthDelimited(stream, EquipListElement));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.Good GoodListElement = instance.GetFreeGoodListElement();
                        instance.GoodList.Add(global::cs.Good.DeserializeLengthDelimited(stream, GoodListElement));
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        // repeated
                        global::cs.SelectGoods TmpBagListElement = instance.GetFreeTmpBagListElement();
                        instance.TmpBagList.Add(global::cs.SelectGoods.DeserializeLengthDelimited(stream, TmpBagListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerBagData instance)
        {
            var msField = stack.Pop();
            if (instance.BagInfo == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("BagInfo is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.BagInfo.Serialize(msField, instance.BagInfo);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.EquipList != null)
            {
                foreach (var i2 in instance.EquipList)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::cs.Equip.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            if (instance.GoodList != null)
            {
                foreach (var i3 in instance.GoodList)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿msField.SetLength(0);
                    global::cs.Good.Serialize(msField, i3);
                    // Length delimited byte array
                    uint length3 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                    msField.WriteTo(stream);

                }
            }
            if (instance.TmpBagList != null)
            {
                foreach (var i4 in instance.TmpBagList)
                {
                    // Key for field: 4, LengthDelimited
                    stream.WriteByte(34);
                    ﻿msField.SetLength(0);
                    global::cs.SelectGoods.Serialize(msField, i4);
                    // Length delimited byte array
                    uint length4 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerBagData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerBagData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSTestHelloReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSTestHelloReq Deserialize(Stream stream)
        {
            var instance = new CSTestHelloReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSTestHelloReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSTestHelloReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSTestHelloReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSTestHelloReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSTestHelloReq Deserialize(byte[] buffer)
        {
            var instance = new CSTestHelloReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSTestHelloReq Deserialize(byte[] buffer, global::cs.CSTestHelloReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSTestHelloReq Deserialize(Stream stream, global::cs.CSTestHelloReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ask = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.say = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSTestHelloReq DeserializeLengthDelimited(Stream stream, global::cs.CSTestHelloReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ask = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.say = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSTestHelloReq DeserializeLength(Stream stream, int length, global::cs.CSTestHelloReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ask = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.say = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSTestHelloReq instance)
        {
            var msField = stack.Pop();
            if (instance.ask == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ask is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.ask));
            if (instance.say == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("say is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.say));
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSTestHelloReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSTestHelloReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSTestHelloRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSTestHelloRes Deserialize(Stream stream)
        {
            var instance = new CSTestHelloRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSTestHelloRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSTestHelloRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSTestHelloRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSTestHelloRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSTestHelloRes Deserialize(byte[] buffer)
        {
            var instance = new CSTestHelloRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSTestHelloRes Deserialize(byte[] buffer, global::cs.CSTestHelloRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSTestHelloRes Deserialize(Stream stream, global::cs.CSTestHelloRes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ans = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.val = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSTestHelloRes DeserializeLengthDelimited(Stream stream, global::cs.CSTestHelloRes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ans = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.val = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSTestHelloRes DeserializeLength(Stream stream, int length, global::cs.CSTestHelloRes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ans = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.val = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSTestHelloRes instance)
        {
            var msField = stack.Pop();
            if (instance.ans == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ans is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.ans));
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.val);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSTestHelloRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSTestHelloRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class AttrData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AttrData Deserialize(Stream stream)
        {
            var instance = new AttrData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AttrData DeserializeLengthDelimited(Stream stream)
        {
            var instance = new AttrData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AttrData DeserializeLength(Stream stream, int length)
        {
            var instance = new AttrData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static AttrData Deserialize(byte[] buffer)
        {
            var instance = new AttrData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.AttrData Deserialize(byte[] buffer, global::cs.AttrData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.AttrData Deserialize(Stream stream, global::cs.AttrData instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ikey = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.stValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.AttrData DeserializeLengthDelimited(Stream stream, global::cs.AttrData instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ikey = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.stValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.AttrData DeserializeLength(Stream stream, int length, global::cs.AttrData instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ikey = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        instance.stValue = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, AttrData instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ikey);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.uValue);
            if (instance.stValue != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.stValue));
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(AttrData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, AttrData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class AdvanceItemInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AdvanceItemInfo Deserialize(Stream stream)
        {
            var instance = new AdvanceItemInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AdvanceItemInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new AdvanceItemInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static AdvanceItemInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new AdvanceItemInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static AdvanceItemInfo Deserialize(byte[] buffer)
        {
            var instance = new AdvanceItemInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.AdvanceItemInfo Deserialize(byte[] buffer, global::cs.AdvanceItemInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.AdvanceItemInfo Deserialize(Stream stream, global::cs.AdvanceItemInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.AdvancePlace = (global::cs.EnmAdvancePlaceType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ItemNo = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.AdvanceItemInfo DeserializeLengthDelimited(Stream stream, global::cs.AdvanceItemInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.AdvancePlace = (global::cs.EnmAdvancePlaceType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ItemNo = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.AdvanceItemInfo DeserializeLength(Stream stream, int length, global::cs.AdvanceItemInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.AdvancePlace = (global::cs.EnmAdvancePlaceType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ItemNo = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, AdvanceItemInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.AdvancePlace);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ItemNo);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(AdvanceItemInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, AdvanceItemInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class OneSkillData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillData Deserialize(Stream stream)
        {
            var instance = new OneSkillData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillData DeserializeLengthDelimited(Stream stream)
        {
            var instance = new OneSkillData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillData DeserializeLength(Stream stream, int length)
        {
            var instance = new OneSkillData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static OneSkillData Deserialize(byte[] buffer)
        {
            var instance = new OneSkillData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.OneSkillData Deserialize(byte[] buffer, global::cs.OneSkillData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillData Deserialize(Stream stream, global::cs.OneSkillData instance)
        {
            if (instance.CanYeInfo == null)
                instance.CanYeInfo = new List<global::cs.AdvanceItemInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SkillID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SkillLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.AdvanceType = (global::cs.EnmSkillAdvanceType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AdvanceLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        global::cs.AdvanceItemInfo CanYeInfoElement = instance.GetFreeCanYeInfoElement();
                        instance.CanYeInfo.Add(global::cs.AdvanceItemInfo.DeserializeLengthDelimited(stream, CanYeInfoElement));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.iActivateBit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillData DeserializeLengthDelimited(Stream stream, global::cs.OneSkillData instance)
        {
            if (instance.CanYeInfo == null)
                instance.CanYeInfo = new List<global::cs.AdvanceItemInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SkillID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SkillLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.AdvanceType = (global::cs.EnmSkillAdvanceType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AdvanceLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        global::cs.AdvanceItemInfo CanYeInfoElement = instance.GetFreeCanYeInfoElement();
                        instance.CanYeInfo.Add(global::cs.AdvanceItemInfo.DeserializeLengthDelimited(stream, CanYeInfoElement));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.iActivateBit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillData DeserializeLength(Stream stream, int length, global::cs.OneSkillData instance)
        {
            if (instance.CanYeInfo == null)
                instance.CanYeInfo = new List<global::cs.AdvanceItemInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SkillID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SkillLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.AdvanceType = (global::cs.EnmSkillAdvanceType)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AdvanceLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        global::cs.AdvanceItemInfo CanYeInfoElement = instance.GetFreeCanYeInfoElement();
                        instance.CanYeInfo.Add(global::cs.AdvanceItemInfo.DeserializeLengthDelimited(stream, CanYeInfoElement));
                        continue;
                    // Field 6 Varint
                    case 48:
                        instance.iActivateBit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, OneSkillData instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SkillID);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SkillLevel);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.AdvanceType);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.AdvanceLevel);
            if (instance.CanYeInfo != null)
            {
                foreach (var i5 in instance.CanYeInfo)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    ﻿msField.SetLength(0);
                    global::cs.AdvanceItemInfo.Serialize(msField, i5);
                    // Length delimited byte array
                    uint length5 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                    msField.WriteTo(stream);

                }
            }
            // Key for field: 6, Varint
            stream.WriteByte(48);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iActivateBit);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(OneSkillData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, OneSkillData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class OneSkillTipsData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillTipsData Deserialize(Stream stream)
        {
            var instance = new OneSkillTipsData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillTipsData DeserializeLengthDelimited(Stream stream)
        {
            var instance = new OneSkillTipsData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillTipsData DeserializeLength(Stream stream, int length)
        {
            var instance = new OneSkillTipsData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static OneSkillTipsData Deserialize(byte[] buffer)
        {
            var instance = new OneSkillTipsData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.OneSkillTipsData Deserialize(byte[] buffer, global::cs.OneSkillTipsData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillTipsData Deserialize(Stream stream, global::cs.OneSkillTipsData instance)
        {
            if (instance.TipsSkillInfo == null)
                instance.TipsSkillInfo = new List<global::cs.OneSkillData>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TipsID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneSkillData TipsSkillInfoElement = instance.GetFreeTipsSkillInfoElement();
                        instance.TipsSkillInfo.Add(global::cs.OneSkillData.DeserializeLengthDelimited(stream, TipsSkillInfoElement));
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SpecialTipsBit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillTipsData DeserializeLengthDelimited(Stream stream, global::cs.OneSkillTipsData instance)
        {
            if (instance.TipsSkillInfo == null)
                instance.TipsSkillInfo = new List<global::cs.OneSkillData>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TipsID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneSkillData TipsSkillInfoElement = instance.GetFreeTipsSkillInfoElement();
                        instance.TipsSkillInfo.Add(global::cs.OneSkillData.DeserializeLengthDelimited(stream, TipsSkillInfoElement));
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SpecialTipsBit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillTipsData DeserializeLength(Stream stream, int length, global::cs.OneSkillTipsData instance)
        {
            if (instance.TipsSkillInfo == null)
                instance.TipsSkillInfo = new List<global::cs.OneSkillData>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.TipsID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneSkillData TipsSkillInfoElement = instance.GetFreeTipsSkillInfoElement();
                        instance.TipsSkillInfo.Add(global::cs.OneSkillData.DeserializeLengthDelimited(stream, TipsSkillInfoElement));
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SpecialTipsBit = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, OneSkillTipsData instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.TipsID);
            if (instance.TipsSkillInfo != null)
            {
                foreach (var i2 in instance.TipsSkillInfo)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::cs.OneSkillData.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SpecialTipsBit);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(OneSkillTipsData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, OneSkillTipsData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class OneButtonSlotInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneButtonSlotInfo Deserialize(Stream stream)
        {
            var instance = new OneButtonSlotInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneButtonSlotInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new OneButtonSlotInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneButtonSlotInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new OneButtonSlotInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static OneButtonSlotInfo Deserialize(byte[] buffer)
        {
            var instance = new OneButtonSlotInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.OneButtonSlotInfo Deserialize(byte[] buffer, global::cs.OneButtonSlotInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.OneButtonSlotInfo Deserialize(Stream stream, global::cs.OneButtonSlotInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ButtonSlotType = (global::cs.EnmSkillButtonSlot)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.TipsID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SkillID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneButtonSlotInfo DeserializeLengthDelimited(Stream stream, global::cs.OneButtonSlotInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ButtonSlotType = (global::cs.EnmSkillButtonSlot)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.TipsID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SkillID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneButtonSlotInfo DeserializeLength(Stream stream, int length, global::cs.OneButtonSlotInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ButtonSlotType = (global::cs.EnmSkillButtonSlot)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.TipsID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SkillID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, OneButtonSlotInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ButtonSlotType);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.TipsID);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SkillID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(OneButtonSlotInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, OneButtonSlotInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class OneSkillButtonData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillButtonData Deserialize(Stream stream)
        {
            var instance = new OneSkillButtonData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillButtonData DeserializeLengthDelimited(Stream stream)
        {
            var instance = new OneSkillButtonData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneSkillButtonData DeserializeLength(Stream stream, int length)
        {
            var instance = new OneSkillButtonData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static OneSkillButtonData Deserialize(byte[] buffer)
        {
            var instance = new OneSkillButtonData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.OneSkillButtonData Deserialize(byte[] buffer, global::cs.OneSkillButtonData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillButtonData Deserialize(Stream stream, global::cs.OneSkillButtonData instance)
        {
            if (instance.AllSlotSkillInfo == null)
                instance.AllSlotSkillInfo = new List<global::cs.OneButtonSlotInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SkillType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ButtonType = (global::cs.EnmSkillButton)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.OneButtonSlotInfo AllSlotSkillInfoElement = instance.GetFreeAllSlotSkillInfoElement();
                        instance.AllSlotSkillInfo.Add(global::cs.OneButtonSlotInfo.DeserializeLengthDelimited(stream, AllSlotSkillInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillButtonData DeserializeLengthDelimited(Stream stream, global::cs.OneSkillButtonData instance)
        {
            if (instance.AllSlotSkillInfo == null)
                instance.AllSlotSkillInfo = new List<global::cs.OneButtonSlotInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SkillType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ButtonType = (global::cs.EnmSkillButton)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.OneButtonSlotInfo AllSlotSkillInfoElement = instance.GetFreeAllSlotSkillInfoElement();
                        instance.AllSlotSkillInfo.Add(global::cs.OneButtonSlotInfo.DeserializeLengthDelimited(stream, AllSlotSkillInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneSkillButtonData DeserializeLength(Stream stream, int length, global::cs.OneSkillButtonData instance)
        {
            if (instance.AllSlotSkillInfo == null)
                instance.AllSlotSkillInfo = new List<global::cs.OneButtonSlotInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SkillType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ButtonType = (global::cs.EnmSkillButton)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.OneButtonSlotInfo AllSlotSkillInfoElement = instance.GetFreeAllSlotSkillInfoElement();
                        instance.AllSlotSkillInfo.Add(global::cs.OneButtonSlotInfo.DeserializeLengthDelimited(stream, AllSlotSkillInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, OneSkillButtonData instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.SkillType);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ButtonType);
            if (instance.AllSlotSkillInfo != null)
            {
                foreach (var i3 in instance.AllSlotSkillInfo)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿msField.SetLength(0);
                    global::cs.OneButtonSlotInfo.Serialize(msField, i3);
                    // Length delimited byte array
                    uint length3 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(OneSkillButtonData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, OneSkillButtonData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class OneWeaponButtonData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneWeaponButtonData Deserialize(Stream stream)
        {
            var instance = new OneWeaponButtonData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneWeaponButtonData DeserializeLengthDelimited(Stream stream)
        {
            var instance = new OneWeaponButtonData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OneWeaponButtonData DeserializeLength(Stream stream, int length)
        {
            var instance = new OneWeaponButtonData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static OneWeaponButtonData Deserialize(byte[] buffer)
        {
            var instance = new OneWeaponButtonData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.OneWeaponButtonData Deserialize(byte[] buffer, global::cs.OneWeaponButtonData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.OneWeaponButtonData Deserialize(Stream stream, global::cs.OneWeaponButtonData instance)
        {
            if (instance.AllWeaponButtonInfo == null)
                instance.AllWeaponButtonInfo = new List<global::cs.OneSkillButtonData>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.WeaponType = (global::cs.EnmWeaponTypeID)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneSkillButtonData AllWeaponButtonInfoElement = instance.GetFreeAllWeaponButtonInfoElement();
                        instance.AllWeaponButtonInfo.Add(global::cs.OneSkillButtonData.DeserializeLengthDelimited(stream, AllWeaponButtonInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneWeaponButtonData DeserializeLengthDelimited(Stream stream, global::cs.OneWeaponButtonData instance)
        {
            if (instance.AllWeaponButtonInfo == null)
                instance.AllWeaponButtonInfo = new List<global::cs.OneSkillButtonData>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.WeaponType = (global::cs.EnmWeaponTypeID)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneSkillButtonData AllWeaponButtonInfoElement = instance.GetFreeAllWeaponButtonInfoElement();
                        instance.AllWeaponButtonInfo.Add(global::cs.OneSkillButtonData.DeserializeLengthDelimited(stream, AllWeaponButtonInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OneWeaponButtonData DeserializeLength(Stream stream, int length, global::cs.OneWeaponButtonData instance)
        {
            if (instance.AllWeaponButtonInfo == null)
                instance.AllWeaponButtonInfo = new List<global::cs.OneSkillButtonData>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.WeaponType = (global::cs.EnmWeaponTypeID)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneSkillButtonData AllWeaponButtonInfoElement = instance.GetFreeAllWeaponButtonInfoElement();
                        instance.AllWeaponButtonInfo.Add(global::cs.OneSkillButtonData.DeserializeLengthDelimited(stream, AllWeaponButtonInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, OneWeaponButtonData instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.WeaponType);
            if (instance.AllWeaponButtonInfo != null)
            {
                foreach (var i2 in instance.AllWeaponButtonInfo)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::cs.OneSkillButtonData.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(OneWeaponButtonData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, OneWeaponButtonData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class SkillRoleInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SkillRoleInfo Deserialize(Stream stream)
        {
            var instance = new SkillRoleInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SkillRoleInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new SkillRoleInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SkillRoleInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new SkillRoleInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SkillRoleInfo Deserialize(byte[] buffer)
        {
            var instance = new SkillRoleInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.SkillRoleInfo Deserialize(byte[] buffer, global::cs.SkillRoleInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.SkillRoleInfo Deserialize(Stream stream, global::cs.SkillRoleInfo instance)
        {
            if (instance.AllSkillTipsInfo == null)
                instance.AllSkillTipsInfo = new List<global::cs.OneSkillTipsData>();
            if (instance.AllWeaponButtonInfo == null)
                instance.AllWeaponButtonInfo = new List<global::cs.OneWeaponButtonData>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.OneSkillTipsData AllSkillTipsInfoElement = instance.GetFreeAllSkillTipsInfoElement();
                        instance.AllSkillTipsInfo.Add(global::cs.OneSkillTipsData.DeserializeLengthDelimited(stream, AllSkillTipsInfoElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneWeaponButtonData AllWeaponButtonInfoElement = instance.GetFreeAllWeaponButtonInfoElement();
                        instance.AllWeaponButtonInfo.Add(global::cs.OneWeaponButtonData.DeserializeLengthDelimited(stream, AllWeaponButtonInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SkillRoleInfo DeserializeLengthDelimited(Stream stream, global::cs.SkillRoleInfo instance)
        {
            if (instance.AllSkillTipsInfo == null)
                instance.AllSkillTipsInfo = new List<global::cs.OneSkillTipsData>();
            if (instance.AllWeaponButtonInfo == null)
                instance.AllWeaponButtonInfo = new List<global::cs.OneWeaponButtonData>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.OneSkillTipsData AllSkillTipsInfoElement = instance.GetFreeAllSkillTipsInfoElement();
                        instance.AllSkillTipsInfo.Add(global::cs.OneSkillTipsData.DeserializeLengthDelimited(stream, AllSkillTipsInfoElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneWeaponButtonData AllWeaponButtonInfoElement = instance.GetFreeAllWeaponButtonInfoElement();
                        instance.AllWeaponButtonInfo.Add(global::cs.OneWeaponButtonData.DeserializeLengthDelimited(stream, AllWeaponButtonInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SkillRoleInfo DeserializeLength(Stream stream, int length, global::cs.SkillRoleInfo instance)
        {
            if (instance.AllSkillTipsInfo == null)
                instance.AllSkillTipsInfo = new List<global::cs.OneSkillTipsData>();
            if (instance.AllWeaponButtonInfo == null)
                instance.AllWeaponButtonInfo = new List<global::cs.OneWeaponButtonData>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.OneSkillTipsData AllSkillTipsInfoElement = instance.GetFreeAllSkillTipsInfoElement();
                        instance.AllSkillTipsInfo.Add(global::cs.OneSkillTipsData.DeserializeLengthDelimited(stream, AllSkillTipsInfoElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.OneWeaponButtonData AllWeaponButtonInfoElement = instance.GetFreeAllWeaponButtonInfoElement();
                        instance.AllWeaponButtonInfo.Add(global::cs.OneWeaponButtonData.DeserializeLengthDelimited(stream, AllWeaponButtonInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SkillRoleInfo instance)
        {
            var msField = stack.Pop();
            if (instance.AllSkillTipsInfo != null)
            {
                foreach (var i1 in instance.AllSkillTipsInfo)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.OneSkillTipsData.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
            if (instance.AllWeaponButtonInfo != null)
            {
                foreach (var i2 in instance.AllWeaponButtonInfo)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::cs.OneWeaponButtonData.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SkillRoleInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SkillRoleInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class Triple
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Triple Deserialize(Stream stream)
        {
            var instance = new Triple();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Triple DeserializeLengthDelimited(Stream stream)
        {
            var instance = new Triple();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Triple DeserializeLength(Stream stream, int length)
        {
            var instance = new Triple();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Triple Deserialize(byte[] buffer)
        {
            var instance = new Triple();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.Triple Deserialize(byte[] buffer, global::cs.Triple instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.Triple Deserialize(Stream stream, global::cs.Triple instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.x = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.y = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.z = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.Triple DeserializeLengthDelimited(Stream stream, global::cs.Triple instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.x = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.y = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.z = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.Triple DeserializeLength(Stream stream, int length, global::cs.Triple instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.x = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.y = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.z = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadZInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Triple instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteZInt32(stream, instance.x);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteZInt32(stream, instance.y);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteZInt32(stream, instance.z);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Triple instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Triple instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class HeroEnterViewInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static HeroEnterViewInfo Deserialize(Stream stream)
        {
            var instance = new HeroEnterViewInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static HeroEnterViewInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new HeroEnterViewInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static HeroEnterViewInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new HeroEnterViewInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static HeroEnterViewInfo Deserialize(byte[] buffer)
        {
            var instance = new HeroEnterViewInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.HeroEnterViewInfo Deserialize(byte[] buffer, global::cs.HeroEnterViewInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.HeroEnterViewInfo Deserialize(Stream stream, global::cs.HeroEnterViewInfo instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            if (instance.Buff == null)
                instance.Buff = new List<global::cs.SingleBuffInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Speed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.OtherView == null)
                            instance.OtherView = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.OtherView);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        // repeated
                        global::cs.SingleBuffInfo BuffElement = instance.GetFreeBuffElement();
                        instance.Buff.Add(global::cs.SingleBuffInfo.DeserializeLengthDelimited(stream, BuffElement));
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.HeroEnterViewInfo DeserializeLengthDelimited(Stream stream, global::cs.HeroEnterViewInfo instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            if (instance.Buff == null)
                instance.Buff = new List<global::cs.SingleBuffInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Speed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.OtherView == null)
                            instance.OtherView = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.OtherView);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        // repeated
                        global::cs.SingleBuffInfo BuffElement = instance.GetFreeBuffElement();
                        instance.Buff.Add(global::cs.SingleBuffInfo.DeserializeLengthDelimited(stream, BuffElement));
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.HeroEnterViewInfo DeserializeLength(Stream stream, int length, global::cs.HeroEnterViewInfo instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            if (instance.Buff == null)
                instance.Buff = new List<global::cs.SingleBuffInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Speed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.OtherView == null)
                            instance.OtherView = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.OtherView);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        // repeated
                        global::cs.SingleBuffInfo BuffElement = instance.GetFreeBuffElement();
                        instance.Buff.Add(global::cs.SingleBuffInfo.DeserializeLengthDelimited(stream, BuffElement));
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, HeroEnterViewInfo instance)
        {
            var msField = stack.Pop();
            if (instance.RoleID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.RoleID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.Direct == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Direct is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Direct);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            msField.WriteTo(stream);

            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Speed);
            if (instance.RoleName == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleName is required by the proto specification.");
            // Key for field: 5, LengthDelimited
            stream.WriteByte(42);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.RoleName));
            if (instance.AttrList != null)
            {
                foreach (var i6 in instance.AttrList)
                {
                    // Key for field: 6, LengthDelimited
                    stream.WriteByte(50);
                    ﻿msField.SetLength(0);
                    global::cs.AttrData.Serialize(msField, i6);
                    // Length delimited byte array
                    uint length6 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length6);
                    msField.WriteTo(stream);

                }
            }
            if (instance.OtherView == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("OtherView is required by the proto specification.");
            // Key for field: 7, LengthDelimited
            stream.WriteByte(58);
            ﻿msField.SetLength(0);
            global::cs.ViewOtherInfo.Serialize(msField, instance.OtherView);
            // Length delimited byte array
            uint length7 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length7);
            msField.WriteTo(stream);

            if (instance.Buff != null)
            {
                foreach (var i8 in instance.Buff)
                {
                    // Key for field: 8, LengthDelimited
                    stream.WriteByte(66);
                    ﻿msField.SetLength(0);
                    global::cs.SingleBuffInfo.Serialize(msField, i8);
                    // Length delimited byte array
                    uint length8 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length8);
                    msField.WriteTo(stream);

                }
            }
            if (instance.FactionID != null)
            {
                // Key for field: 9, LengthDelimited
                stream.WriteByte(74);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.FactionID);
                // Length delimited byte array
                uint length9 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length9);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(HeroEnterViewInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, HeroEnterViewInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class NpcEnterViewInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NpcEnterViewInfo Deserialize(Stream stream)
        {
            var instance = new NpcEnterViewInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NpcEnterViewInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new NpcEnterViewInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static NpcEnterViewInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new NpcEnterViewInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static NpcEnterViewInfo Deserialize(byte[] buffer)
        {
            var instance = new NpcEnterViewInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.NpcEnterViewInfo Deserialize(byte[] buffer, global::cs.NpcEnterViewInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.NpcEnterViewInfo Deserialize(Stream stream, global::cs.NpcEnterViewInfo instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            if (instance.Buff == null)
                instance.Buff = new List<global::cs.SingleBuffInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NpcID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Speed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.Scale == null)
                            instance.Scale = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Scale);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.MasterID == null)
                            instance.MasterID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.MasterID);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.DoSkillUserID == null)
                            instance.DoSkillUserID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.DoSkillUserID);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        // repeated
                        global::cs.SingleBuffInfo BuffElement = instance.GetFreeBuffElement();
                        instance.Buff.Add(global::cs.SingleBuffInfo.DeserializeLengthDelimited(stream, BuffElement));
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.IsBirth = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.NpcEnterViewInfo DeserializeLengthDelimited(Stream stream, global::cs.NpcEnterViewInfo instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            if (instance.Buff == null)
                instance.Buff = new List<global::cs.SingleBuffInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NpcID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Speed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.Scale == null)
                            instance.Scale = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Scale);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.MasterID == null)
                            instance.MasterID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.MasterID);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.DoSkillUserID == null)
                            instance.DoSkillUserID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.DoSkillUserID);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        // repeated
                        global::cs.SingleBuffInfo BuffElement = instance.GetFreeBuffElement();
                        instance.Buff.Add(global::cs.SingleBuffInfo.DeserializeLengthDelimited(stream, BuffElement));
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.IsBirth = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.NpcEnterViewInfo DeserializeLength(Stream stream, int length, global::cs.NpcEnterViewInfo instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            if (instance.Buff == null)
                instance.Buff = new List<global::cs.SingleBuffInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.NpcID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.Speed = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.Scale == null)
                            instance.Scale = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Scale);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.MasterID == null)
                            instance.MasterID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.MasterID);
                        continue;
                    // Field 9 LengthDelimited
                    case 74:
                        if (instance.DoSkillUserID == null)
                            instance.DoSkillUserID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.DoSkillUserID);
                        continue;
                    // Field 10 LengthDelimited
                    case 82:
                        // repeated
                        global::cs.SingleBuffInfo BuffElement = instance.GetFreeBuffElement();
                        instance.Buff.Add(global::cs.SingleBuffInfo.DeserializeLengthDelimited(stream, BuffElement));
                        continue;
                    // Field 11 Varint
                    case 88:
                        instance.IsBirth = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, NpcEnterViewInfo instance)
        {
            var msField = stack.Pop();
            if (instance.ActorID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ActorID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.ActorID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.NpcID);
            if (instance.Direct == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Direct is required by the proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Direct);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            msField.WriteTo(stream);

            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 4, LengthDelimited
            stream.WriteByte(34);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length4 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
            msField.WriteTo(stream);

            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Speed);
            if (instance.AttrList != null)
            {
                foreach (var i6 in instance.AttrList)
                {
                    // Key for field: 6, LengthDelimited
                    stream.WriteByte(50);
                    ﻿msField.SetLength(0);
                    global::cs.AttrData.Serialize(msField, i6);
                    // Length delimited byte array
                    uint length6 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length6);
                    msField.WriteTo(stream);

                }
            }
            if (instance.Scale != null)
            {
                // Key for field: 7, LengthDelimited
                stream.WriteByte(58);
                ﻿msField.SetLength(0);
                global::cs.Triple.Serialize(msField, instance.Scale);
                // Length delimited byte array
                uint length7 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length7);
                msField.WriteTo(stream);

            }
            if (instance.MasterID != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.MasterID);
                // Length delimited byte array
                uint length8 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length8);
                msField.WriteTo(stream);

            }
            if (instance.DoSkillUserID != null)
            {
                // Key for field: 9, LengthDelimited
                stream.WriteByte(74);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.DoSkillUserID);
                // Length delimited byte array
                uint length9 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length9);
                msField.WriteTo(stream);

            }
            if (instance.Buff != null)
            {
                foreach (var i10 in instance.Buff)
                {
                    // Key for field: 10, LengthDelimited
                    stream.WriteByte(82);
                    ﻿msField.SetLength(0);
                    global::cs.SingleBuffInfo.Serialize(msField, i10);
                    // Length delimited byte array
                    uint length10 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length10);
                    msField.WriteTo(stream);

                }
            }
            // Key for field: 11, Varint
            stream.WriteByte(88);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.IsBirth);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(NpcEnterViewInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, NpcEnterViewInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class SelectGoods
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SelectGoods Deserialize(Stream stream)
        {
            var instance = new SelectGoods();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SelectGoods DeserializeLengthDelimited(Stream stream)
        {
            var instance = new SelectGoods();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SelectGoods DeserializeLength(Stream stream, int length)
        {
            var instance = new SelectGoods();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SelectGoods Deserialize(byte[] buffer)
        {
            var instance = new SelectGoods();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.SelectGoods Deserialize(byte[] buffer, global::cs.SelectGoods instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.SelectGoods Deserialize(Stream stream, global::cs.SelectGoods instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ItemNo = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SelectGoods DeserializeLengthDelimited(Stream stream, global::cs.SelectGoods instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ItemNo = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SelectGoods DeserializeLength(Stream stream, int length, global::cs.SelectGoods instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.ItemNo = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.Num = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SelectGoods instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.ItemNo);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Num);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SelectGoods instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SelectGoods instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CampAttr
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CampAttr Deserialize(Stream stream)
        {
            var instance = new CampAttr();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CampAttr DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CampAttr();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CampAttr DeserializeLength(Stream stream, int length)
        {
            var instance = new CampAttr();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CampAttr Deserialize(byte[] buffer)
        {
            var instance = new CampAttr();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CampAttr Deserialize(byte[] buffer, global::cs.CampAttr instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CampAttr Deserialize(Stream stream, global::cs.CampAttr instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.iKey = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.iValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CampAttr DeserializeLengthDelimited(Stream stream, global::cs.CampAttr instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.iKey = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.iValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CampAttr DeserializeLength(Stream stream, int length, global::cs.CampAttr instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.iKey = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.iValue = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CampAttr instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iKey);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.iValue);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CampAttr instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CampAttr instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class Appendix
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Appendix Deserialize(Stream stream)
        {
            var instance = new Appendix();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Appendix DeserializeLengthDelimited(Stream stream)
        {
            var instance = new Appendix();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Appendix DeserializeLength(Stream stream, int length)
        {
            var instance = new Appendix();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Appendix Deserialize(byte[] buffer)
        {
            var instance = new Appendix();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.Appendix Deserialize(byte[] buffer, global::cs.Appendix instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.Appendix Deserialize(Stream stream, global::cs.Appendix instance)
        {
            instance.PositionStrengLevel = 0;
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.EquipAppendix == null)
                            instance.EquipAppendix = global::cs.Equip.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Equip.DeserializeLengthDelimited(stream, instance.EquipAppendix);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.GoodAppendix == null)
                            instance.GoodAppendix = global::cs.Good.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Good.DeserializeLengthDelimited(stream, instance.GoodAppendix);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.PositionStrengLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.Appendix DeserializeLengthDelimited(Stream stream, global::cs.Appendix instance)
        {
            instance.PositionStrengLevel = 0;
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.EquipAppendix == null)
                            instance.EquipAppendix = global::cs.Equip.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Equip.DeserializeLengthDelimited(stream, instance.EquipAppendix);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.GoodAppendix == null)
                            instance.GoodAppendix = global::cs.Good.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Good.DeserializeLengthDelimited(stream, instance.GoodAppendix);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.PositionStrengLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.Appendix DeserializeLength(Stream stream, int length, global::cs.Appendix instance)
        {
            instance.PositionStrengLevel = 0;
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.EquipAppendix == null)
                            instance.EquipAppendix = global::cs.Equip.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Equip.DeserializeLengthDelimited(stream, instance.EquipAppendix);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.GoodAppendix == null)
                            instance.GoodAppendix = global::cs.Good.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Good.DeserializeLengthDelimited(stream, instance.GoodAppendix);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.PositionStrengLevel = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Appendix instance)
        {
            var msField = stack.Pop();
            if (instance.EquipAppendix != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                global::cs.Equip.Serialize(msField, instance.EquipAppendix);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                msField.WriteTo(stream);

            }
            if (instance.GoodAppendix != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                global::cs.Good.Serialize(msField, instance.GoodAppendix);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                msField.WriteTo(stream);

            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.PositionStrengLevel);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Appendix instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Appendix instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class ChatPlayerInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ChatPlayerInfo Deserialize(Stream stream)
        {
            var instance = new ChatPlayerInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ChatPlayerInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new ChatPlayerInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ChatPlayerInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new ChatPlayerInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ChatPlayerInfo Deserialize(byte[] buffer)
        {
            var instance = new ChatPlayerInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.ChatPlayerInfo Deserialize(byte[] buffer, global::cs.ChatPlayerInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.ChatPlayerInfo Deserialize(Stream stream, global::cs.ChatPlayerInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RoleID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.RoleGrade = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.WeaponType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ChatPlayerInfo DeserializeLengthDelimited(Stream stream, global::cs.ChatPlayerInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RoleID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.RoleGrade = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.WeaponType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ChatPlayerInfo DeserializeLength(Stream stream, int length, global::cs.ChatPlayerInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RoleID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.RoleGrade = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.WeaponType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ChatPlayerInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.RoleID);
            if (instance.RoleName == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleName is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.RoleName));
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RoleGrade);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.WeaponType);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ChatPlayerInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ChatPlayerInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class PlayerChatData
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerChatData Deserialize(Stream stream)
        {
            var instance = new PlayerChatData();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerChatData DeserializeLengthDelimited(Stream stream)
        {
            var instance = new PlayerChatData();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerChatData DeserializeLength(Stream stream, int length)
        {
            var instance = new PlayerChatData();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerChatData Deserialize(byte[] buffer)
        {
            var instance = new PlayerChatData();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.PlayerChatData Deserialize(byte[] buffer, global::cs.PlayerChatData instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerChatData Deserialize(Stream stream, global::cs.PlayerChatData instance)
        {
            if (instance.PlayerChatInfo == null)
                instance.PlayerChatInfo = new List<global::cs.PlayerChatData.ChatData>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.PlayerChatData.ChatData PlayerChatInfoElement = instance.GetFreePlayerChatInfoElement();
                        instance.PlayerChatInfo.Add(global::cs.PlayerChatData.ChatData.DeserializeLengthDelimited(stream, PlayerChatInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerChatData DeserializeLengthDelimited(Stream stream, global::cs.PlayerChatData instance)
        {
            if (instance.PlayerChatInfo == null)
                instance.PlayerChatInfo = new List<global::cs.PlayerChatData.ChatData>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.PlayerChatData.ChatData PlayerChatInfoElement = instance.GetFreePlayerChatInfoElement();
                        instance.PlayerChatInfo.Add(global::cs.PlayerChatData.ChatData.DeserializeLengthDelimited(stream, PlayerChatInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerChatData DeserializeLength(Stream stream, int length, global::cs.PlayerChatData instance)
        {
            if (instance.PlayerChatInfo == null)
                instance.PlayerChatInfo = new List<global::cs.PlayerChatData.ChatData>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.PlayerChatData.ChatData PlayerChatInfoElement = instance.GetFreePlayerChatInfoElement();
                        instance.PlayerChatInfo.Add(global::cs.PlayerChatData.ChatData.DeserializeLengthDelimited(stream, PlayerChatInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerChatData instance)
        {
            var msField = stack.Pop();
            if (instance.PlayerChatInfo != null)
            {
                foreach (var i1 in instance.PlayerChatInfo)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.PlayerChatData.ChatData.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerChatData instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerChatData instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public partial class ChatMsg
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ChatMsg Deserialize(Stream stream)
            {
                var instance = new ChatMsg();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ChatMsg DeserializeLengthDelimited(Stream stream)
            {
                var instance = new ChatMsg();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ChatMsg DeserializeLength(Stream stream, int length)
            {
                var instance = new ChatMsg();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static ChatMsg Deserialize(byte[] buffer)
            {
                var instance = new ChatMsg();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static global::cs.PlayerChatData.ChatMsg Deserialize(byte[] buffer, global::cs.PlayerChatData.ChatMsg instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static global::cs.PlayerChatData.ChatMsg Deserialize(Stream stream, global::cs.PlayerChatData.ChatMsg instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.ReceiveTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.ChatMessage = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static global::cs.PlayerChatData.ChatMsg DeserializeLengthDelimited(Stream stream, global::cs.PlayerChatData.ChatMsg instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.ReceiveTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.ChatMessage = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static global::cs.PlayerChatData.ChatMsg DeserializeLength(Stream stream, int length, global::cs.PlayerChatData.ChatMsg instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.ReceiveTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            instance.ChatMessage = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            [ThreadStatic]
            static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, ChatMsg instance)
            {
                var msField = stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.ReceiveTime);
                if (instance.ChatMessage != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.ChatMessage));
                }
                stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(ChatMsg instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, ChatMsg instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }


        public partial class ChatData
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ChatData Deserialize(Stream stream)
            {
                var instance = new ChatData();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ChatData DeserializeLengthDelimited(Stream stream)
            {
                var instance = new ChatData();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static ChatData DeserializeLength(Stream stream, int length)
            {
                var instance = new ChatData();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static ChatData Deserialize(byte[] buffer)
            {
                var instance = new ChatData();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static global::cs.PlayerChatData.ChatData Deserialize(byte[] buffer, global::cs.PlayerChatData.ChatData instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static global::cs.PlayerChatData.ChatData Deserialize(Stream stream, global::cs.PlayerChatData.ChatData instance)
            {
                if (instance.ChatContent == null)
                    instance.ChatContent = new List<global::cs.PlayerChatData.ChatMsg>();
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.BaseInfo == null)
                                instance.BaseInfo = global::cs.ChatPlayerInfo.DeserializeLengthDelimited(stream);
                            else
                                global::cs.ChatPlayerInfo.DeserializeLengthDelimited(stream, instance.BaseInfo);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            // repeated
                            global::cs.PlayerChatData.ChatMsg ChatContentElement = instance.GetFreeChatContentElement();
                            instance.ChatContent.Add(global::cs.PlayerChatData.ChatMsg.DeserializeLengthDelimited(stream, ChatContentElement));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static global::cs.PlayerChatData.ChatData DeserializeLengthDelimited(Stream stream, global::cs.PlayerChatData.ChatData instance)
            {
                if (instance.ChatContent == null)
                    instance.ChatContent = new List<global::cs.PlayerChatData.ChatMsg>();
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.BaseInfo == null)
                                instance.BaseInfo = global::cs.ChatPlayerInfo.DeserializeLengthDelimited(stream);
                            else
                                global::cs.ChatPlayerInfo.DeserializeLengthDelimited(stream, instance.BaseInfo);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            // repeated
                            global::cs.PlayerChatData.ChatMsg ChatContentElement = instance.GetFreeChatContentElement();
                            instance.ChatContent.Add(global::cs.PlayerChatData.ChatMsg.DeserializeLengthDelimited(stream, ChatContentElement));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static global::cs.PlayerChatData.ChatData DeserializeLength(Stream stream, int length, global::cs.PlayerChatData.ChatData instance)
            {
                if (instance.ChatContent == null)
                    instance.ChatContent = new List<global::cs.PlayerChatData.ChatMsg>();
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.BaseInfo == null)
                                instance.BaseInfo = global::cs.ChatPlayerInfo.DeserializeLengthDelimited(stream);
                            else
                                global::cs.ChatPlayerInfo.DeserializeLengthDelimited(stream, instance.BaseInfo);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            // repeated
                            global::cs.PlayerChatData.ChatMsg ChatContentElement = instance.GetFreeChatContentElement();
                            instance.ChatContent.Add(global::cs.PlayerChatData.ChatMsg.DeserializeLengthDelimited(stream, ChatContentElement));
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            [ThreadStatic]
            static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, ChatData instance)
            {
                var msField = stack.Pop();
                if (instance.BaseInfo != null)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.ChatPlayerInfo.Serialize(msField, instance.BaseInfo);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
                if (instance.ChatContent != null)
                {
                    foreach (var i2 in instance.ChatContent)
                    {
                        // Key for field: 2, LengthDelimited
                        stream.WriteByte(18);
                        ﻿msField.SetLength(0);
                        global::cs.PlayerChatData.ChatMsg.Serialize(msField, i2);
                        // Length delimited byte array
                        uint length2 = (uint)msField.Length;
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                        msField.WriteTo(stream);

                    }
                }
                stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(ChatData instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, ChatData instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }

    }

    public partial class SingleBuffInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SingleBuffInfo Deserialize(Stream stream)
        {
            var instance = new SingleBuffInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SingleBuffInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new SingleBuffInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SingleBuffInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new SingleBuffInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SingleBuffInfo Deserialize(byte[] buffer)
        {
            var instance = new SingleBuffInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.SingleBuffInfo Deserialize(byte[] buffer, global::cs.SingleBuffInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.SingleBuffInfo Deserialize(Stream stream, global::cs.SingleBuffInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.uiBuffID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uiLastTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.uiBuffLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SingleBuffInfo DeserializeLengthDelimited(Stream stream, global::cs.SingleBuffInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.uiBuffID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uiLastTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.uiBuffLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SingleBuffInfo DeserializeLength(Stream stream, int length, global::cs.SingleBuffInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.uiBuffID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uiLastTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.uiBuffLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SingleBuffInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.uiBuffID);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.uiLastTime);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.uiBuffLevel);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SingleBuffInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SingleBuffInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class SingleOutWardInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SingleOutWardInfo Deserialize(Stream stream)
        {
            var instance = new SingleOutWardInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SingleOutWardInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new SingleOutWardInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static SingleOutWardInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new SingleOutWardInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static SingleOutWardInfo Deserialize(byte[] buffer)
        {
            var instance = new SingleOutWardInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.SingleOutWardInfo Deserialize(byte[] buffer, global::cs.SingleOutWardInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.SingleOutWardInfo Deserialize(Stream stream, global::cs.SingleOutWardInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.OutWardPartType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.OutWardID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SingleOutWardInfo DeserializeLengthDelimited(Stream stream, global::cs.SingleOutWardInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.OutWardPartType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.OutWardID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.SingleOutWardInfo DeserializeLength(Stream stream, int length, global::cs.SingleOutWardInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.OutWardPartType = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.OutWardID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, SingleOutWardInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.OutWardPartType);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.OutWardID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(SingleOutWardInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, SingleOutWardInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class RideInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RideInfo Deserialize(Stream stream)
        {
            var instance = new RideInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RideInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new RideInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RideInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new RideInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static RideInfo Deserialize(byte[] buffer)
        {
            var instance = new RideInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.RideInfo Deserialize(byte[] buffer, global::cs.RideInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.RideInfo Deserialize(Stream stream, global::cs.RideInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RideID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ActionType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.RideInfo DeserializeLengthDelimited(Stream stream, global::cs.RideInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RideID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ActionType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.RideInfo DeserializeLength(Stream stream, int length, global::cs.RideInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RideID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.ActionType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, RideInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.RideID);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ActionType);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(RideInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, RideInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class ViewOtherInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ViewOtherInfo Deserialize(Stream stream)
        {
            var instance = new ViewOtherInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ViewOtherInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new ViewOtherInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ViewOtherInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new ViewOtherInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ViewOtherInfo Deserialize(byte[] buffer)
        {
            var instance = new ViewOtherInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.ViewOtherInfo Deserialize(byte[] buffer, global::cs.ViewOtherInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.ViewOtherInfo Deserialize(Stream stream, global::cs.ViewOtherInfo instance)
        {
            if (instance.OutWardInfo == null)
                instance.OutWardInfo = new List<global::cs.SingleOutWardInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.uiClothseID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uiWeaponID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.SingleOutWardInfo OutWardInfoElement = instance.GetFreeOutWardInfoElement();
                        instance.OutWardInfo.Add(global::cs.SingleOutWardInfo.DeserializeLengthDelimited(stream, OutWardInfoElement));
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.RideInfo == null)
                            instance.RideInfo = global::cs.RideInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.RideInfo.DeserializeLengthDelimited(stream, instance.RideInfo);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.PickState = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ViewOtherInfo DeserializeLengthDelimited(Stream stream, global::cs.ViewOtherInfo instance)
        {
            if (instance.OutWardInfo == null)
                instance.OutWardInfo = new List<global::cs.SingleOutWardInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.uiClothseID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uiWeaponID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.SingleOutWardInfo OutWardInfoElement = instance.GetFreeOutWardInfoElement();
                        instance.OutWardInfo.Add(global::cs.SingleOutWardInfo.DeserializeLengthDelimited(stream, OutWardInfoElement));
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.RideInfo == null)
                            instance.RideInfo = global::cs.RideInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.RideInfo.DeserializeLengthDelimited(stream, instance.RideInfo);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.PickState = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ViewOtherInfo DeserializeLength(Stream stream, int length, global::cs.ViewOtherInfo instance)
        {
            if (instance.OutWardInfo == null)
                instance.OutWardInfo = new List<global::cs.SingleOutWardInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.uiClothseID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.uiWeaponID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        global::cs.SingleOutWardInfo OutWardInfoElement = instance.GetFreeOutWardInfoElement();
                        instance.OutWardInfo.Add(global::cs.SingleOutWardInfo.DeserializeLengthDelimited(stream, OutWardInfoElement));
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.RideInfo == null)
                            instance.RideInfo = global::cs.RideInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.RideInfo.DeserializeLengthDelimited(stream, instance.RideInfo);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.PickState = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ViewOtherInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.uiClothseID);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.uiWeaponID);
            if (instance.OutWardInfo != null)
            {
                foreach (var i3 in instance.OutWardInfo)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    ﻿msField.SetLength(0);
                    global::cs.SingleOutWardInfo.Serialize(msField, i3);
                    // Length delimited byte array
                    uint length3 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                    msField.WriteTo(stream);

                }
            }
            if (instance.RideInfo != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                ﻿msField.SetLength(0);
                global::cs.RideInfo.Serialize(msField, instance.RideInfo);
                // Length delimited byte array
                uint length4 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                msField.WriteTo(stream);

            }
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PickState);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ViewOtherInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ViewOtherInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class ForgeMsg
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ForgeMsg Deserialize(Stream stream)
        {
            var instance = new ForgeMsg();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ForgeMsg DeserializeLengthDelimited(Stream stream)
        {
            var instance = new ForgeMsg();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ForgeMsg DeserializeLength(Stream stream, int length)
        {
            var instance = new ForgeMsg();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ForgeMsg Deserialize(byte[] buffer)
        {
            var instance = new ForgeMsg();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.ForgeMsg Deserialize(byte[] buffer, global::cs.ForgeMsg instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.ForgeMsg Deserialize(Stream stream, global::cs.ForgeMsg instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Rolename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MsgID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.EquipInfo == null)
                            instance.EquipInfo = global::cs.Equip.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Equip.DeserializeLengthDelimited(stream, instance.EquipInfo);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ForgeMsg DeserializeLengthDelimited(Stream stream, global::cs.ForgeMsg instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Rolename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MsgID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.EquipInfo == null)
                            instance.EquipInfo = global::cs.Equip.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Equip.DeserializeLengthDelimited(stream, instance.EquipInfo);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ForgeMsg DeserializeLength(Stream stream, int length, global::cs.ForgeMsg instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Rolename = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MsgID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.EquipInfo == null)
                            instance.EquipInfo = global::cs.Equip.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Equip.DeserializeLengthDelimited(stream, instance.EquipInfo);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ForgeMsg instance)
        {
            var msField = stack.Pop();
            if (instance.Rolename != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Rolename));
            }
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MsgID);
            if (instance.EquipInfo != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿msField.SetLength(0);
                global::cs.Equip.Serialize(msField, instance.EquipInfo);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ForgeMsg instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ForgeMsg instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSBroadForgeEquipNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSBroadForgeEquipNotify Deserialize(Stream stream)
        {
            var instance = new CSBroadForgeEquipNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSBroadForgeEquipNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSBroadForgeEquipNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSBroadForgeEquipNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSBroadForgeEquipNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSBroadForgeEquipNotify Deserialize(byte[] buffer)
        {
            var instance = new CSBroadForgeEquipNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSBroadForgeEquipNotify Deserialize(byte[] buffer, global::cs.CSBroadForgeEquipNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSBroadForgeEquipNotify Deserialize(Stream stream, global::cs.CSBroadForgeEquipNotify instance)
        {
            if (instance.MsgList == null)
                instance.MsgList = new List<global::cs.ForgeMsg>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.ForgeMsg MsgListElement = instance.GetFreeMsgListElement();
                        instance.MsgList.Add(global::cs.ForgeMsg.DeserializeLengthDelimited(stream, MsgListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSBroadForgeEquipNotify DeserializeLengthDelimited(Stream stream, global::cs.CSBroadForgeEquipNotify instance)
        {
            if (instance.MsgList == null)
                instance.MsgList = new List<global::cs.ForgeMsg>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.ForgeMsg MsgListElement = instance.GetFreeMsgListElement();
                        instance.MsgList.Add(global::cs.ForgeMsg.DeserializeLengthDelimited(stream, MsgListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSBroadForgeEquipNotify DeserializeLength(Stream stream, int length, global::cs.CSBroadForgeEquipNotify instance)
        {
            if (instance.MsgList == null)
                instance.MsgList = new List<global::cs.ForgeMsg>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.ForgeMsg MsgListElement = instance.GetFreeMsgListElement();
                        instance.MsgList.Add(global::cs.ForgeMsg.DeserializeLengthDelimited(stream, MsgListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSBroadForgeEquipNotify instance)
        {
            var msField = stack.Pop();
            if (instance.MsgList != null)
            {
                foreach (var i1 in instance.MsgList)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.ForgeMsg.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSBroadForgeEquipNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSBroadForgeEquipNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class RoleAttr
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RoleAttr Deserialize(Stream stream)
        {
            var instance = new RoleAttr();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RoleAttr DeserializeLengthDelimited(Stream stream)
        {
            var instance = new RoleAttr();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static RoleAttr DeserializeLength(Stream stream, int length)
        {
            var instance = new RoleAttr();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static RoleAttr Deserialize(byte[] buffer)
        {
            var instance = new RoleAttr();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.RoleAttr Deserialize(byte[] buffer, global::cs.RoleAttr instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.RoleAttr Deserialize(Stream stream, global::cs.RoleAttr instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.RoleAttr DeserializeLengthDelimited(Stream stream, global::cs.RoleAttr instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.RoleAttr DeserializeLength(Stream stream, int length, global::cs.RoleAttr instance)
        {
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, RoleAttr instance)
        {
            var msField = stack.Pop();
            if (instance.AttrList != null)
            {
                foreach (var i1 in instance.AttrList)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.AttrData.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(RoleAttr instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, RoleAttr instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSOSSLogReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSOSSLogReq Deserialize(Stream stream)
        {
            var instance = new CSOSSLogReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSOSSLogReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSOSSLogReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSOSSLogReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSOSSLogReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSOSSLogReq Deserialize(byte[] buffer)
        {
            var instance = new CSOSSLogReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSOSSLogReq Deserialize(byte[] buffer, global::cs.CSOSSLogReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSOSSLogReq Deserialize(Stream stream, global::cs.CSOSSLogReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.OSSLog = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSOSSLogReq DeserializeLengthDelimited(Stream stream, global::cs.CSOSSLogReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.OSSLog = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSOSSLogReq DeserializeLength(Stream stream, int length, global::cs.CSOSSLogReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.OSSLog = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBytes(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSOSSLogReq instance)
        {
            var msField = stack.Pop();
            if (instance.OSSLog == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("OSSLog is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, instance.OSSLog);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSOSSLogReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSOSSLogReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class ReviveLocID
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ReviveLocID Deserialize(Stream stream)
        {
            var instance = new ReviveLocID();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ReviveLocID DeserializeLengthDelimited(Stream stream)
        {
            var instance = new ReviveLocID();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static ReviveLocID DeserializeLength(Stream stream, int length)
        {
            var instance = new ReviveLocID();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static ReviveLocID Deserialize(byte[] buffer)
        {
            var instance = new ReviveLocID();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.ReviveLocID Deserialize(byte[] buffer, global::cs.ReviveLocID instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.ReviveLocID Deserialize(Stream stream, global::cs.ReviveLocID instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.LocID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ReviveLocID DeserializeLengthDelimited(Stream stream, global::cs.ReviveLocID instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.LocID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.ReviveLocID DeserializeLength(Stream stream, int length, global::cs.ReviveLocID instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.LocID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, ReviveLocID instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.LocID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(ReviveLocID instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, ReviveLocID instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class FightSoul
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FightSoul Deserialize(Stream stream)
        {
            var instance = new FightSoul();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FightSoul DeserializeLengthDelimited(Stream stream)
        {
            var instance = new FightSoul();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static FightSoul DeserializeLength(Stream stream, int length)
        {
            var instance = new FightSoul();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static FightSoul Deserialize(byte[] buffer)
        {
            var instance = new FightSoul();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.FightSoul Deserialize(byte[] buffer, global::cs.FightSoul instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.FightSoul Deserialize(Stream stream, global::cs.FightSoul instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SoulID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SoulGrade = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.FightSoul DeserializeLengthDelimited(Stream stream, global::cs.FightSoul instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SoulID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SoulGrade = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.FightSoul DeserializeLength(Stream stream, int length, global::cs.FightSoul instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.SoulID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.SoulGrade = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, FightSoul instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SoulID);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SoulGrade);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(FightSoul instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, FightSoul instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class OfflineExp
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OfflineExp Deserialize(Stream stream)
        {
            var instance = new OfflineExp();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OfflineExp DeserializeLengthDelimited(Stream stream)
        {
            var instance = new OfflineExp();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static OfflineExp DeserializeLength(Stream stream, int length)
        {
            var instance = new OfflineExp();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static OfflineExp Deserialize(byte[] buffer)
        {
            var instance = new OfflineExp();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.OfflineExp Deserialize(byte[] buffer, global::cs.OfflineExp instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.OfflineExp Deserialize(Stream stream, global::cs.OfflineExp instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.OfflineTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.FreeOfflineExp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SanQiuDanRate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.SanQiuDanPrice = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OfflineExp DeserializeLengthDelimited(Stream stream, global::cs.OfflineExp instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.OfflineTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.FreeOfflineExp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SanQiuDanRate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.SanQiuDanPrice = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.OfflineExp DeserializeLength(Stream stream, int length, global::cs.OfflineExp instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.OfflineTime = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.FreeOfflineExp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.SanQiuDanRate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.SanQiuDanPrice = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, OfflineExp instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.OfflineTime);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.FreeOfflineExp);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SanQiuDanRate);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.SanQiuDanPrice);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(OfflineExp instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, OfflineExp instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class PositionStrengthenInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PositionStrengthenInfo Deserialize(Stream stream)
        {
            var instance = new PositionStrengthenInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PositionStrengthenInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new PositionStrengthenInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PositionStrengthenInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new PositionStrengthenInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PositionStrengthenInfo Deserialize(byte[] buffer)
        {
            var instance = new PositionStrengthenInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.PositionStrengthenInfo Deserialize(byte[] buffer, global::cs.PositionStrengthenInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.PositionStrengthenInfo Deserialize(Stream stream, global::cs.PositionStrengthenInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.PositionID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.StrengLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ExtraAddRate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.PositionStrengthenInfo DeserializeLengthDelimited(Stream stream, global::cs.PositionStrengthenInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.PositionID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.StrengLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ExtraAddRate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.PositionStrengthenInfo DeserializeLength(Stream stream, int length, global::cs.PositionStrengthenInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.PositionID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.StrengLevel = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ExtraAddRate = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PositionStrengthenInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.PositionID);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.StrengLevel);
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.ExtraAddRate);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PositionStrengthenInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PositionStrengthenInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class PlayerFightInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerFightInfo Deserialize(Stream stream)
        {
            var instance = new PlayerFightInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerFightInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new PlayerFightInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerFightInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new PlayerFightInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerFightInfo Deserialize(byte[] buffer)
        {
            var instance = new PlayerFightInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.PlayerFightInfo Deserialize(byte[] buffer, global::cs.PlayerFightInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerFightInfo Deserialize(Stream stream, global::cs.PlayerFightInfo instance)
        {
            if (instance.EquipList == null)
                instance.EquipList = new List<global::cs.Equip>();
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Weapon = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Level = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.viewInfo == null)
                            instance.viewInfo = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.viewInfo);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.Equip EquipListElement = instance.GetFreeEquipListElement();
                        instance.EquipList.Add(global::cs.Equip.DeserializeLengthDelimited(stream, EquipListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.SkillData == null)
                            instance.SkillData = global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream, instance.SkillData);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerFightInfo DeserializeLengthDelimited(Stream stream, global::cs.PlayerFightInfo instance)
        {
            if (instance.EquipList == null)
                instance.EquipList = new List<global::cs.Equip>();
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Weapon = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Level = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.viewInfo == null)
                            instance.viewInfo = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.viewInfo);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.Equip EquipListElement = instance.GetFreeEquipListElement();
                        instance.EquipList.Add(global::cs.Equip.DeserializeLengthDelimited(stream, EquipListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.SkillData == null)
                            instance.SkillData = global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream, instance.SkillData);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.PlayerFightInfo DeserializeLength(Stream stream, int length, global::cs.PlayerFightInfo instance)
        {
            if (instance.EquipList == null)
                instance.EquipList = new List<global::cs.Equip>();
            if (instance.AttrList == null)
                instance.AttrList = new List<global::cs.AttrData>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.RoleID == null)
                            instance.RoleID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoleID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.RoleName = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.Weapon = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Level = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.viewInfo == null)
                            instance.viewInfo = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.viewInfo);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        global::cs.Equip EquipListElement = instance.GetFreeEquipListElement();
                        instance.EquipList.Add(global::cs.Equip.DeserializeLengthDelimited(stream, EquipListElement));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        if (instance.SkillData == null)
                            instance.SkillData = global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.SkillRoleInfo.DeserializeLengthDelimited(stream, instance.SkillData);
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        // repeated
                        global::cs.AttrData AttrListElement = instance.GetFreeAttrListElement();
                        instance.AttrList.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, AttrListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerFightInfo instance)
        {
            var msField = stack.Pop();
            if (instance.RoleID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.RoleID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.RoleName == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("RoleName is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.RoleName));
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Weapon);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.Level);
            if (instance.viewInfo != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                ﻿msField.SetLength(0);
                global::cs.ViewOtherInfo.Serialize(msField, instance.viewInfo);
                // Length delimited byte array
                uint length5 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                msField.WriteTo(stream);

            }
            if (instance.EquipList != null)
            {
                foreach (var i6 in instance.EquipList)
                {
                    // Key for field: 6, LengthDelimited
                    stream.WriteByte(50);
                    ﻿msField.SetLength(0);
                    global::cs.Equip.Serialize(msField, i6);
                    // Length delimited byte array
                    uint length6 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length6);
                    msField.WriteTo(stream);

                }
            }
            if (instance.SkillData != null)
            {
                // Key for field: 7, LengthDelimited
                stream.WriteByte(58);
                ﻿msField.SetLength(0);
                global::cs.SkillRoleInfo.Serialize(msField, instance.SkillData);
                // Length delimited byte array
                uint length7 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length7);
                msField.WriteTo(stream);

            }
            if (instance.AttrList != null)
            {
                foreach (var i8 in instance.AttrList)
                {
                    // Key for field: 8, LengthDelimited
                    stream.WriteByte(66);
                    ﻿msField.SetLength(0);
                    global::cs.AttrData.Serialize(msField, i8);
                    // Length delimited byte array
                    uint length8 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length8);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerFightInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerFightInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

}
