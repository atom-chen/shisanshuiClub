// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace cs
{
    /// <summary>怪物位置信息</summary>
    public partial class MonsterPosInfo
    {
        public MonsterPosInfo()
        {
            Clear();
        }
        /// <summary>配置ID</summary>
        public uint ConfigID { get; set; }

        /// <summary>位置</summary>
        public global::cs.Triple Pos { get; set; }

        /// <summary>朝向</summary>
        public global::cs.Triple Direct { get; set; }


        public void Clear()
        {
            ConfigID = 0;
            if (Pos != null)
            {
                Pos.Clear();
            }
            if (Direct != null)
            {
                Direct.Clear();
            }
        }
    }

    /// <summary>事件数据</summary>
    public partial class LevelEvent
    {
        public LevelEvent()
        {
            Clear();
        }
        /// <summary>事件ID</summary>
        public uint EventID { get; set; }

        /// <summary>事件怪物</summary>
        public uint MonsterID { get; set; }


        public void Clear()
        {
            EventID = 0;
            MonsterID = 0;
        }
    }

    /// <summary>关卡结算信息</summary>
    public partial class ClearAccountInfo
    {
        public ClearAccountInfo()
        {
            PickUpGoodsList = new List<global::cs.DropGoodInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for PickUpGoodsList</summary>
        public List<global::cs.DropGoodInfo> PickUpGoodsListCacheList = new List<global::cs.DropGoodInfo>(50);

        /// <summary>角色等级</summary>
        public uint RoleGrade { get; set; }

        /// <summary>当前关卡获得的经验</summary>
        public uint CurGetExp { get; set; }

        /// <summary>通关额外奖励信息</summary>
        public global::cs.ClearAccountInfo.RewardInfo ExtraRewardInfo { get; set; }

        /// <summary>副本里拾取的物品列表.目前只在多人副本里才填充</summary>
        public List<global::cs.DropGoodInfo> PickUpGoodsList { get; set; }

        /// <summary>通关特殊奖励信息</summary>
        public global::cs.ClearAccountInfo.RewardInfo SpecialRewardInfo { get; set; }


        public void Clear()
        {
            RoleGrade = 0;
            CurGetExp = 0;
            if (ExtraRewardInfo != null)
            {
                ExtraRewardInfo.Clear();
            }
            if (PickUpGoodsList != null)
            {
                for (int i = 0; i < PickUpGoodsList.Count;  ++i)
                {
                    PickUpGoodsList[i].Clear();
                    ReturnPickUpGoodsListElement(PickUpGoodsList[i]);
                }
                PickUpGoodsList.Clear();
            }
            if (SpecialRewardInfo != null)
            {
                SpecialRewardInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            PickUpGoodsListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                PickUpGoodsListCacheList.Add(new global::cs.DropGoodInfo());
            }
        }

        /// <summary>get a free element from PickUpGoodsListCacheList</summary>
        public global::cs.DropGoodInfo GetFreePickUpGoodsListElement()
        {
            global::cs.DropGoodInfo ret = null;
            if (PickUpGoodsListCacheList.Count > 0)
            {
                 ret = PickUpGoodsListCacheList[0];
                PickUpGoodsListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.DropGoodInfo();
            }
            return ret;
        }

        /// <summary>return a free element to PickUpGoodsListCacheList</summary>
        public void ReturnPickUpGoodsListElement(global::cs.DropGoodInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < PickUpGoodsListCacheList.Count;  ++i)
            {
                if (PickUpGoodsListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                PickUpGoodsListCacheList.Add(element);
            }
        }
        public partial class RewardInfo
        {
            public RewardInfo()
            {
                GoodsList = new List<global::cs.DropGoodInfo>();
                InitAllCacheList();
                Clear();
            }
            /// <summary>a cache list for GoodsList</summary>
            public List<global::cs.DropGoodInfo> GoodsListCacheList = new List<global::cs.DropGoodInfo>(50);

            /// <summary>经验</summary>
            public uint Exp { get; set; }

            /// <summary>金币数目</summary>
            public uint Gold { get; set; }

            /// <summary>物品列表</summary>
            public List<global::cs.DropGoodInfo> GoodsList { get; set; }


            public void Clear()
            {
                Exp = 0;
                Gold = 0;
                if (GoodsList != null)
                {
                    for (int i = 0; i < GoodsList.Count;  ++i)
                    {
                        GoodsList[i].Clear();
                        ReturnGoodsListElement(GoodsList[i]);
                    }
                    GoodsList.Clear();
                }
            }

            /// <summary>init all the cache lists</summary>
            public void InitAllCacheList()
            {
                GoodsListCacheList.Clear();
                for (int i = 0; i < 50; ++i)
                {
                    GoodsListCacheList.Add(new global::cs.DropGoodInfo());
                }
            }

            /// <summary>get a free element from GoodsListCacheList</summary>
            public global::cs.DropGoodInfo GetFreeGoodsListElement()
            {
                global::cs.DropGoodInfo ret = null;
                if (GoodsListCacheList.Count > 0)
                {
                     ret = GoodsListCacheList[0];
                    GoodsListCacheList.RemoveAt(0);
                }
                else
                {
                     ret = new global::cs.DropGoodInfo();
                }
                return ret;
            }

            /// <summary>return a free element to GoodsListCacheList</summary>
            public void ReturnGoodsListElement(global::cs.DropGoodInfo element)
            {
                bool alreadyInList = false;
                for (int i = 0; i < GoodsListCacheList.Count;  ++i)
                {
                    if (GoodsListCacheList[i] == element)
                    {
                        alreadyInList = true;
                        break;
                    }
                }
                if (!alreadyInList)
                {
                    element.Clear();
                    GoodsListCacheList.Add(element);
                }
            }
        }

    }

    /// <summary>被杀死的怪物信息</summary>
    public partial class KilledMonsterInfo
    {
        public KilledMonsterInfo()
        {
            IsSceneMonster = false;
            Clear();
        }
        /// <summary>怪物ID</summary>
        public uint MonsterID { get; set; }

        /// <summary>怪物数量</summary>
        public uint MonsterNum { get; set; }

        /// <summary>是否是场景怪</summary>
        public bool IsSceneMonster { get; set; }


        public void Clear()
        {
            MonsterID = 0;
            MonsterNum = 0;
        }
    }

    /// <summary>怪物经验信息</summary>
    public partial class MonsterExpInfo
    {
        public MonsterExpInfo()
        {
            Clear();
        }
        /// <summary> 怪物id</summary>
        public uint MonsterID { get; set; }

        /// <summary>掉落的经验数</summary>
        public uint DropExpValue { get; set; }


        public void Clear()
        {
            MonsterID = 0;
            DropExpValue = 0;
        }
    }

    /// <summary>物品掉落信息</summary>
    public partial class DropGoodInfo
    {
        public DropGoodInfo()
        {
            Clear();
        }
        /// <summary>掉落物品id</summary>
        public uint GoodID { get; set; }

        /// <summary>掉落物品数量</summary>
        public uint GoodNum { get; set; }

        /// <summary>怪物ID,任务相关</summary>
        public uint MonsterID { get; set; }

        /// <summary>掉落的位置</summary>
        public global::cs.Triple Pos { get; set; }


        public void Clear()
        {
            GoodID = 0;
            GoodNum = 0;
            MonsterID = 0;
            if (Pos != null)
            {
                Pos.Clear();
            }
        }
    }

    /// <summary>掉落信息列表</summary>
    public partial class DropGoodInfoList
    {
        public DropGoodInfoList()
        {
            DropGoodList = new List<global::cs.DropGoodInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for DropGoodList</summary>
        public List<global::cs.DropGoodInfo> DropGoodListCacheList = new List<global::cs.DropGoodInfo>(50);

        /// <summary>掉落类型</summary>
        public global::cs.Enum_Drop_Type DropType { get; set; }

        /// <summary>物品列表</summary>
        public List<global::cs.DropGoodInfo> DropGoodList { get; set; }


        public void Clear()
        {
            DropType = 0;
            if (DropGoodList != null)
            {
                for (int i = 0; i < DropGoodList.Count;  ++i)
                {
                    DropGoodList[i].Clear();
                    ReturnDropGoodListElement(DropGoodList[i]);
                }
                DropGoodList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            DropGoodListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                DropGoodListCacheList.Add(new global::cs.DropGoodInfo());
            }
        }

        /// <summary>get a free element from DropGoodListCacheList</summary>
        public global::cs.DropGoodInfo GetFreeDropGoodListElement()
        {
            global::cs.DropGoodInfo ret = null;
            if (DropGoodListCacheList.Count > 0)
            {
                 ret = DropGoodListCacheList[0];
                DropGoodListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.DropGoodInfo();
            }
            return ret;
        }

        /// <summary>return a free element to DropGoodListCacheList</summary>
        public void ReturnDropGoodListElement(global::cs.DropGoodInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < DropGoodListCacheList.Count;  ++i)
            {
                if (DropGoodListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                DropGoodListCacheList.Add(element);
            }
        }
    }

    /// <summary>普通关卡信息</summary>
    public partial class SingleOrdinaryLevelConfig
    {
        public SingleOrdinaryLevelConfig()
        {
            PreDropGoodInfoList = new List<global::cs.DropGoodInfoList>();
            MonsterExpInfoList = new List<global::cs.MonsterExpInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for PreDropGoodInfoList</summary>
        public List<global::cs.DropGoodInfoList> PreDropGoodInfoListCacheList = new List<global::cs.DropGoodInfoList>(50);

        /// <summary>a cache list for MonsterExpInfoList</summary>
        public List<global::cs.MonsterExpInfo> MonsterExpInfoListCacheList = new List<global::cs.MonsterExpInfo>(50);

        /// <summary>预掉落物品列表</summary>
        public List<global::cs.DropGoodInfoList> PreDropGoodInfoList { get; set; }

        /// <summary>怪物经验信息</summary>
        public List<global::cs.MonsterExpInfo> MonsterExpInfoList { get; set; }

        /// <summary>通缉令怪物</summary>
        public global::cs.MonsterPosInfo WantedMonsterInfo { get; set; }

        /// <summary>百宝团传送阵ID</summary>
        public uint TreasureTransferID { get; set; }


        public void Clear()
        {
            if (PreDropGoodInfoList != null)
            {
                for (int i = 0; i < PreDropGoodInfoList.Count;  ++i)
                {
                    PreDropGoodInfoList[i].Clear();
                    ReturnPreDropGoodInfoListElement(PreDropGoodInfoList[i]);
                }
                PreDropGoodInfoList.Clear();
            }
            if (MonsterExpInfoList != null)
            {
                for (int i = 0; i < MonsterExpInfoList.Count;  ++i)
                {
                    MonsterExpInfoList[i].Clear();
                    ReturnMonsterExpInfoListElement(MonsterExpInfoList[i]);
                }
                MonsterExpInfoList.Clear();
            }
            if (WantedMonsterInfo != null)
            {
                WantedMonsterInfo.Clear();
            }
            TreasureTransferID = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            PreDropGoodInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                PreDropGoodInfoListCacheList.Add(new global::cs.DropGoodInfoList());
            }
            MonsterExpInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                MonsterExpInfoListCacheList.Add(new global::cs.MonsterExpInfo());
            }
        }

        /// <summary>get a free element from PreDropGoodInfoListCacheList</summary>
        public global::cs.DropGoodInfoList GetFreePreDropGoodInfoListElement()
        {
            global::cs.DropGoodInfoList ret = null;
            if (PreDropGoodInfoListCacheList.Count > 0)
            {
                 ret = PreDropGoodInfoListCacheList[0];
                PreDropGoodInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.DropGoodInfoList();
            }
            return ret;
        }

        /// <summary>return a free element to PreDropGoodInfoListCacheList</summary>
        public void ReturnPreDropGoodInfoListElement(global::cs.DropGoodInfoList element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < PreDropGoodInfoListCacheList.Count;  ++i)
            {
                if (PreDropGoodInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                PreDropGoodInfoListCacheList.Add(element);
            }
        }

        /// <summary>get a free element from MonsterExpInfoListCacheList</summary>
        public global::cs.MonsterExpInfo GetFreeMonsterExpInfoListElement()
        {
            global::cs.MonsterExpInfo ret = null;
            if (MonsterExpInfoListCacheList.Count > 0)
            {
                 ret = MonsterExpInfoListCacheList[0];
                MonsterExpInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.MonsterExpInfo();
            }
            return ret;
        }

        /// <summary>return a free element to MonsterExpInfoListCacheList</summary>
        public void ReturnMonsterExpInfoListElement(global::cs.MonsterExpInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < MonsterExpInfoListCacheList.Count;  ++i)
            {
                if (MonsterExpInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                MonsterExpInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary>无尽模式关卡信息</summary>
    public partial class SingleEndlessLevelConfig
    {
        public SingleEndlessLevelConfig()
        {
            MonsterInfoList = new List<global::cs.SingleEndlessLevelConfig.MonsterInfo>();
            MonsterAttrAdditionInfo = new List<string>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for MonsterInfoList</summary>
        public List<global::cs.SingleEndlessLevelConfig.MonsterInfo> MonsterInfoListCacheList = new List<global::cs.SingleEndlessLevelConfig.MonsterInfo>(50);

        /// <summary>波数</summary>
        public uint WaveNum { get; set; }

        /// <summary>可挑战的总时间</summary>
        public uint WaveTimeInS { get; set; }

        /// <summary>累积剩余时间</summary>
        public uint RemainderTimeInS { get; set; }

        /// <summary>怪物信息</summary>
        public List<global::cs.SingleEndlessLevelConfig.MonsterInfo> MonsterInfoList { get; set; }

        /// <summary>怪物属性加成信息</summary>
        public List<string> MonsterAttrAdditionInfo { get; set; }


        public void Clear()
        {
            WaveNum = 0;
            WaveTimeInS = 0;
            RemainderTimeInS = 0;
            if (MonsterInfoList != null)
            {
                for (int i = 0; i < MonsterInfoList.Count;  ++i)
                {
                    MonsterInfoList[i].Clear();
                    ReturnMonsterInfoListElement(MonsterInfoList[i]);
                }
                MonsterInfoList.Clear();
            }
            if (MonsterAttrAdditionInfo != null)
            {
                MonsterAttrAdditionInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            MonsterInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                MonsterInfoListCacheList.Add(new global::cs.SingleEndlessLevelConfig.MonsterInfo());
            }
        }

        /// <summary>get a free element from MonsterInfoListCacheList</summary>
        public global::cs.SingleEndlessLevelConfig.MonsterInfo GetFreeMonsterInfoListElement()
        {
            global::cs.SingleEndlessLevelConfig.MonsterInfo ret = null;
            if (MonsterInfoListCacheList.Count > 0)
            {
                 ret = MonsterInfoListCacheList[0];
                MonsterInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SingleEndlessLevelConfig.MonsterInfo();
            }
            return ret;
        }

        /// <summary>return a free element to MonsterInfoListCacheList</summary>
        public void ReturnMonsterInfoListElement(global::cs.SingleEndlessLevelConfig.MonsterInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < MonsterInfoListCacheList.Count;  ++i)
            {
                if (MonsterInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                MonsterInfoListCacheList.Add(element);
            }
        }
        public partial class MonsterInfo
        {
            public MonsterInfo()
            {
                Clear();
            }
            /// <summary>怪物id</summary>
            public uint MonsterID { get; set; }


            public void Clear()
            {
                MonsterID = 0;
            }
        }

    }

    public partial class SingleExpLevelConfig
    {
        public SingleExpLevelConfig()
        {
            MonsterExpInfoList = new List<global::cs.MonsterExpInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for MonsterExpInfoList</summary>
        public List<global::cs.MonsterExpInfo> MonsterExpInfoListCacheList = new List<global::cs.MonsterExpInfo>(50);

        /// <summary>怪物经验信息</summary>
        public List<global::cs.MonsterExpInfo> MonsterExpInfoList { get; set; }


        public void Clear()
        {
            if (MonsterExpInfoList != null)
            {
                for (int i = 0; i < MonsterExpInfoList.Count;  ++i)
                {
                    MonsterExpInfoList[i].Clear();
                    ReturnMonsterExpInfoListElement(MonsterExpInfoList[i]);
                }
                MonsterExpInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            MonsterExpInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                MonsterExpInfoListCacheList.Add(new global::cs.MonsterExpInfo());
            }
        }

        /// <summary>get a free element from MonsterExpInfoListCacheList</summary>
        public global::cs.MonsterExpInfo GetFreeMonsterExpInfoListElement()
        {
            global::cs.MonsterExpInfo ret = null;
            if (MonsterExpInfoListCacheList.Count > 0)
            {
                 ret = MonsterExpInfoListCacheList[0];
                MonsterExpInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.MonsterExpInfo();
            }
            return ret;
        }

        /// <summary>return a free element to MonsterExpInfoListCacheList</summary>
        public void ReturnMonsterExpInfoListElement(global::cs.MonsterExpInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < MonsterExpInfoListCacheList.Count;  ++i)
            {
                if (MonsterExpInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                MonsterExpInfoListCacheList.Add(element);
            }
        }
    }

    public partial class JianghuTrialsConfig
    {
        public JianghuTrialsConfig()
        {
            TeamMateFightData = new List<global::cs.PlayerFightInfo>();
            EnemyFightData = new List<global::cs.PlayerFightInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for TeamMateFightData</summary>
        public List<global::cs.PlayerFightInfo> TeamMateFightDataCacheList = new List<global::cs.PlayerFightInfo>(50);

        /// <summary>a cache list for EnemyFightData</summary>
        public List<global::cs.PlayerFightInfo> EnemyFightDataCacheList = new List<global::cs.PlayerFightInfo>(50);

        /// <summary>队友的战斗数据</summary>
        public List<global::cs.PlayerFightInfo> TeamMateFightData { get; set; }

        /// <summary>敌人的战斗数据</summary>
        public List<global::cs.PlayerFightInfo> EnemyFightData { get; set; }


        public void Clear()
        {
            if (TeamMateFightData != null)
            {
                for (int i = 0; i < TeamMateFightData.Count;  ++i)
                {
                    TeamMateFightData[i].Clear();
                    ReturnTeamMateFightDataElement(TeamMateFightData[i]);
                }
                TeamMateFightData.Clear();
            }
            if (EnemyFightData != null)
            {
                for (int i = 0; i < EnemyFightData.Count;  ++i)
                {
                    EnemyFightData[i].Clear();
                    ReturnEnemyFightDataElement(EnemyFightData[i]);
                }
                EnemyFightData.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            TeamMateFightDataCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                TeamMateFightDataCacheList.Add(new global::cs.PlayerFightInfo());
            }
            EnemyFightDataCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                EnemyFightDataCacheList.Add(new global::cs.PlayerFightInfo());
            }
        }

        /// <summary>get a free element from TeamMateFightDataCacheList</summary>
        public global::cs.PlayerFightInfo GetFreeTeamMateFightDataElement()
        {
            global::cs.PlayerFightInfo ret = null;
            if (TeamMateFightDataCacheList.Count > 0)
            {
                 ret = TeamMateFightDataCacheList[0];
                TeamMateFightDataCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.PlayerFightInfo();
            }
            return ret;
        }

        /// <summary>return a free element to TeamMateFightDataCacheList</summary>
        public void ReturnTeamMateFightDataElement(global::cs.PlayerFightInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < TeamMateFightDataCacheList.Count;  ++i)
            {
                if (TeamMateFightDataCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                TeamMateFightDataCacheList.Add(element);
            }
        }

        /// <summary>get a free element from EnemyFightDataCacheList</summary>
        public global::cs.PlayerFightInfo GetFreeEnemyFightDataElement()
        {
            global::cs.PlayerFightInfo ret = null;
            if (EnemyFightDataCacheList.Count > 0)
            {
                 ret = EnemyFightDataCacheList[0];
                EnemyFightDataCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.PlayerFightInfo();
            }
            return ret;
        }

        /// <summary>return a free element to EnemyFightDataCacheList</summary>
        public void ReturnEnemyFightDataElement(global::cs.PlayerFightInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < EnemyFightDataCacheList.Count;  ++i)
            {
                if (EnemyFightDataCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                EnemyFightDataCacheList.Add(element);
            }
        }
    }

    /// <summary>单人关卡信息</summary>
    public partial class SingleLevelConfig
    {
        public SingleLevelConfig()
        {
            Clear();
        }
        /// <summary>绑定 LevelType</summary>
        public int LevelType { get; set; }

        /// <summary>普通副本</summary>
        public global::cs.SingleOrdinaryLevelConfig OrdinaryLevelConfig { get; set; }

        /// <summary>无尽副本</summary>
        public global::cs.SingleEndlessLevelConfig EndlessLevelConfig { get; set; }

        /// <summary>经验副本</summary>
        public global::cs.SingleExpLevelConfig SingleExpLevelConfig { get; set; }

        /// <summary>江湖历练</summary>
        public global::cs.JianghuTrialsConfig JianghuTrialsConfig { get; set; }


        public void Clear()
        {
            LevelType = 0;
            if (OrdinaryLevelConfig != null)
            {
                OrdinaryLevelConfig.Clear();
            }
            if (EndlessLevelConfig != null)
            {
                EndlessLevelConfig.Clear();
            }
            if (SingleExpLevelConfig != null)
            {
                SingleExpLevelConfig.Clear();
            }
            if (JianghuTrialsConfig != null)
            {
                JianghuTrialsConfig.Clear();
            }
        }
    }

    /// <summary>关卡信息通知 CS_LEVEL_CONFIG_NOTIFY = 2191</summary>
    public partial class CSLevelConfigNotify
    {
        public CSLevelConfigNotify()
        {
            Clear();
        }
        /// <summary>关卡id</summary>
        public uint LevelID { get; set; }

        /// <summary>任务触发事件</summary>
        public global::cs.LevelEvent Event { get; set; }

        /// <summary>单人副本关卡信息</summary>
        public global::cs.SingleLevelConfig SingleLevelConfig { get; set; }

        /// <summary> 单人副本房间ID</summary>
        public global::cs.MyUint64 RoomID { get; set; }


        public void Clear()
        {
            LevelID = 0;
            if (Event != null)
            {
                Event.Clear();
            }
            if (SingleLevelConfig != null)
            {
                SingleLevelConfig.Clear();
            }
            if (RoomID != null)
            {
                RoomID.Clear();
            }
        }
    }

    /// <summary>刷怪请求 CS_REFRESH_MONSTER_REQ = 2101</summary>
    public partial class CSRefreshMonsterReq
    {
        public CSRefreshMonsterReq()
        {
            NpcDieList = new List<global::cs.NpcDieLog>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for NpcDieList</summary>
        public List<global::cs.NpcDieLog> NpcDieListCacheList = new List<global::cs.NpcDieLog>(50);

        /// <summary>杀死的怪物详细信息列表，用于记录日志</summary>
        public List<global::cs.NpcDieLog> NpcDieList { get; set; }


        public void Clear()
        {
            if (NpcDieList != null)
            {
                for (int i = 0; i < NpcDieList.Count;  ++i)
                {
                    NpcDieList[i].Clear();
                    ReturnNpcDieListElement(NpcDieList[i]);
                }
                NpcDieList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            NpcDieListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                NpcDieListCacheList.Add(new global::cs.NpcDieLog());
            }
        }

        /// <summary>get a free element from NpcDieListCacheList</summary>
        public global::cs.NpcDieLog GetFreeNpcDieListElement()
        {
            global::cs.NpcDieLog ret = null;
            if (NpcDieListCacheList.Count > 0)
            {
                 ret = NpcDieListCacheList[0];
                NpcDieListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.NpcDieLog();
            }
            return ret;
        }

        /// <summary>return a free element to NpcDieListCacheList</summary>
        public void ReturnNpcDieListElement(global::cs.NpcDieLog element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < NpcDieListCacheList.Count;  ++i)
            {
                if (NpcDieListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                NpcDieListCacheList.Add(element);
            }
        }
    }

    /// <summary>刷怪回复 CS_REFRESH_MONSTER_RES = 2102</summary>
    public partial class CSRefreshMonsterRes
    {
        public CSRefreshMonsterRes()
        {
            Clear();
        }
        /// <summary> 0 表示请求成功，非零表示请求错误</summary>
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary>关卡信息查询请求  CS_QUERY_LEVEL_INFO_REQ = 2016</summary>
    public partial class CSQueryLevelInfoReq
    {
        public CSQueryLevelInfoReq()
        {
            Clear();
        }
        /// <summary>组ID</summary>
        public uint GroupID { get; set; }


        public void Clear()
        {
            GroupID = 0;
        }
    }

    /// <summary>关卡信息查询回复 CS_QUERY_LEVEL_INFO_RES = 2015</summary>
    public partial class CSQueryLevelInfoRes
    {
        public CSQueryLevelInfoRes()
        {
            LevlInfoList = new List<global::cs.CSQueryLevelInfoRes.LevelInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for LevlInfoList</summary>
        public List<global::cs.CSQueryLevelInfoRes.LevelInfo> LevlInfoListCacheList = new List<global::cs.CSQueryLevelInfoRes.LevelInfo>(50);

        public int RetCode { get; set; }

        /// <summary>组ID</summary>
        public int GroupID { get; set; }

        public List<global::cs.CSQueryLevelInfoRes.LevelInfo> LevlInfoList { get; set; }


        public void Clear()
        {
            RetCode = 0;
            GroupID = 0;
            if (LevlInfoList != null)
            {
                for (int i = 0; i < LevlInfoList.Count;  ++i)
                {
                    LevlInfoList[i].Clear();
                    ReturnLevlInfoListElement(LevlInfoList[i]);
                }
                LevlInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            LevlInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                LevlInfoListCacheList.Add(new global::cs.CSQueryLevelInfoRes.LevelInfo());
            }
        }

        /// <summary>get a free element from LevlInfoListCacheList</summary>
        public global::cs.CSQueryLevelInfoRes.LevelInfo GetFreeLevlInfoListElement()
        {
            global::cs.CSQueryLevelInfoRes.LevelInfo ret = null;
            if (LevlInfoListCacheList.Count > 0)
            {
                 ret = LevlInfoListCacheList[0];
                LevlInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSQueryLevelInfoRes.LevelInfo();
            }
            return ret;
        }

        /// <summary>return a free element to LevlInfoListCacheList</summary>
        public void ReturnLevlInfoListElement(global::cs.CSQueryLevelInfoRes.LevelInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < LevlInfoListCacheList.Count;  ++i)
            {
                if (LevlInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                LevlInfoListCacheList.Add(element);
            }
        }
        public partial class LevelInfo
        {
            public LevelInfo()
            {
                Clear();
            }
            /// <summary>关卡id</summary>
            public uint LevelID { get; set; }

            /// <summary>总共通关次数</summary>
            public uint TotalClearanceNum { get; set; }

            /// <summary> 每日可进入的次数</summary>
            public uint DailyEntryNum { get; set; }

            /// <summary>当前购买了次数</summary>
            public uint CurBuyedEntryNum { get; set; }


            public void Clear()
            {
                LevelID = 0;
                TotalClearanceNum = 0;
                DailyEntryNum = 0;
                CurBuyedEntryNum = 0;
            }
        }

    }

    /// <summary>请求结算 CS_CLEAR_ACCOUNT_REQ = 1007</summary>
    public partial class CSClearAccountReq
    {
        public CSClearAccountReq()
        {
            PickUpGoodInfoList = new List<global::cs.DropGoodInfoList>();
            KilledMonsterInfoList = new List<global::cs.KilledMonsterInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for PickUpGoodInfoList</summary>
        public List<global::cs.DropGoodInfoList> PickUpGoodInfoListCacheList = new List<global::cs.DropGoodInfoList>(50);

        /// <summary>a cache list for KilledMonsterInfoList</summary>
        public List<global::cs.KilledMonsterInfo> KilledMonsterInfoListCacheList = new List<global::cs.KilledMonsterInfo>(50);

        /// <summary>拾取物品列表</summary>
        public List<global::cs.DropGoodInfoList> PickUpGoodInfoList { get; set; }

        /// <summary>杀死的怪物列表</summary>
        public List<global::cs.KilledMonsterInfo> KilledMonsterInfoList { get; set; }

        /// <summary>暂停时长（秒）</summary>
        public int PauseTime { get; set; }

        /// <summary>是否达到特殊奖励条件1 达到 0 未达到</summary>
        public int IsCanSpecialAward { get; set; }


        public void Clear()
        {
            if (PickUpGoodInfoList != null)
            {
                for (int i = 0; i < PickUpGoodInfoList.Count;  ++i)
                {
                    PickUpGoodInfoList[i].Clear();
                    ReturnPickUpGoodInfoListElement(PickUpGoodInfoList[i]);
                }
                PickUpGoodInfoList.Clear();
            }
            if (KilledMonsterInfoList != null)
            {
                for (int i = 0; i < KilledMonsterInfoList.Count;  ++i)
                {
                    KilledMonsterInfoList[i].Clear();
                    ReturnKilledMonsterInfoListElement(KilledMonsterInfoList[i]);
                }
                KilledMonsterInfoList.Clear();
            }
            PauseTime = 0;
            IsCanSpecialAward = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            PickUpGoodInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                PickUpGoodInfoListCacheList.Add(new global::cs.DropGoodInfoList());
            }
            KilledMonsterInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                KilledMonsterInfoListCacheList.Add(new global::cs.KilledMonsterInfo());
            }
        }

        /// <summary>get a free element from PickUpGoodInfoListCacheList</summary>
        public global::cs.DropGoodInfoList GetFreePickUpGoodInfoListElement()
        {
            global::cs.DropGoodInfoList ret = null;
            if (PickUpGoodInfoListCacheList.Count > 0)
            {
                 ret = PickUpGoodInfoListCacheList[0];
                PickUpGoodInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.DropGoodInfoList();
            }
            return ret;
        }

        /// <summary>return a free element to PickUpGoodInfoListCacheList</summary>
        public void ReturnPickUpGoodInfoListElement(global::cs.DropGoodInfoList element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < PickUpGoodInfoListCacheList.Count;  ++i)
            {
                if (PickUpGoodInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                PickUpGoodInfoListCacheList.Add(element);
            }
        }

        /// <summary>get a free element from KilledMonsterInfoListCacheList</summary>
        public global::cs.KilledMonsterInfo GetFreeKilledMonsterInfoListElement()
        {
            global::cs.KilledMonsterInfo ret = null;
            if (KilledMonsterInfoListCacheList.Count > 0)
            {
                 ret = KilledMonsterInfoListCacheList[0];
                KilledMonsterInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.KilledMonsterInfo();
            }
            return ret;
        }

        /// <summary>return a free element to KilledMonsterInfoListCacheList</summary>
        public void ReturnKilledMonsterInfoListElement(global::cs.KilledMonsterInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < KilledMonsterInfoListCacheList.Count;  ++i)
            {
                if (KilledMonsterInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                KilledMonsterInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary>请求结算回复 CS_CLEAR_ACCOUNT_RES = 1008</summary>
    public partial class CSClearAccountRes
    {
        public CSClearAccountRes()
        {
            Clear();
        }
        /// <summary> 0 表示请求成功，非零表示请求错误</summary>
        public int RetCode { get; set; }

        /// <summary> 是否胜利通关</summary>
        public bool IsVictory { get; set; }

        /// <summary> 结算信息</summary>
        public global::cs.ClearAccountInfo ClearAccountInfo { get; set; }

        /// <summary>可接取的任务ID</summary>
        public uint TaskID { get; set; }


        public void Clear()
        {
            RetCode = 0;
            IsVictory = false;
            if (ClearAccountInfo != null)
            {
                ClearAccountInfo.Clear();
            }
            TaskID = 0;
        }
    }

    /// <summary>退出关卡请求 CS_QUIT_LEVEL_REQ = 2017</summary>
    public partial class CSQuitLevelReq
    {
        public CSQuitLevelReq()
        {
            Clear();
        }
        public uint IsSuccess { get; set; }


        public void Clear()
        {
            IsSuccess = 0;
        }
    }

    /// <summary>退出关卡回复 CS_QUIT_LEVEL_RES = 2045</summary>
    public partial class CSQuitLevelRes
    {
        public CSQuitLevelRes()
        {
            Clear();
        }
        /// <summary> 0 表示请求成功，非零表示请求错误</summary>
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary>请求无尽关卡基础信息 CS_LEVEL_GET_ENDLESS_BASEINFO_REQ = 2161</summary>
    public partial class CSLevelGetEndlessBaseInfoReq
    {
        public CSLevelGetEndlessBaseInfoReq()
        {
            Clear();
        }
        public uint LevelID { get; set; }


        public void Clear()
        {
            LevelID = 0;
        }
    }

    /// <summary>回复尽关卡基础信息 CS_LEVEL_GET_ENDLESS_BASEINFO_RES = 2162</summary>
    public partial class CSLevelGetEndlessBaseInfoRes
    {
        public CSLevelGetEndlessBaseInfoRes()
        {
            Clear();
        }
        public int RetCode { get; set; }

        /// <summary>
        /// <para>已经挑战的次数</para>
        /// <para>optional uint32 BattledNum = 2;</para>
        /// <para>剩余挑战次数</para>
        /// </summary>
        public uint RemainderBattleNum { get; set; }

        /// <summary>历史最大的波数</summary>
        public uint HistoryMaxWaveNum { get; set; }

        /// <summary>当前开始挑战的波数</summary>
        public uint CurBattleWaveNum { get; set; }

        /// <summary>
        /// <para>可能掉落的物品id列表</para>
        /// <para>repeated DropGoodInfo DropGoodsList  = 6;</para>
        /// <para>是否在开放时间内</para>
        /// </summary>
        public bool IsOpenTime { get; set; }

        /// <summary>自己当日排行</summary>
        public uint CurRank { get; set; }


        public void Clear()
        {
            RetCode = 0;
            RemainderBattleNum = 0;
            HistoryMaxWaveNum = 0;
            CurBattleWaveNum = 0;
            IsOpenTime = false;
            CurRank = 0;
        }
    }

    /// <summary>无尽关卡一波结束请求 CS_ENDLESS_FINISHED_REQ = 2155</summary>
    public partial class CSEndlessFinishedReq
    {
        public CSEndlessFinishedReq()
        {
            KilledMonsterInfoList = new List<global::cs.KilledMonsterInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for KilledMonsterInfoList</summary>
        public List<global::cs.KilledMonsterInfo> KilledMonsterInfoListCacheList = new List<global::cs.KilledMonsterInfo>(50);

        /// <summary>杀死的怪物列表</summary>
        public List<global::cs.KilledMonsterInfo> KilledMonsterInfoList { get; set; }

        /// <summary>暂停时长（秒）</summary>
        public int PauseTime { get; set; }


        public void Clear()
        {
            if (KilledMonsterInfoList != null)
            {
                for (int i = 0; i < KilledMonsterInfoList.Count;  ++i)
                {
                    KilledMonsterInfoList[i].Clear();
                    ReturnKilledMonsterInfoListElement(KilledMonsterInfoList[i]);
                }
                KilledMonsterInfoList.Clear();
            }
            PauseTime = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            KilledMonsterInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                KilledMonsterInfoListCacheList.Add(new global::cs.KilledMonsterInfo());
            }
        }

        /// <summary>get a free element from KilledMonsterInfoListCacheList</summary>
        public global::cs.KilledMonsterInfo GetFreeKilledMonsterInfoListElement()
        {
            global::cs.KilledMonsterInfo ret = null;
            if (KilledMonsterInfoListCacheList.Count > 0)
            {
                 ret = KilledMonsterInfoListCacheList[0];
                KilledMonsterInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.KilledMonsterInfo();
            }
            return ret;
        }

        /// <summary>return a free element to KilledMonsterInfoListCacheList</summary>
        public void ReturnKilledMonsterInfoListElement(global::cs.KilledMonsterInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < KilledMonsterInfoListCacheList.Count;  ++i)
            {
                if (KilledMonsterInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                KilledMonsterInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary>无尽关卡一波结束回复  CS_ENDLESS_FINISHED_RES = 2156</summary>
    public partial class CSEndlessFinishedRes
    {
        public CSEndlessFinishedRes()
        {
            CurRewardInfoList = new List<global::cs.CSEndlessFinishedRes.RewardInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for CurRewardInfoList</summary>
        public List<global::cs.CSEndlessFinishedRes.RewardInfo> CurRewardInfoListCacheList = new List<global::cs.CSEndlessFinishedRes.RewardInfo>(50);

        public int RetCode { get; set; }

        /// <summary>是否挑战成功</summary>
        public bool IsSuccess { get; set; }

        /// <summary>当前成绩</summary>
        public global::cs.ScoreInfo CurScoreInfo { get; set; }

        /// <summary>当前排名</summary>
        public uint CurRanking { get; set; }

        /// <summary>奖励列表</summary>
        public List<global::cs.CSEndlessFinishedRes.RewardInfo> CurRewardInfoList { get; set; }

        /// <summary>是否是boss波</summary>
        public bool IsBossWave { get; set; }

        /// <summary>下一波关卡信息</summary>
        public global::cs.SingleEndlessLevelConfig NextEndlessLevelInfo { get; set; }


        public void Clear()
        {
            RetCode = 0;
            IsSuccess = false;
            if (CurScoreInfo != null)
            {
                CurScoreInfo.Clear();
            }
            CurRanking = 0;
            if (CurRewardInfoList != null)
            {
                for (int i = 0; i < CurRewardInfoList.Count;  ++i)
                {
                    CurRewardInfoList[i].Clear();
                    ReturnCurRewardInfoListElement(CurRewardInfoList[i]);
                }
                CurRewardInfoList.Clear();
            }
            IsBossWave = false;
            if (NextEndlessLevelInfo != null)
            {
                NextEndlessLevelInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            CurRewardInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                CurRewardInfoListCacheList.Add(new global::cs.CSEndlessFinishedRes.RewardInfo());
            }
        }

        /// <summary>get a free element from CurRewardInfoListCacheList</summary>
        public global::cs.CSEndlessFinishedRes.RewardInfo GetFreeCurRewardInfoListElement()
        {
            global::cs.CSEndlessFinishedRes.RewardInfo ret = null;
            if (CurRewardInfoListCacheList.Count > 0)
            {
                 ret = CurRewardInfoListCacheList[0];
                CurRewardInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSEndlessFinishedRes.RewardInfo();
            }
            return ret;
        }

        /// <summary>return a free element to CurRewardInfoListCacheList</summary>
        public void ReturnCurRewardInfoListElement(global::cs.CSEndlessFinishedRes.RewardInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < CurRewardInfoListCacheList.Count;  ++i)
            {
                if (CurRewardInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                CurRewardInfoListCacheList.Add(element);
            }
        }
        public partial class RewardInfo
        {
            public RewardInfo()
            {
                Clear();
            }
            /// <summary>物品ID</summary>
            public uint GoodsID { get; set; }

            /// <summary>物品数量</summary>
            public uint GoodsNum { get; set; }


            public void Clear()
            {
                GoodsID = 0;
                GoodsNum = 0;
            }
        }

    }

    /// <summary> CS_MULTI_LEVEL_START_NOTIFY = 2201 通知玩家多人关卡开始了</summary>
    public partial class CSMultiLevelStartNotify
    {
        public CSMultiLevelStartNotify()
        {
            HeroInfo = new List<global::cs.HeroEnterViewInfo>();
            NpcInfo = new List<global::cs.NpcEnterViewInfo>();
            AppearNpcList = new List<uint>();
            DropGoodsIDList = new List<uint>();
            SkillID = new List<uint>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for HeroInfo</summary>
        public List<global::cs.HeroEnterViewInfo> HeroInfoCacheList = new List<global::cs.HeroEnterViewInfo>(50);

        /// <summary>a cache list for NpcInfo</summary>
        public List<global::cs.NpcEnterViewInfo> NpcInfoCacheList = new List<global::cs.NpcEnterViewInfo>(50);

        /// <summary> 进入视野的玩家列表</summary>
        public List<global::cs.HeroEnterViewInfo> HeroInfo { get; set; }

        /// <summary> 进入视野的 npc 列表</summary>
        public List<global::cs.NpcEnterViewInfo> NpcInfo { get; set; }

        /// <summary> 服务器有可能出现的 npc id</summary>
        public List<uint> AppearNpcList { get; set; }

        /// <summary>服务器可能掉落的物品ID列表</summary>
        public List<uint> DropGoodsIDList { get; set; }

        public global::cs.CSMultiLevelStartNotify.ExParameter ExParm { get; set; }

        public List<uint> SkillID { get; set; }


        public void Clear()
        {
            if (HeroInfo != null)
            {
                for (int i = 0; i < HeroInfo.Count;  ++i)
                {
                    HeroInfo[i].Clear();
                    ReturnHeroInfoElement(HeroInfo[i]);
                }
                HeroInfo.Clear();
            }
            if (NpcInfo != null)
            {
                for (int i = 0; i < NpcInfo.Count;  ++i)
                {
                    NpcInfo[i].Clear();
                    ReturnNpcInfoElement(NpcInfo[i]);
                }
                NpcInfo.Clear();
            }
            if (AppearNpcList != null)
            {
                AppearNpcList.Clear();
            }
            if (DropGoodsIDList != null)
            {
                DropGoodsIDList.Clear();
            }
            if (ExParm != null)
            {
                ExParm.Clear();
            }
            if (SkillID != null)
            {
                SkillID.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            HeroInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                HeroInfoCacheList.Add(new global::cs.HeroEnterViewInfo());
            }
            NpcInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                NpcInfoCacheList.Add(new global::cs.NpcEnterViewInfo());
            }
        }

        /// <summary>get a free element from HeroInfoCacheList</summary>
        public global::cs.HeroEnterViewInfo GetFreeHeroInfoElement()
        {
            global::cs.HeroEnterViewInfo ret = null;
            if (HeroInfoCacheList.Count > 0)
            {
                 ret = HeroInfoCacheList[0];
                HeroInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.HeroEnterViewInfo();
            }
            return ret;
        }

        /// <summary>return a free element to HeroInfoCacheList</summary>
        public void ReturnHeroInfoElement(global::cs.HeroEnterViewInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < HeroInfoCacheList.Count;  ++i)
            {
                if (HeroInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                HeroInfoCacheList.Add(element);
            }
        }

        /// <summary>get a free element from NpcInfoCacheList</summary>
        public global::cs.NpcEnterViewInfo GetFreeNpcInfoElement()
        {
            global::cs.NpcEnterViewInfo ret = null;
            if (NpcInfoCacheList.Count > 0)
            {
                 ret = NpcInfoCacheList[0];
                NpcInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.NpcEnterViewInfo();
            }
            return ret;
        }

        /// <summary>return a free element to NpcInfoCacheList</summary>
        public void ReturnNpcInfoElement(global::cs.NpcEnterViewInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < NpcInfoCacheList.Count;  ++i)
            {
                if (NpcInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                NpcInfoCacheList.Add(element);
            }
        }
        /// <summary>额外参数</summary>
        public partial class ExParameter
        {
            public ExParameter()
            {
                Clear();
            }
            public uint uParm { get; set; }


            public void Clear()
            {
                uParm = 0;
            }
        }

    }

    /// <summary>继续挑战 CS_LEVEL_CONTINUE_BATTE_REQ = 2196</summary>
    public partial class CSLevelContinueBatteReq
    {
        public CSLevelContinueBatteReq()
        {
            Clear();
        }

        public void Clear()
        {
        }
    }

    /// <summary>继续挑战 CS_LEVEL_CONTINUE_BATTE_RES = 2197</summary>
    public partial class CSLevelContinueBatteRes
    {
        public CSLevelContinueBatteRes()
        {
            Clear();
        }
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary> CS_ACTOR_MOVE_PATH_NOTIFY = 2214 多人关卡 npc 移动</summary>
    public partial class CSActorMovePathNotify
    {
        public CSActorMovePathNotify()
        {
            PathList = new List<global::cs.Triple>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for PathList</summary>
        public List<global::cs.Triple> PathListCacheList = new List<global::cs.Triple>(50);

        public global::cs.MyUint64 ActorID { get; set; }

        public int Speed { get; set; }

        public global::cs.Triple Pos { get; set; }

        public List<global::cs.Triple> PathList { get; set; }

        public global::cs.MyUint64 TargetActorID { get; set; }


        public void Clear()
        {
            if (ActorID != null)
            {
                ActorID.Clear();
            }
            Speed = 0;
            if (Pos != null)
            {
                Pos.Clear();
            }
            if (PathList != null)
            {
                for (int i = 0; i < PathList.Count;  ++i)
                {
                    PathList[i].Clear();
                    ReturnPathListElement(PathList[i]);
                }
                PathList.Clear();
            }
            if (TargetActorID != null)
            {
                TargetActorID.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            PathListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                PathListCacheList.Add(new global::cs.Triple());
            }
        }

        /// <summary>get a free element from PathListCacheList</summary>
        public global::cs.Triple GetFreePathListElement()
        {
            global::cs.Triple ret = null;
            if (PathListCacheList.Count > 0)
            {
                 ret = PathListCacheList[0];
                PathListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.Triple();
            }
            return ret;
        }

        /// <summary>return a free element to PathListCacheList</summary>
        public void ReturnPathListElement(global::cs.Triple element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < PathListCacheList.Count;  ++i)
            {
                if (PathListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                PathListCacheList.Add(element);
            }
        }
    }

    /// <summary>日常副本基础信息</summary>
    public partial class DailyLevelBaseInfo
    {
        public DailyLevelBaseInfo()
        {
            Clear();
        }
        public uint LevelID { get; set; }

        /// <summary>余挑战次数</summary>
        public uint RemainderBattleNum { get; set; }

        /// <summary>副本完成状态，绑定 cs_define_enum.proto.EnmLevelCompleteState</summary>
        public int LevelCompleteState { get; set; }


        public void Clear()
        {
            LevelID = 0;
            RemainderBattleNum = 0;
            LevelCompleteState = 0;
        }
    }

    /// <summary>查询日常副本基础信息请求 CS_QUERY_DAILY_LEVEL_BASEINFO_REQ = 2217</summary>
    public partial class CSQueryDailyLevelBaseInfoReq
    {
        public CSQueryDailyLevelBaseInfoReq()
        {
            Clear();
        }
        /// <summary>绑定 LevelType,不指定时表示查询全部</summary>
        public int LevelType { get; set; }


        public void Clear()
        {
            LevelType = 0;
        }
    }

    /// <summary>查询日常副本基础信息回复 CS_QUERY_DAILY_LEVEL_BASEINFO_RES = 2218</summary>
    public partial class CSQueryDailyLevelBaseInfoRes
    {
        public CSQueryDailyLevelBaseInfoRes()
        {
            DailyLevelBaseInfoList = new List<global::cs.DailyLevelBaseInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for DailyLevelBaseInfoList</summary>
        public List<global::cs.DailyLevelBaseInfo> DailyLevelBaseInfoListCacheList = new List<global::cs.DailyLevelBaseInfo>(50);

        public int RetCode { get; set; }

        public List<global::cs.DailyLevelBaseInfo> DailyLevelBaseInfoList { get; set; }


        public void Clear()
        {
            RetCode = 0;
            if (DailyLevelBaseInfoList != null)
            {
                for (int i = 0; i < DailyLevelBaseInfoList.Count;  ++i)
                {
                    DailyLevelBaseInfoList[i].Clear();
                    ReturnDailyLevelBaseInfoListElement(DailyLevelBaseInfoList[i]);
                }
                DailyLevelBaseInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            DailyLevelBaseInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                DailyLevelBaseInfoListCacheList.Add(new global::cs.DailyLevelBaseInfo());
            }
        }

        /// <summary>get a free element from DailyLevelBaseInfoListCacheList</summary>
        public global::cs.DailyLevelBaseInfo GetFreeDailyLevelBaseInfoListElement()
        {
            global::cs.DailyLevelBaseInfo ret = null;
            if (DailyLevelBaseInfoListCacheList.Count > 0)
            {
                 ret = DailyLevelBaseInfoListCacheList[0];
                DailyLevelBaseInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.DailyLevelBaseInfo();
            }
            return ret;
        }

        /// <summary>return a free element to DailyLevelBaseInfoListCacheList</summary>
        public void ReturnDailyLevelBaseInfoListElement(global::cs.DailyLevelBaseInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < DailyLevelBaseInfoListCacheList.Count;  ++i)
            {
                if (DailyLevelBaseInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                DailyLevelBaseInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary> 请求退出多人副本 CS_LEAVE_MULTI_LEVEL_REQ = 2235</summary>
    public partial class CSLeaveMultiLevelReq
    {
        public CSLeaveMultiLevelReq()
        {
            Clear();
        }
        /// <summary>
        /// <para>副本过程中强制退出 IsActive = 1</para>
        /// <para>游戏结算正常退出 IsActive = 0</para>
        /// </summary>
        public int IsActive { get; set; }


        public void Clear()
        {
            IsActive = 0;
        }
    }

    /// <summary> 请求多人副本请求返回  CS_LEAVE_MULTI_LEVEL_RES = 2236</summary>
    public partial class CSLeaveMultiLevelRes
    {
        public CSLeaveMultiLevelRes()
        {
            Clear();
        }
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    public partial class GoodJobData
    {
        public GoodJobData()
        {
            Clear();
        }
        public global::cs.MyUint64 RoleID { get; set; }

        public uint WeaponID { get; set; }

        public uint Level { get; set; }

        public string RoleName { get; set; }


        public void Clear()
        {
            if (RoleID != null)
            {
                RoleID.Clear();
            }
            WeaponID = 0;
            Level = 0;
            RoleName = "";
        }
    }

    /// <summary>多人副本结算 CS_MULTILEVEL_CLEAR_ACCOUNT_NOTIFY =  2258</summary>
    public partial class CSMultiLevelClearAccountNotify
    {
        public CSMultiLevelClearAccountNotify()
        {
            GoodJob = new List<global::cs.GoodJobData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for GoodJob</summary>
        public List<global::cs.GoodJobData> GoodJobCacheList = new List<global::cs.GoodJobData>(50);

        /// <summary> 是否胜利通关</summary>
        public bool IsVictory { get; set; }

        /// <summary> 结算信息</summary>
        public global::cs.ClearAccountInfo ClearAccountInfo { get; set; }

        /// <summary>是否击杀大boss</summary>
        public bool IsKillBigBoss { get; set; }

        /// <summary> 协助点赞</summary>
        public List<global::cs.GoodJobData> GoodJob { get; set; }


        public void Clear()
        {
            IsVictory = false;
            if (ClearAccountInfo != null)
            {
                ClearAccountInfo.Clear();
            }
            IsKillBigBoss = false;
            if (GoodJob != null)
            {
                for (int i = 0; i < GoodJob.Count;  ++i)
                {
                    GoodJob[i].Clear();
                    ReturnGoodJobElement(GoodJob[i]);
                }
                GoodJob.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            GoodJobCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                GoodJobCacheList.Add(new global::cs.GoodJobData());
            }
        }

        /// <summary>get a free element from GoodJobCacheList</summary>
        public global::cs.GoodJobData GetFreeGoodJobElement()
        {
            global::cs.GoodJobData ret = null;
            if (GoodJobCacheList.Count > 0)
            {
                 ret = GoodJobCacheList[0];
                GoodJobCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.GoodJobData();
            }
            return ret;
        }

        /// <summary>return a free element to GoodJobCacheList</summary>
        public void ReturnGoodJobElement(global::cs.GoodJobData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < GoodJobCacheList.Count;  ++i)
            {
                if (GoodJobCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                GoodJobCacheList.Add(element);
            }
        }
    }

    /// <summary>多人副本物品掉落 CS_MULTILEVEL_DROPGOODS_NOTIFY = 2259</summary>
    public partial class CSMultiLevelDropGoodsNotify
    {
        public CSMultiLevelDropGoodsNotify()
        {
            DropGoodInfoList = new List<global::cs.DropGoodInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for DropGoodInfoList</summary>
        public List<global::cs.DropGoodInfo> DropGoodInfoListCacheList = new List<global::cs.DropGoodInfo>(50);

        /// <summary>掉落的物品列表</summary>
        public List<global::cs.DropGoodInfo> DropGoodInfoList { get; set; }

        /// <summary>错误码</summary>
        public int RetCode { get; set; }


        public void Clear()
        {
            if (DropGoodInfoList != null)
            {
                for (int i = 0; i < DropGoodInfoList.Count;  ++i)
                {
                    DropGoodInfoList[i].Clear();
                    ReturnDropGoodInfoListElement(DropGoodInfoList[i]);
                }
                DropGoodInfoList.Clear();
            }
            RetCode = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            DropGoodInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                DropGoodInfoListCacheList.Add(new global::cs.DropGoodInfo());
            }
        }

        /// <summary>get a free element from DropGoodInfoListCacheList</summary>
        public global::cs.DropGoodInfo GetFreeDropGoodInfoListElement()
        {
            global::cs.DropGoodInfo ret = null;
            if (DropGoodInfoListCacheList.Count > 0)
            {
                 ret = DropGoodInfoListCacheList[0];
                DropGoodInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.DropGoodInfo();
            }
            return ret;
        }

        /// <summary>return a free element to DropGoodInfoListCacheList</summary>
        public void ReturnDropGoodInfoListElement(global::cs.DropGoodInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < DropGoodInfoListCacheList.Count;  ++i)
            {
                if (DropGoodInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                DropGoodInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary>多人副本特殊物品拾取请求 CS_MULTILEVEL_PICKUP_GOODS_REQ = 2269</summary>
    public partial class CSMultiLevelPickUpGoodsReq
    {
        public CSMultiLevelPickUpGoodsReq()
        {
            PickUpInfoList = new List<global::cs.DropGoodInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for PickUpInfoList</summary>
        public List<global::cs.DropGoodInfo> PickUpInfoListCacheList = new List<global::cs.DropGoodInfo>(50);

        /// <summary>拾取的特殊物品列表</summary>
        public List<global::cs.DropGoodInfo> PickUpInfoList { get; set; }


        public void Clear()
        {
            if (PickUpInfoList != null)
            {
                for (int i = 0; i < PickUpInfoList.Count;  ++i)
                {
                    PickUpInfoList[i].Clear();
                    ReturnPickUpInfoListElement(PickUpInfoList[i]);
                }
                PickUpInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            PickUpInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                PickUpInfoListCacheList.Add(new global::cs.DropGoodInfo());
            }
        }

        /// <summary>get a free element from PickUpInfoListCacheList</summary>
        public global::cs.DropGoodInfo GetFreePickUpInfoListElement()
        {
            global::cs.DropGoodInfo ret = null;
            if (PickUpInfoListCacheList.Count > 0)
            {
                 ret = PickUpInfoListCacheList[0];
                PickUpInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.DropGoodInfo();
            }
            return ret;
        }

        /// <summary>return a free element to PickUpInfoListCacheList</summary>
        public void ReturnPickUpInfoListElement(global::cs.DropGoodInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < PickUpInfoListCacheList.Count;  ++i)
            {
                if (PickUpInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                PickUpInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary>多人副本特殊物品拾取回复 CS_MULTILEVEL_PICKUP_GOODS_RES = 2270</summary>
    public partial class CSMultiLevelPickUpGoodsRes
    {
        public CSMultiLevelPickUpGoodsRes()
        {
            Clear();
        }
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary>怪物逃跑通知 CS_ACTOR_ESCAPE_NOTIFY = 2286（采花贼boss）</summary>
    public partial class CSActorEscapeNotify
    {
        public CSActorEscapeNotify()
        {
            Clear();
        }
        public global::cs.MyUint64 ActorID { get; set; }

        public global::cs.Triple ToPos { get; set; }


        public void Clear()
        {
            if (ActorID != null)
            {
                ActorID.Clear();
            }
            if (ToPos != null)
            {
                ToPos.Clear();
            }
        }
    }

    /// <summary>扔骰子结果(赌徒BOSS) CS_MULTILEVEL_DICE_RESULT_NOTIFY = 2287</summary>
    public partial class CSMultiLevelDiceResultNotify
    {
        public CSMultiLevelDiceResultNotify()
        {
            PlayerID = new List<global::cs.MyUint64>();
            PlayerDiceCount = new List<uint>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for PlayerID</summary>
        public List<global::cs.MyUint64> PlayerIDCacheList = new List<global::cs.MyUint64>(50);

        /// <summary>玩家的UID</summary>
        public List<global::cs.MyUint64> PlayerID { get; set; }

        /// <summary>对应玩家的点数</summary>
        public List<uint> PlayerDiceCount { get; set; }

        /// <summary>boss的点数</summary>
        public uint BossDiceCount { get; set; }


        public void Clear()
        {
            if (PlayerID != null)
            {
                for (int i = 0; i < PlayerID.Count;  ++i)
                {
                    PlayerID[i].Clear();
                    ReturnPlayerIDElement(PlayerID[i]);
                }
                PlayerID.Clear();
            }
            if (PlayerDiceCount != null)
            {
                PlayerDiceCount.Clear();
            }
            BossDiceCount = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            PlayerIDCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                PlayerIDCacheList.Add(new global::cs.MyUint64());
            }
        }

        /// <summary>get a free element from PlayerIDCacheList</summary>
        public global::cs.MyUint64 GetFreePlayerIDElement()
        {
            global::cs.MyUint64 ret = null;
            if (PlayerIDCacheList.Count > 0)
            {
                 ret = PlayerIDCacheList[0];
                PlayerIDCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.MyUint64();
            }
            return ret;
        }

        /// <summary>return a free element to PlayerIDCacheList</summary>
        public void ReturnPlayerIDElement(global::cs.MyUint64 element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < PlayerIDCacheList.Count;  ++i)
            {
                if (PlayerIDCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                PlayerIDCacheList.Add(element);
            }
        }
    }

    /// <summary>剧情结束通知 ,剧情锁定 CS_MULTILEVEL_ANIMATION_END_REQ = 2288</summary>
    public partial class CSMultiLevelAnimationEndReq
    {
        public CSMultiLevelAnimationEndReq()
        {
            Clear();
        }

        public void Clear()
        {
        }
    }

    /// <summary> CS_MULTILEVEL_ANIMATION_END_RES = 2289</summary>
    public partial class CSMultiLevelAnimationEndRes
    {
        public CSMultiLevelAnimationEndRes()
        {
            Clear();
        }
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary>人质回血满通知 CS_MULTILEVEL_ACTOR_FULL_BLOOD_NOTIFY = 2290</summary>
    public partial class CSMultiLevelActorFullBloodNotify
    {
        public CSMultiLevelActorFullBloodNotify()
        {
            Clear();
        }
        public global::cs.MyUint64 ActorID { get; set; }


        public void Clear()
        {
            if (ActorID != null)
            {
                ActorID.Clear();
            }
        }
    }

    /// <summary>
    /// <para>通知怪物死亡，目前是服务器主动杀死的非正常死亡</para>
    /// <para>CS_MULTILEVEL_ACTOR_DIE_NOTIFY = 2291</para>
    /// <para>message CSMultiLevelActorDieNotify</para>
    /// <para>{</para>
    /// <para>       repeated MyUint64 ActorID = 1;</para>
    /// <para>}</para>
    /// <para>boss胜利通知 CS_BOSS_VICTORY_NOTIFY = 2334</para>
    /// </summary>
    public partial class CSBossVictoryNotify
    {
        public CSBossVictoryNotify()
        {
            ActorID = new List<global::cs.MyUint64>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for ActorID</summary>
        public List<global::cs.MyUint64> ActorIDCacheList = new List<global::cs.MyUint64>(50);

        public List<global::cs.MyUint64> ActorID { get; set; }


        public void Clear()
        {
            if (ActorID != null)
            {
                for (int i = 0; i < ActorID.Count;  ++i)
                {
                    ActorID[i].Clear();
                    ReturnActorIDElement(ActorID[i]);
                }
                ActorID.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            ActorIDCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                ActorIDCacheList.Add(new global::cs.MyUint64());
            }
        }

        /// <summary>get a free element from ActorIDCacheList</summary>
        public global::cs.MyUint64 GetFreeActorIDElement()
        {
            global::cs.MyUint64 ret = null;
            if (ActorIDCacheList.Count > 0)
            {
                 ret = ActorIDCacheList[0];
                ActorIDCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.MyUint64();
            }
            return ret;
        }

        /// <summary>return a free element to ActorIDCacheList</summary>
        public void ReturnActorIDElement(global::cs.MyUint64 element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < ActorIDCacheList.Count;  ++i)
            {
                if (ActorIDCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                ActorIDCacheList.Add(element);
            }
        }
    }

    /// <summary>购买副本进入次数请求 CS_BUY_LEVEL_ENTER_NUM_REQ = 2348</summary>
    public partial class CSBuyLevelEnterNumReq
    {
        public CSBuyLevelEnterNumReq()
        {
            BuyLevelInfoList = new List<global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for BuyLevelInfoList</summary>
        public List<global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo> BuyLevelInfoListCacheList = new List<global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo>(50);

        public List<global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo> BuyLevelInfoList { get; set; }


        public void Clear()
        {
            if (BuyLevelInfoList != null)
            {
                for (int i = 0; i < BuyLevelInfoList.Count;  ++i)
                {
                    BuyLevelInfoList[i].Clear();
                    ReturnBuyLevelInfoListElement(BuyLevelInfoList[i]);
                }
                BuyLevelInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            BuyLevelInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                BuyLevelInfoListCacheList.Add(new global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo());
            }
        }

        /// <summary>get a free element from BuyLevelInfoListCacheList</summary>
        public global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo GetFreeBuyLevelInfoListElement()
        {
            global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo ret = null;
            if (BuyLevelInfoListCacheList.Count > 0)
            {
                 ret = BuyLevelInfoListCacheList[0];
                BuyLevelInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo();
            }
            return ret;
        }

        /// <summary>return a free element to BuyLevelInfoListCacheList</summary>
        public void ReturnBuyLevelInfoListElement(global::cs.CSBuyLevelEnterNumReq.BuyLevelInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < BuyLevelInfoListCacheList.Count;  ++i)
            {
                if (BuyLevelInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                BuyLevelInfoListCacheList.Add(element);
            }
        }
        public partial class BuyLevelInfo
        {
            public BuyLevelInfo()
            {
                uBuyEnterNum = 1;
                Clear();
            }
            public uint uLevelID { get; set; }

            /// <summary>要购买的进入次数</summary>
            public uint uBuyEnterNum { get; set; }


            public void Clear()
            {
                uLevelID = 0;
            }
        }

    }

    /// <summary>购买副本进入次数回复 CS_BUY_LEVEL_ENTER_NUM_RES = 2349</summary>
    public partial class CSBuyLevelEnterNumRes
    {
        public CSBuyLevelEnterNumRes()
        {
            BuyLevelInfoList = new List<global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for BuyLevelInfoList</summary>
        public List<global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo> BuyLevelInfoListCacheList = new List<global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo>(50);

        public int RetCode { get; set; }

        public List<global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo> BuyLevelInfoList { get; set; }


        public void Clear()
        {
            RetCode = 0;
            if (BuyLevelInfoList != null)
            {
                for (int i = 0; i < BuyLevelInfoList.Count;  ++i)
                {
                    BuyLevelInfoList[i].Clear();
                    ReturnBuyLevelInfoListElement(BuyLevelInfoList[i]);
                }
                BuyLevelInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            BuyLevelInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                BuyLevelInfoListCacheList.Add(new global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo());
            }
        }

        /// <summary>get a free element from BuyLevelInfoListCacheList</summary>
        public global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo GetFreeBuyLevelInfoListElement()
        {
            global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo ret = null;
            if (BuyLevelInfoListCacheList.Count > 0)
            {
                 ret = BuyLevelInfoListCacheList[0];
                BuyLevelInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo();
            }
            return ret;
        }

        /// <summary>return a free element to BuyLevelInfoListCacheList</summary>
        public void ReturnBuyLevelInfoListElement(global::cs.CSBuyLevelEnterNumRes.BuyLevelInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < BuyLevelInfoListCacheList.Count;  ++i)
            {
                if (BuyLevelInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                BuyLevelInfoListCacheList.Add(element);
            }
        }
        public partial class BuyLevelInfo
        {
            public BuyLevelInfo()
            {
                Clear();
            }
            public uint uLevelID { get; set; }

            /// <summary>当日总共进入次数</summary>
            public uint uTotalEnterNum { get; set; }


            public void Clear()
            {
                uLevelID = 0;
                uTotalEnterNum = 0;
            }
        }

    }

    /// <summary> 客户端请求获取无尽副本底层奖励 CS_ENDLESS_LEVEL_AWARD_REQ = 2375</summary>
    public partial class CSEndlessLevelAwardReq
    {
        public CSEndlessLevelAwardReq()
        {
            Clear();
        }

        public void Clear()
        {
        }
    }

    /// <summary> 客户端请求获取无尽副本底层回复 CS_ENDLESS_LEVEL_AWARD_RES = 2376</summary>
    public partial class CSEndlessLevelAwardRes
    {
        public CSEndlessLevelAwardRes()
        {
            Clear();
        }
        public int RetCode { get; set; }

        /// <summary> 元宝个数</summary>
        public uint GoldNum { get; set; }


        public void Clear()
        {
            RetCode = 0;
            GoldNum = 0;
        }
    }

    /// <summary> CS_LEVEL_STATE_NOTIFY = 2377 客户端进入多人副本时通知消息</summary>
    public partial class CSLevelStateNotify
    {
        public CSLevelStateNotify()
        {
            Clear();
        }
        /// <summary> 副本ID</summary>
        public uint LevelID { get; set; }

        /// <summary> 副本当前状态 @see EnmLevelState</summary>
        public int LevelState { get; set; }

        /// <summary> 如果 LevelState 处于结算状态，则才会有这个字段</summary>
        public global::cs.CSLevelStateNotify.ClearAccountData ClearData { get; set; }


        public void Clear()
        {
            LevelID = 0;
            LevelState = 0;
            if (ClearData != null)
            {
                ClearData.Clear();
            }
        }
        public partial class ClearAccountData
        {
            public ClearAccountData()
            {
                Clear();
            }
            /// <summary> 如果处于结算状态则下发结算信息</summary>
            public global::cs.CSMultiLevelClearAccountNotify ClearNotify { get; set; }


            public void Clear()
            {
                if (ClearNotify != null)
                {
                    ClearNotify.Clear();
                }
            }
        }

    }

    public partial class LevelInfo
    {
        public LevelInfo()
        {
            Clear();
        }
        /// <summary>副本ID</summary>
        public uint LevelID { get; set; }

        /// <summary>是否获得过特殊奖励</summary>
        public uint IsGetSpecialAward { get; set; }


        public void Clear()
        {
            LevelID = 0;
            IsGetSpecialAward = 0;
        }
    }

    /// <summary>请求关卡数据    CS_LEVEL_INTO_REQ = 2444;</summary>
    public partial class CSLevelInfoReq
    {
        public CSLevelInfoReq()
        {
            LevelIDList = new List<uint>();
            Clear();
        }
        /// <summary>副本ID列表</summary>
        public List<uint> LevelIDList { get; set; }


        public void Clear()
        {
            if (LevelIDList != null)
            {
                LevelIDList.Clear();
            }
        }
    }

    /// <summary>请求关卡数据    CS_LEVEL_INTO_RES = 2445;</summary>
    public partial class CSLevelInfoRes
    {
        public CSLevelInfoRes()
        {
            LevelInfoList = new List<global::cs.LevelInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for LevelInfoList</summary>
        public List<global::cs.LevelInfo> LevelInfoListCacheList = new List<global::cs.LevelInfo>(50);

        /// <summary>错误码</summary>
        public int RetCode { get; set; }

        /// <summary>副本信息</summary>
        public List<global::cs.LevelInfo> LevelInfoList { get; set; }


        public void Clear()
        {
            RetCode = 0;
            if (LevelInfoList != null)
            {
                for (int i = 0; i < LevelInfoList.Count;  ++i)
                {
                    LevelInfoList[i].Clear();
                    ReturnLevelInfoListElement(LevelInfoList[i]);
                }
                LevelInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            LevelInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                LevelInfoListCacheList.Add(new global::cs.LevelInfo());
            }
        }

        /// <summary>get a free element from LevelInfoListCacheList</summary>
        public global::cs.LevelInfo GetFreeLevelInfoListElement()
        {
            global::cs.LevelInfo ret = null;
            if (LevelInfoListCacheList.Count > 0)
            {
                 ret = LevelInfoListCacheList[0];
                LevelInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.LevelInfo();
            }
            return ret;
        }

        /// <summary>return a free element to LevelInfoListCacheList</summary>
        public void ReturnLevelInfoListElement(global::cs.LevelInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < LevelInfoListCacheList.Count;  ++i)
            {
                if (LevelInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                LevelInfoListCacheList.Add(element);
            }
        }
    }

    /// <summary> 点赞请求 CS_LEVEL_GOOD_JOB_REQ = 2531</summary>
    public partial class CSLevelGoodJobReq
    {
        public CSLevelGoodJobReq()
        {
            Clear();
        }
        public global::cs.MyUint64 RoleID { get; set; }


        public void Clear()
        {
            if (RoleID != null)
            {
                RoleID.Clear();
            }
        }
    }

    /// <summary> 点赞回复 CS_LEVEL_GOOD_JOB_RES = 2532</summary>
    public partial class CSLevelGoodJobRes
    {
        public CSLevelGoodJobRes()
        {
            Clear();
        }
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary>CS_DEAL_SINGLE_IMAGE_REQ = 2592</summary>
    public partial class CSDealSingleImageReq
    {
        public CSDealSingleImageReq()
        {
            Clear();
        }
        public int State { get; set; }


        public void Clear()
        {
            State = 0;
        }
    }

    /// <summary>CS_DEAL_SINGLE_IMAGE_RES = 2593</summary>
    public partial class CSDealSingleImageRes
    {
        public CSDealSingleImageRes()
        {
            Clear();
        }
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary> CS_LEVEL_TIME_LIMIT_NOTIFY = 2675 限时副本的剩余时间</summary>
    public partial class CSLevelTimeLimitNotify
    {
        public CSLevelTimeLimitNotify()
        {
            Clear();
        }
        /// <summary> 剩余时间</summary>
        public int RemainSec { get; set; }


        public void Clear()
        {
            RemainSec = 0;
        }
    }

    /// <summary> CS_LEVEL_EXIT_COUNT_DOWN_NOTIFY = 2676 进入下一层副本的时间戳</summary>
    public partial class CSLevelExitCountDownNotify
    {
        public CSLevelExitCountDownNotify()
        {
            Clear();
        }
        /// <summary> 剩余时间</summary>
        public int RemainSec { get; set; }


        public void Clear()
        {
            RemainSec = 0;
        }
    }

    /// <summary> CS_LEVEL_QUICKRESCUE_BUFFSTATE_NOTIFY = 2677 怒火救援获取buff阶段</summary>
    public partial class CSLevelQuickRescueBuffStateNotify
    {
        public CSLevelQuickRescueBuffStateNotify()
        {
            Clear();
        }
        /// <summary> 1 开始计时 2 关闭计时</summary>
        public int bStart { get; set; }

        public uint RemainSec { get; set; }


        public void Clear()
        {
            bStart = 0;
            RemainSec = 0;
        }
    }

    /// <summary>通知怪物的归属 CS_MONSTER_OWNER_NOTIFY = 2681;</summary>
    public partial class CSMonsterOwnerNotify
    {
        public CSMonsterOwnerNotify()
        {
            OwnerInfoList = new List<global::cs.CSMonsterOwnerNotify.OwnerInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for OwnerInfoList</summary>
        public List<global::cs.CSMonsterOwnerNotify.OwnerInfo> OwnerInfoListCacheList = new List<global::cs.CSMonsterOwnerNotify.OwnerInfo>(50);

        public List<global::cs.CSMonsterOwnerNotify.OwnerInfo> OwnerInfoList { get; set; }


        public void Clear()
        {
            if (OwnerInfoList != null)
            {
                for (int i = 0; i < OwnerInfoList.Count;  ++i)
                {
                    OwnerInfoList[i].Clear();
                    ReturnOwnerInfoListElement(OwnerInfoList[i]);
                }
                OwnerInfoList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            OwnerInfoListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                OwnerInfoListCacheList.Add(new global::cs.CSMonsterOwnerNotify.OwnerInfo());
            }
        }

        /// <summary>get a free element from OwnerInfoListCacheList</summary>
        public global::cs.CSMonsterOwnerNotify.OwnerInfo GetFreeOwnerInfoListElement()
        {
            global::cs.CSMonsterOwnerNotify.OwnerInfo ret = null;
            if (OwnerInfoListCacheList.Count > 0)
            {
                 ret = OwnerInfoListCacheList[0];
                OwnerInfoListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CSMonsterOwnerNotify.OwnerInfo();
            }
            return ret;
        }

        /// <summary>return a free element to OwnerInfoListCacheList</summary>
        public void ReturnOwnerInfoListElement(global::cs.CSMonsterOwnerNotify.OwnerInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < OwnerInfoListCacheList.Count;  ++i)
            {
                if (OwnerInfoListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                OwnerInfoListCacheList.Add(element);
            }
        }
        public partial class OwnerInfo
        {
            public OwnerInfo()
            {
                OwnerUidList = new List<global::cs.MyUint64>();
                InitAllCacheList();
                Clear();
            }
            /// <summary>a cache list for OwnerUidList</summary>
            public List<global::cs.MyUint64> OwnerUidListCacheList = new List<global::cs.MyUint64>(50);

            /// <summary>怪物uid</summary>
            public global::cs.MyUint64 ActorUID { get; set; }

            /// <summary>归属者uid</summary>
            public List<global::cs.MyUint64> OwnerUidList { get; set; }


            public void Clear()
            {
                if (ActorUID != null)
                {
                    ActorUID.Clear();
                }
                if (OwnerUidList != null)
                {
                    for (int i = 0; i < OwnerUidList.Count;  ++i)
                    {
                        OwnerUidList[i].Clear();
                        ReturnOwnerUidListElement(OwnerUidList[i]);
                    }
                    OwnerUidList.Clear();
                }
            }

            /// <summary>init all the cache lists</summary>
            public void InitAllCacheList()
            {
                OwnerUidListCacheList.Clear();
                for (int i = 0; i < 50; ++i)
                {
                    OwnerUidListCacheList.Add(new global::cs.MyUint64());
                }
            }

            /// <summary>get a free element from OwnerUidListCacheList</summary>
            public global::cs.MyUint64 GetFreeOwnerUidListElement()
            {
                global::cs.MyUint64 ret = null;
                if (OwnerUidListCacheList.Count > 0)
                {
                     ret = OwnerUidListCacheList[0];
                    OwnerUidListCacheList.RemoveAt(0);
                }
                else
                {
                     ret = new global::cs.MyUint64();
                }
                return ret;
            }

            /// <summary>return a free element to OwnerUidListCacheList</summary>
            public void ReturnOwnerUidListElement(global::cs.MyUint64 element)
            {
                bool alreadyInList = false;
                for (int i = 0; i < OwnerUidListCacheList.Count;  ++i)
                {
                    if (OwnerUidListCacheList[i] == element)
                    {
                        alreadyInList = true;
                        break;
                    }
                }
                if (!alreadyInList)
                {
                    element.Clear();
                    OwnerUidListCacheList.Add(element);
                }
            }
        }

    }

    /// <summary> 塔防守护副本进入通知 CS_GUARD_ENTER_NOTIFY = 2775</summary>
    public partial class CSGuardEnterNotify
    {
        public CSGuardEnterNotify()
        {
            Clear();
        }
        /// <summary> 营地剩余生命值</summary>
        public uint LeftLife { get; set; }

        /// <summary> 积分</summary>
        public uint Score { get; set; }

        /// <summary> 波数</summary>
        public uint WaveNum { get; set; }


        public void Clear()
        {
            LeftLife = 0;
            Score = 0;
            WaveNum = 0;
        }
    }

    /// <summary> 塔防守护副本选择召唤NPC请求 CS_GUARD_SELECT_NPC_REQ = 2776;</summary>
    public partial class CSGuardSelectNpcReq
    {
        public CSGuardSelectNpcReq()
        {
            Clear();
        }
        public uint NpcID { get; set; }


        public void Clear()
        {
            NpcID = 0;
        }
    }

    /// <summary> 塔防守护副本选择召唤NPC回复 CS_GUARD_SELECT_NPC_RES = 2777;</summary>
    public partial class CSGuardSelectNpcRes
    {
        public CSGuardSelectNpcRes()
        {
            Clear();
        }
        public int RetCode { get; set; }


        public void Clear()
        {
            RetCode = 0;
        }
    }

    /// <summary> 塔防守护副本基本信息通知 CS_GUARD_BASE_INFO_NOTIFY = 2778;</summary>
    public partial class CSGuardBaseInfoNotify
    {
        public CSGuardBaseInfoNotify()
        {
            Clear();
        }
        /// <summary> @see EnmUpdateGuardData</summary>
        public uint Type { get; set; }

        public uint Data { get; set; }


        public void Clear()
        {
            Type = 0;
            Data = 0;
        }
    }

    /// <summary> 多人副本怪物波数信息 CS_ROOM_MONSTER_FLOCK_NOTIFY = 2796;</summary>
    public partial class CSRoomMonsterFlockNotify
    {
        public CSRoomMonsterFlockNotify()
        {
            Clear();
        }
        /// <summary> 当前波次</summary>
        public uint CurFlock { get; set; }

        /// <summary> 总波数</summary>
        public uint TotalFlock { get; set; }

        /// <summary> 下一波刷新的时间戳</summary>
        public uint NextFlockTm { get; set; }


        public void Clear()
        {
            CurFlock = 0;
            TotalFlock = 0;
            NextFlockTm = 0;
        }
    }



































































































































































































































}
