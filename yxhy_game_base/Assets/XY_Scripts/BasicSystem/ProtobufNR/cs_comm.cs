// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace cs
{
    public partial class MyUint64
    {
        public MyUint64()
        {
            Clear();
        }
        /// <summary> uint64 = ((High << 32) | Low)</summary>
        public uint High { get; set; }

        public uint Low { get; set; }


        public void Clear()
        {
            High = 0;
            Low = 0;
        }
    }

    /// <summary> 游戏地址</summary>
    public partial class TconndAddr
    {
        public TconndAddr()
        {
            Clear();
        }
        public string Ip { get; set; }

        public int Port { get; set; }


        public void Clear()
        {
            Ip = "";
            Port = 0;
        }
    }

    /// <summary> 玩家简要信息</summary>
    public partial class GlobalRoleBriefInfo
    {
        public GlobalRoleBriefInfo()
        {
            Clear();
        }
        /// <summary> 账号</summary>
        public global::cs.MyUint64 AccID { get; set; }

        /// <summary> 角色 id</summary>
        public global::cs.MyUint64 RoleID { get; set; }

        /// <summary> 模型 ID</summary>
        public int ModelID { get; set; }

        /// <summary> 角色等级</summary>
        public int Level { get; set; }

        /// <summary> 角色名字</summary>
        public string RoleName { get; set; }

        /// <summary>服务器ID</summary>
        public int WorldID { get; set; }


        public void Clear()
        {
            if (AccID != null)
            {
                AccID.Clear();
            }
            if (RoleID != null)
            {
                RoleID.Clear();
            }
            ModelID = 0;
            Level = 0;
            RoleName = "";
            WorldID = 0;
        }
    }

    public partial class ZoneInfo
    {
        public ZoneInfo()
        {
            Clear();
        }
        /// <summary>区编号</summary>
        public int ZoneIndex { get; set; }

        /// <summary>区名称</summary>
        public string ZoneName { get; set; }


        public void Clear()
        {
            ZoneIndex = 0;
            ZoneName = "";
        }
    }

    /// <summary> 服信息</summary>
    public partial class GameWorld
    {
        public GameWorld()
        {
            AddrList = new List<global::cs.TconndAddr>();
            RoleList = new List<global::cs.GlobalRoleBriefInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AddrList</summary>
        public List<global::cs.TconndAddr> AddrListCacheList = new List<global::cs.TconndAddr>(50);

        /// <summary>a cache list for RoleList</summary>
        public List<global::cs.GlobalRoleBriefInfo> RoleListCacheList = new List<global::cs.GlobalRoleBriefInfo>(50);

        /// <summary> 服名字</summary>
        public string WorldName { get; set; }

        /// <summary> 服 id</summary>
        public int WorldID { get; set; }

        /// <summary> 负载情况</summary>
        public global::cs.EnmWorldLoadType LoadType { get; set; }

        /// <summary>
        /// <para>*</para>
        /// <para>     * 有以下情况:</para>
        /// <para>     * 1. 玩家没有角色，则返回最空闲的 IP:PORT 列表</para>
        /// <para>     * 2. 玩家有角色，则返回角色上一次下线时的 IP:PORT 列表</para>
        /// <para></para>
        /// </summary>
        public List<global::cs.TconndAddr> AddrList { get; set; }

        /// <summary>
        /// <para>*</para>
        /// <para>     * 如果玩家有角色，则角色上一次退出登陆的 ip 跟 AddrList 对应</para>
        /// <para>     * 比如有两个角色，则: RoleList[0] --> AddrList[0]; RoleList[1] --> AddrList[1]</para>
        /// <para></para>
        /// </summary>
        public List<global::cs.GlobalRoleBriefInfo> RoleList { get; set; }

        /// <summary>开服时间</summary>
        public int ZoneOpenTime { get; set; }

        /// <summary>所在区编号</summary>
        public int ZoneIndex { get; set; }


        public void Clear()
        {
            WorldName = "";
            WorldID = 0;
            LoadType = 0;
            if (AddrList != null)
            {
                for (int i = 0; i < AddrList.Count;  ++i)
                {
                    AddrList[i].Clear();
                    ReturnAddrListElement(AddrList[i]);
                }
                AddrList.Clear();
            }
            if (RoleList != null)
            {
                for (int i = 0; i < RoleList.Count;  ++i)
                {
                    RoleList[i].Clear();
                    ReturnRoleListElement(RoleList[i]);
                }
                RoleList.Clear();
            }
            ZoneOpenTime = 0;
            ZoneIndex = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AddrListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AddrListCacheList.Add(new global::cs.TconndAddr());
            }
            RoleListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                RoleListCacheList.Add(new global::cs.GlobalRoleBriefInfo());
            }
        }

        /// <summary>get a free element from AddrListCacheList</summary>
        public global::cs.TconndAddr GetFreeAddrListElement()
        {
            global::cs.TconndAddr ret = null;
            if (AddrListCacheList.Count > 0)
            {
                 ret = AddrListCacheList[0];
                AddrListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.TconndAddr();
            }
            return ret;
        }

        /// <summary>return a free element to AddrListCacheList</summary>
        public void ReturnAddrListElement(global::cs.TconndAddr element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AddrListCacheList.Count;  ++i)
            {
                if (AddrListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AddrListCacheList.Add(element);
            }
        }

        /// <summary>get a free element from RoleListCacheList</summary>
        public global::cs.GlobalRoleBriefInfo GetFreeRoleListElement()
        {
            global::cs.GlobalRoleBriefInfo ret = null;
            if (RoleListCacheList.Count > 0)
            {
                 ret = RoleListCacheList[0];
                RoleListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.GlobalRoleBriefInfo();
            }
            return ret;
        }

        /// <summary>return a free element to RoleListCacheList</summary>
        public void ReturnRoleListElement(global::cs.GlobalRoleBriefInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < RoleListCacheList.Count;  ++i)
            {
                if (RoleListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                RoleListCacheList.Add(element);
            }
        }
    }

    public partial class CSRoleData
    {
        public CSRoleData()
        {
            RoleAttr = new List<global::cs.AttrData>();
            AllCampAttr = new List<global::cs.CampAttr>();
            GuidIDList = new List<uint>();
            OutWardInfo = new List<global::cs.SingleOutWardInfo>();
            FightSoulInfo = new List<global::cs.FightSoul>();
            PositionStrengthen = new List<global::cs.PositionStrengthenInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for RoleAttr</summary>
        public List<global::cs.AttrData> RoleAttrCacheList = new List<global::cs.AttrData>(50);

        /// <summary>a cache list for AllCampAttr</summary>
        public List<global::cs.CampAttr> AllCampAttrCacheList = new List<global::cs.CampAttr>(50);

        /// <summary>a cache list for OutWardInfo</summary>
        public List<global::cs.SingleOutWardInfo> OutWardInfoCacheList = new List<global::cs.SingleOutWardInfo>(50);

        /// <summary>a cache list for FightSoulInfo</summary>
        public List<global::cs.FightSoul> FightSoulInfoCacheList = new List<global::cs.FightSoul>(50);

        /// <summary>a cache list for PositionStrengthen</summary>
        public List<global::cs.PositionStrengthenInfo> PositionStrengthenCacheList = new List<global::cs.PositionStrengthenInfo>(50);

        public global::cs.MyUint64 RoleID { get; set; }

        public string RoleName { get; set; }

        public global::cs.PlayerBagData BagData { get; set; }

        /// <summary>玩家基础属性情况</summary>
        public List<global::cs.AttrData> RoleAttr { get; set; }

        /// <summary>技能学习,配置情况</summary>
        public global::cs.SkillRoleInfo SkillInfo { get; set; }

        /// <summary>怪物阵营关系</summary>
        public List<global::cs.CampAttr> AllCampAttr { get; set; }

        /// <summary> 未完成新手引导ID</summary>
        public List<uint> GuidIDList { get; set; }

        public global::cs.MyUint64 AccID { get; set; }

        /// <summary>镖车ID</summary>
        public global::cs.MyUint64 BiaoCheID { get; set; }

        /// <summary>外观信息</summary>
        public List<global::cs.SingleOutWardInfo> OutWardInfo { get; set; }

        /// <summary>武魂信息</summary>
        public List<global::cs.FightSoul> FightSoulInfo { get; set; }

        /// <summary>坐骑信息</summary>
        public global::cs.RideInfo RideInfo { get; set; }

        /// <summary>离线经验数据</summary>
        public global::cs.OfflineExp OfflineExp { get; set; }

        /// <summary>强化信息</summary>
        public List<global::cs.PositionStrengthenInfo> PositionStrengthen { get; set; }

        /// <summary>帮会ID - 上线就发</summary>
        public global::cs.MyUint64 FactionID { get; set; }


        public void Clear()
        {
            if (RoleID != null)
            {
                RoleID.Clear();
            }
            RoleName = "";
            if (BagData != null)
            {
                BagData.Clear();
            }
            if (RoleAttr != null)
            {
                for (int i = 0; i < RoleAttr.Count;  ++i)
                {
                    RoleAttr[i].Clear();
                    ReturnRoleAttrElement(RoleAttr[i]);
                }
                RoleAttr.Clear();
            }
            if (SkillInfo != null)
            {
                SkillInfo.Clear();
            }
            if (AllCampAttr != null)
            {
                for (int i = 0; i < AllCampAttr.Count;  ++i)
                {
                    AllCampAttr[i].Clear();
                    ReturnAllCampAttrElement(AllCampAttr[i]);
                }
                AllCampAttr.Clear();
            }
            if (GuidIDList != null)
            {
                GuidIDList.Clear();
            }
            if (AccID != null)
            {
                AccID.Clear();
            }
            if (BiaoCheID != null)
            {
                BiaoCheID.Clear();
            }
            if (OutWardInfo != null)
            {
                for (int i = 0; i < OutWardInfo.Count;  ++i)
                {
                    OutWardInfo[i].Clear();
                    ReturnOutWardInfoElement(OutWardInfo[i]);
                }
                OutWardInfo.Clear();
            }
            if (FightSoulInfo != null)
            {
                for (int i = 0; i < FightSoulInfo.Count;  ++i)
                {
                    FightSoulInfo[i].Clear();
                    ReturnFightSoulInfoElement(FightSoulInfo[i]);
                }
                FightSoulInfo.Clear();
            }
            if (RideInfo != null)
            {
                RideInfo.Clear();
            }
            if (OfflineExp != null)
            {
                OfflineExp.Clear();
            }
            if (PositionStrengthen != null)
            {
                for (int i = 0; i < PositionStrengthen.Count;  ++i)
                {
                    PositionStrengthen[i].Clear();
                    ReturnPositionStrengthenElement(PositionStrengthen[i]);
                }
                PositionStrengthen.Clear();
            }
            if (FactionID != null)
            {
                FactionID.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            RoleAttrCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                RoleAttrCacheList.Add(new global::cs.AttrData());
            }
            AllCampAttrCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AllCampAttrCacheList.Add(new global::cs.CampAttr());
            }
            OutWardInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                OutWardInfoCacheList.Add(new global::cs.SingleOutWardInfo());
            }
            FightSoulInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                FightSoulInfoCacheList.Add(new global::cs.FightSoul());
            }
            PositionStrengthenCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                PositionStrengthenCacheList.Add(new global::cs.PositionStrengthenInfo());
            }
        }

        /// <summary>get a free element from RoleAttrCacheList</summary>
        public global::cs.AttrData GetFreeRoleAttrElement()
        {
            global::cs.AttrData ret = null;
            if (RoleAttrCacheList.Count > 0)
            {
                 ret = RoleAttrCacheList[0];
                RoleAttrCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AttrData();
            }
            return ret;
        }

        /// <summary>return a free element to RoleAttrCacheList</summary>
        public void ReturnRoleAttrElement(global::cs.AttrData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < RoleAttrCacheList.Count;  ++i)
            {
                if (RoleAttrCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                RoleAttrCacheList.Add(element);
            }
        }

        /// <summary>get a free element from AllCampAttrCacheList</summary>
        public global::cs.CampAttr GetFreeAllCampAttrElement()
        {
            global::cs.CampAttr ret = null;
            if (AllCampAttrCacheList.Count > 0)
            {
                 ret = AllCampAttrCacheList[0];
                AllCampAttrCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.CampAttr();
            }
            return ret;
        }

        /// <summary>return a free element to AllCampAttrCacheList</summary>
        public void ReturnAllCampAttrElement(global::cs.CampAttr element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AllCampAttrCacheList.Count;  ++i)
            {
                if (AllCampAttrCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AllCampAttrCacheList.Add(element);
            }
        }

        /// <summary>get a free element from OutWardInfoCacheList</summary>
        public global::cs.SingleOutWardInfo GetFreeOutWardInfoElement()
        {
            global::cs.SingleOutWardInfo ret = null;
            if (OutWardInfoCacheList.Count > 0)
            {
                 ret = OutWardInfoCacheList[0];
                OutWardInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SingleOutWardInfo();
            }
            return ret;
        }

        /// <summary>return a free element to OutWardInfoCacheList</summary>
        public void ReturnOutWardInfoElement(global::cs.SingleOutWardInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < OutWardInfoCacheList.Count;  ++i)
            {
                if (OutWardInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                OutWardInfoCacheList.Add(element);
            }
        }

        /// <summary>get a free element from FightSoulInfoCacheList</summary>
        public global::cs.FightSoul GetFreeFightSoulInfoElement()
        {
            global::cs.FightSoul ret = null;
            if (FightSoulInfoCacheList.Count > 0)
            {
                 ret = FightSoulInfoCacheList[0];
                FightSoulInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.FightSoul();
            }
            return ret;
        }

        /// <summary>return a free element to FightSoulInfoCacheList</summary>
        public void ReturnFightSoulInfoElement(global::cs.FightSoul element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < FightSoulInfoCacheList.Count;  ++i)
            {
                if (FightSoulInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                FightSoulInfoCacheList.Add(element);
            }
        }

        /// <summary>get a free element from PositionStrengthenCacheList</summary>
        public global::cs.PositionStrengthenInfo GetFreePositionStrengthenElement()
        {
            global::cs.PositionStrengthenInfo ret = null;
            if (PositionStrengthenCacheList.Count > 0)
            {
                 ret = PositionStrengthenCacheList[0];
                PositionStrengthenCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.PositionStrengthenInfo();
            }
            return ret;
        }

        /// <summary>return a free element to PositionStrengthenCacheList</summary>
        public void ReturnPositionStrengthenElement(global::cs.PositionStrengthenInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < PositionStrengthenCacheList.Count;  ++i)
            {
                if (PositionStrengthenCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                PositionStrengthenCacheList.Add(element);
            }
        }
    }

    public partial class NpcDieLog
    {
        public NpcDieLog()
        {
            Clear();
        }
        public int iMonsterId { get; set; }

        public int iType { get; set; }

        public uint uTime { get; set; }

        public int iMapId { get; set; }

        public int iPosX { get; set; }

        public int iPosY { get; set; }

        public int iPosZ { get; set; }

        public int iReason { get; set; }


        public void Clear()
        {
            iMonsterId = 0;
            iType = 0;
            uTime = 0;
            iMapId = 0;
            iPosX = 0;
            iPosY = 0;
            iPosZ = 0;
            iReason = 0;
        }
    }

    /// <summary>
    /// <para>背包START</para>
    /// <para>基本信息</para>
    /// </summary>
    public partial class ItemBaseInfo
    {
        public ItemBaseInfo()
        {
            Clear();
        }
        /// <summary>所属包裹</summary>
        public uint BagType { get; set; }

        /// <summary>格子ID</summary>
        public uint SlotID { get; set; }

        /// <summary>物品GUID(GID)</summary>
        public global::cs.MyUint64 ItemGID { get; set; }

        /// <summary>ID</summary>
        public uint ItemNo { get; set; }

        /// <summary>获得时间</summary>
        public uint GetTime { get; set; }


        public void Clear()
        {
            BagType = 0;
            SlotID = 0;
            if (ItemGID != null)
            {
                ItemGID.Clear();
            }
            ItemNo = 0;
            GetTime = 0;
        }
    }

    /// <summary>属性</summary>
    public partial class AttrPair
    {
        public AttrPair()
        {
            Clear();
        }
        /// <summary>属性ID</summary>
        public uint Type { get; set; }

        /// <summary>属性值</summary>
        public uint Value { get; set; }

        /// <summary>属性随机比例</summary>
        public uint AttrRatio { get; set; }

        /// <summary>属性ID分类[防止一个属性ID无法区别是技能ID还是普通属性之类的]</summary>
        public uint AttrClass { get; set; }

        /// <summary>属性范围ID</summary>
        public uint AttrRangeID { get; set; }


        public void Clear()
        {
            Type = 0;
            Value = 0;
            AttrRatio = 0;
            AttrClass = 0;
            AttrRangeID = 0;
        }
    }

    /// <summary>装备属性信息</summary>
    public partial class EquipAttr
    {
        public EquipAttr()
        {
            stAttrPair = new List<global::cs.AttrPair>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for stAttrPair</summary>
        public List<global::cs.AttrPair> stAttrPairCacheList = new List<global::cs.AttrPair>(50);

        /// <summary>required uint32 Total = 2;</summary>
        public List<global::cs.AttrPair> stAttrPair { get; set; }


        public void Clear()
        {
            if (stAttrPair != null)
            {
                for (int i = 0; i < stAttrPair.Count;  ++i)
                {
                    stAttrPair[i].Clear();
                    ReturnstAttrPairElement(stAttrPair[i]);
                }
                stAttrPair.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            stAttrPairCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                stAttrPairCacheList.Add(new global::cs.AttrPair());
            }
        }

        /// <summary>get a free element from stAttrPairCacheList</summary>
        public global::cs.AttrPair GetFreestAttrPairElement()
        {
            global::cs.AttrPair ret = null;
            if (stAttrPairCacheList.Count > 0)
            {
                 ret = stAttrPairCacheList[0];
                stAttrPairCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AttrPair();
            }
            return ret;
        }

        /// <summary>return a free element to stAttrPairCacheList</summary>
        public void ReturnstAttrPairElement(global::cs.AttrPair element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < stAttrPairCacheList.Count;  ++i)
            {
                if (stAttrPairCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                stAttrPairCacheList.Add(element);
            }
        }
    }

    /// <summary>装备孔信息</summary>
    public partial class EquipHoleInfo
    {
        public EquipHoleInfo()
        {
            Clear();
        }
        /// <summary>孔类型 @cs_define_enum.EnmEquipHoleType</summary>
        public int HoleType { get; set; }

        /// <summary>孔序</summary>
        public int HoleOrder { get; set; }

        /// <summary>孔填充的物品ID</summary>
        public uint FillItemID { get; set; }


        public void Clear()
        {
            HoleType = 0;
            HoleOrder = 0;
            FillItemID = 0;
        }
    }

    /// <summary>格子信息</summary>
    public partial class SlotInfo
    {
        public SlotInfo()
        {
            Clear();
        }
        /// <summary>所属包裹 @cs_define_enum.EnmBagType</summary>
        public uint BagType { get; set; }

        /// <summary>格子ID</summary>
        public uint SlotID { get; set; }


        public void Clear()
        {
            BagType = 0;
            SlotID = 0;
        }
    }

    /// <summary> 装备信息（属于一种物品）</summary>
    public partial class Equip
    {
        public Equip()
        {
            EquipTypeID = global::cs.EnmEquipTypeID.ENM_EQUIP_TYPE_WEAPON;
            HoleList = new List<global::cs.EquipHoleInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for HoleList</summary>
        public List<global::cs.EquipHoleInfo> HoleListCacheList = new List<global::cs.EquipHoleInfo>(50);

        /// <summary>一件装备的属性列表</summary>
        public global::cs.EquipAttr stEquipAttr { get; set; }

        /// <summary>装备的基本信息</summary>
        public global::cs.ItemBaseInfo stBaseInfo { get; set; }

        /// <summary>装备的升星等级</summary>
        public uint StarLevel { get; set; }

        /// <summary>装备的强化等级（装备的强化属性不在这里添加了，现在是玩家身上的属性）</summary>
        public uint StrengthenLevel { get; set; }

        /// <summary>装备部位ID @see  cs_define_enum.proto[EnmEquipTypeID]</summary>
        public global::cs.EnmEquipTypeID EquipTypeID { get; set; }

        /// <summary>武器类型[剑枪拳EnmWeaponTypeID]</summary>
        public int WeaponID { get; set; }

        /// <summary>是否淬炼过[0未淬炼过,1淬炼过]</summary>
        public uint QuenchingFlag { get; set; }

        /// <summary>保存最近一次淬炼结果</summary>
        public global::cs.AttrPair StoreQuenchingAttr { get; set; }

        /// <summary>锁状态</summary>
        public uint Lock { get; set; }

        /// <summary>段数</summary>
        public uint EnhanceLevel { get; set; }

        /// <summary>段数养成点数</summary>
        public uint EnhancePoint { get; set; }

        /// <summary>装备孔信息</summary>
        public List<global::cs.EquipHoleInfo> HoleList { get; set; }

        /// <summary>装备鉴定标志</summary>
        public uint Identify { get; set; }


        public void Clear()
        {
            if (stEquipAttr != null)
            {
                stEquipAttr.Clear();
            }
            if (stBaseInfo != null)
            {
                stBaseInfo.Clear();
            }
            StarLevel = 0;
            StrengthenLevel = 0;
            WeaponID = 0;
            QuenchingFlag = 0;
            if (StoreQuenchingAttr != null)
            {
                StoreQuenchingAttr.Clear();
            }
            Lock = 0;
            EnhanceLevel = 0;
            EnhancePoint = 0;
            if (HoleList != null)
            {
                for (int i = 0; i < HoleList.Count;  ++i)
                {
                    HoleList[i].Clear();
                    ReturnHoleListElement(HoleList[i]);
                }
                HoleList.Clear();
            }
            Identify = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            HoleListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                HoleListCacheList.Add(new global::cs.EquipHoleInfo());
            }
        }

        /// <summary>get a free element from HoleListCacheList</summary>
        public global::cs.EquipHoleInfo GetFreeHoleListElement()
        {
            global::cs.EquipHoleInfo ret = null;
            if (HoleListCacheList.Count > 0)
            {
                 ret = HoleListCacheList[0];
                HoleListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.EquipHoleInfo();
            }
            return ret;
        }

        /// <summary>return a free element to HoleListCacheList</summary>
        public void ReturnHoleListElement(global::cs.EquipHoleInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < HoleListCacheList.Count;  ++i)
            {
                if (HoleListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                HoleListCacheList.Add(element);
            }
        }
    }

    /// <summary> 道具信息（属于一种物品）</summary>
    public partial class Good
    {
        public Good()
        {
            Clear();
        }
        /// <summary>基本信息</summary>
        public global::cs.ItemBaseInfo stBaseInfo { get; set; }

        /// <summary>计数</summary>
        public uint Count { get; set; }

        /// <summary>物品类型,客户端是否需要? (该字段值暂时没下发给客户端,可能以后要使用)</summary>
        public uint GoodType { get; set; }

        /// <summary>如果是技能书,0表示未学习,1表示已学习过</summary>
        public uint LearnFlag { get; set; }


        public void Clear()
        {
            if (stBaseInfo != null)
            {
                stBaseInfo.Clear();
            }
            Count = 0;
            GoodType = 0;
            LearnFlag = 0;
        }
    }

    /// <summary>
    /// <para> army添加的注释，不一定准确，server同事看到不对的请修改</para>
    /// <para> 对应某一类的背包</para>
    /// </summary>
    public partial class BagPair
    {
        public BagPair()
        {
            Clear();
        }
        public uint Type { get; set; }

        /// <summary> 背包类型，比如装备，道具，材料？see @cs_define_enum.proto BEnmBagType</summary>
        public uint IdleSize { get; set; }

        /// <summary> 空闲的数目</summary>
        public uint MaxSize { get; set; }


        public void Clear()
        {
            Type = 0;
            IdleSize = 0;
            MaxSize = 0;
        }
    }

    /// <summary> 所有背包本身的数据（不包含具体物品数据）</summary>
    public partial class BagInfo
    {
        public BagInfo()
        {
            stBagList = new List<global::cs.BagPair>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for stBagList</summary>
        public List<global::cs.BagPair> stBagListCacheList = new List<global::cs.BagPair>(50);

        public List<global::cs.BagPair> stBagList { get; set; }


        public void Clear()
        {
            if (stBagList != null)
            {
                for (int i = 0; i < stBagList.Count;  ++i)
                {
                    stBagList[i].Clear();
                    ReturnstBagListElement(stBagList[i]);
                }
                stBagList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            stBagListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                stBagListCacheList.Add(new global::cs.BagPair());
            }
        }

        /// <summary>get a free element from stBagListCacheList</summary>
        public global::cs.BagPair GetFreestBagListElement()
        {
            global::cs.BagPair ret = null;
            if (stBagListCacheList.Count > 0)
            {
                 ret = stBagListCacheList[0];
                stBagListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.BagPair();
            }
            return ret;
        }

        /// <summary>return a free element to stBagListCacheList</summary>
        public void ReturnstBagListElement(global::cs.BagPair element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < stBagListCacheList.Count;  ++i)
            {
                if (stBagListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                stBagListCacheList.Add(element);
            }
        }
    }

    /// <summary> 玩家的背包数据</summary>
    public partial class PlayerBagData
    {
        public PlayerBagData()
        {
            EquipList = new List<global::cs.Equip>();
            GoodList = new List<global::cs.Good>();
            TmpBagList = new List<global::cs.SelectGoods>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for EquipList</summary>
        public List<global::cs.Equip> EquipListCacheList = new List<global::cs.Equip>(50);

        /// <summary>a cache list for GoodList</summary>
        public List<global::cs.Good> GoodListCacheList = new List<global::cs.Good>(50);

        /// <summary>a cache list for TmpBagList</summary>
        public List<global::cs.SelectGoods> TmpBagListCacheList = new List<global::cs.SelectGoods>(50);

        /// <summary>玩家背包信息</summary>
        public global::cs.BagInfo BagInfo { get; set; }

        /// <summary>装备列表</summary>
        public List<global::cs.Equip> EquipList { get; set; }

        /// <summary>道具列表</summary>
        public List<global::cs.Good> GoodList { get; set; }

        /// <summary>临时背包</summary>
        public List<global::cs.SelectGoods> TmpBagList { get; set; }


        public void Clear()
        {
            if (BagInfo != null)
            {
                BagInfo.Clear();
            }
            if (EquipList != null)
            {
                for (int i = 0; i < EquipList.Count;  ++i)
                {
                    EquipList[i].Clear();
                    ReturnEquipListElement(EquipList[i]);
                }
                EquipList.Clear();
            }
            if (GoodList != null)
            {
                for (int i = 0; i < GoodList.Count;  ++i)
                {
                    GoodList[i].Clear();
                    ReturnGoodListElement(GoodList[i]);
                }
                GoodList.Clear();
            }
            if (TmpBagList != null)
            {
                for (int i = 0; i < TmpBagList.Count;  ++i)
                {
                    TmpBagList[i].Clear();
                    ReturnTmpBagListElement(TmpBagList[i]);
                }
                TmpBagList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            EquipListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                EquipListCacheList.Add(new global::cs.Equip());
            }
            GoodListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                GoodListCacheList.Add(new global::cs.Good());
            }
            TmpBagListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                TmpBagListCacheList.Add(new global::cs.SelectGoods());
            }
        }

        /// <summary>get a free element from EquipListCacheList</summary>
        public global::cs.Equip GetFreeEquipListElement()
        {
            global::cs.Equip ret = null;
            if (EquipListCacheList.Count > 0)
            {
                 ret = EquipListCacheList[0];
                EquipListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.Equip();
            }
            return ret;
        }

        /// <summary>return a free element to EquipListCacheList</summary>
        public void ReturnEquipListElement(global::cs.Equip element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < EquipListCacheList.Count;  ++i)
            {
                if (EquipListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                EquipListCacheList.Add(element);
            }
        }

        /// <summary>get a free element from GoodListCacheList</summary>
        public global::cs.Good GetFreeGoodListElement()
        {
            global::cs.Good ret = null;
            if (GoodListCacheList.Count > 0)
            {
                 ret = GoodListCacheList[0];
                GoodListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.Good();
            }
            return ret;
        }

        /// <summary>return a free element to GoodListCacheList</summary>
        public void ReturnGoodListElement(global::cs.Good element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < GoodListCacheList.Count;  ++i)
            {
                if (GoodListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                GoodListCacheList.Add(element);
            }
        }

        /// <summary>get a free element from TmpBagListCacheList</summary>
        public global::cs.SelectGoods GetFreeTmpBagListElement()
        {
            global::cs.SelectGoods ret = null;
            if (TmpBagListCacheList.Count > 0)
            {
                 ret = TmpBagListCacheList[0];
                TmpBagListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SelectGoods();
            }
            return ret;
        }

        /// <summary>return a free element to TmpBagListCacheList</summary>
        public void ReturnTmpBagListElement(global::cs.SelectGoods element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < TmpBagListCacheList.Count;  ++i)
            {
                if (TmpBagListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                TmpBagListCacheList.Add(element);
            }
        }
    }

    /// <summary>
    /// <para>背包END</para>
    /// <para> CS_TEST_HELLO_REQ = 1</para>
    /// </summary>
    public partial class CSTestHelloReq
    {
        public CSTestHelloReq()
        {
            Clear();
        }
        public string ask { get; set; }

        public string say { get; set; }


        public void Clear()
        {
            ask = "";
            say = "";
        }
    }

    /// <summary> CS_TEST_HELLO_RES = 2</summary>
    public partial class CSTestHelloRes
    {
        public CSTestHelloRes()
        {
            Clear();
        }
        public string ans { get; set; }

        public int val { get; set; }


        public void Clear()
        {
            ans = "";
            val = 0;
        }
    }

    /// <summary>玩家属性结构体</summary>
    public partial class AttrData
    {
        public AttrData()
        {
            Clear();
        }
        public int ikey { get; set; }

        /// <summary>属性可以对应玩家具体属性id</summary>
        public int uValue { get; set; }

        /// <summary>
        /// <para>如果属性数据为uint型用此数据</para>
        /// <para> optional MyUint64 uValue64  = 3;   //如果属性数据为uint型用此数据</para>
        /// </summary>
        public string stValue { get; set; }


        public void Clear()
        {
            ikey = 0;
            uValue = 0;
            stValue = "";
        }
    }

    /// <summary>技能残页信息</summary>
    public partial class AdvanceItemInfo
    {
        public AdvanceItemInfo()
        {
            Clear();
        }
        public global::cs.EnmAdvancePlaceType AdvancePlace { get; set; }

        /// <summary>进阶位置信息，从1开始</summary>
        public int ItemNo { get; set; }


        public void Clear()
        {
            AdvancePlace = 0;
            ItemNo = 0;
        }
    }

    /// <summary>单个技能学习</summary>
    public partial class OneSkillData
    {
        public OneSkillData()
        {
            CanYeInfo = new List<global::cs.AdvanceItemInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for CanYeInfo</summary>
        public List<global::cs.AdvanceItemInfo> CanYeInfoCacheList = new List<global::cs.AdvanceItemInfo>(50);

        public int SkillID { get; set; }

        /// <summary>技能id</summary>
        public int SkillLevel { get; set; }

        /// <summary>技能等级</summary>
        public global::cs.EnmSkillAdvanceType AdvanceType { get; set; }

        /// <summary>进阶类型,白，绿，蓝，紫</summary>
        public int AdvanceLevel { get; set; }

        /// <summary>进阶等级</summary>
        public List<global::cs.AdvanceItemInfo> CanYeInfo { get; set; }

        /// <summary>技能残页信息</summary>
        public int iActivateBit { get; set; }


        public void Clear()
        {
            SkillID = 0;
            SkillLevel = 0;
            AdvanceType = 0;
            AdvanceLevel = 0;
            if (CanYeInfo != null)
            {
                for (int i = 0; i < CanYeInfo.Count;  ++i)
                {
                    CanYeInfo[i].Clear();
                    ReturnCanYeInfoElement(CanYeInfo[i]);
                }
                CanYeInfo.Clear();
            }
            iActivateBit = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            CanYeInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                CanYeInfoCacheList.Add(new global::cs.AdvanceItemInfo());
            }
        }

        /// <summary>get a free element from CanYeInfoCacheList</summary>
        public global::cs.AdvanceItemInfo GetFreeCanYeInfoElement()
        {
            global::cs.AdvanceItemInfo ret = null;
            if (CanYeInfoCacheList.Count > 0)
            {
                 ret = CanYeInfoCacheList[0];
                CanYeInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AdvanceItemInfo();
            }
            return ret;
        }

        /// <summary>return a free element to CanYeInfoCacheList</summary>
        public void ReturnCanYeInfoElement(global::cs.AdvanceItemInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < CanYeInfoCacheList.Count;  ++i)
            {
                if (CanYeInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                CanYeInfoCacheList.Add(element);
            }
        }
    }

    /// <summary>单个技能秘笈信息</summary>
    public partial class OneSkillTipsData
    {
        public OneSkillTipsData()
        {
            TipsSkillInfo = new List<global::cs.OneSkillData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for TipsSkillInfo</summary>
        public List<global::cs.OneSkillData> TipsSkillInfoCacheList = new List<global::cs.OneSkillData>(50);

        public int TipsID { get; set; }

        /// <summary>所属技能书id</summary>
        public List<global::cs.OneSkillData> TipsSkillInfo { get; set; }

        /// <summary>技能秘笈上技能学习情况</summary>
        public int SpecialTipsBit { get; set; }


        public void Clear()
        {
            TipsID = 0;
            if (TipsSkillInfo != null)
            {
                for (int i = 0; i < TipsSkillInfo.Count;  ++i)
                {
                    TipsSkillInfo[i].Clear();
                    ReturnTipsSkillInfoElement(TipsSkillInfo[i]);
                }
                TipsSkillInfo.Clear();
            }
            SpecialTipsBit = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            TipsSkillInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                TipsSkillInfoCacheList.Add(new global::cs.OneSkillData());
            }
        }

        /// <summary>get a free element from TipsSkillInfoCacheList</summary>
        public global::cs.OneSkillData GetFreeTipsSkillInfoElement()
        {
            global::cs.OneSkillData ret = null;
            if (TipsSkillInfoCacheList.Count > 0)
            {
                 ret = TipsSkillInfoCacheList[0];
                TipsSkillInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.OneSkillData();
            }
            return ret;
        }

        /// <summary>return a free element to TipsSkillInfoCacheList</summary>
        public void ReturnTipsSkillInfoElement(global::cs.OneSkillData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < TipsSkillInfoCacheList.Count;  ++i)
            {
                if (TipsSkillInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                TipsSkillInfoCacheList.Add(element);
            }
        }
    }

    /// <summary>单个技能槽装备技能情况</summary>
    public partial class OneButtonSlotInfo
    {
        public OneButtonSlotInfo()
        {
            Clear();
        }
        public global::cs.EnmSkillButtonSlot ButtonSlotType { get; set; }

        /// <summary>button上技能顺序槽枚举</summary>
        public int TipsID { get; set; }

        /// <summary>技能书ID</summary>
        public int SkillID { get; set; }


        public void Clear()
        {
            ButtonSlotType = 0;
            TipsID = 0;
            SkillID = 0;
        }
    }

    /// <summary>单个技能配置</summary>
    public partial class OneSkillButtonData
    {
        public OneSkillButtonData()
        {
            AllSlotSkillInfo = new List<global::cs.OneButtonSlotInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AllSlotSkillInfo</summary>
        public List<global::cs.OneButtonSlotInfo> AllSlotSkillInfoCacheList = new List<global::cs.OneButtonSlotInfo>(50);

        public int SkillType { get; set; }

        /// <summary>技能类型(普通，主动，被动, 怒气，闪避)</summary>
        public global::cs.EnmSkillButton ButtonType { get; set; }

        /// <summary>按钮类型id(普通施放，和三个主动)</summary>
        public List<global::cs.OneButtonSlotInfo> AllSlotSkillInfo { get; set; }


        public void Clear()
        {
            SkillType = 0;
            ButtonType = 0;
            if (AllSlotSkillInfo != null)
            {
                for (int i = 0; i < AllSlotSkillInfo.Count;  ++i)
                {
                    AllSlotSkillInfo[i].Clear();
                    ReturnAllSlotSkillInfoElement(AllSlotSkillInfo[i]);
                }
                AllSlotSkillInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AllSlotSkillInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AllSlotSkillInfoCacheList.Add(new global::cs.OneButtonSlotInfo());
            }
        }

        /// <summary>get a free element from AllSlotSkillInfoCacheList</summary>
        public global::cs.OneButtonSlotInfo GetFreeAllSlotSkillInfoElement()
        {
            global::cs.OneButtonSlotInfo ret = null;
            if (AllSlotSkillInfoCacheList.Count > 0)
            {
                 ret = AllSlotSkillInfoCacheList[0];
                AllSlotSkillInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.OneButtonSlotInfo();
            }
            return ret;
        }

        /// <summary>return a free element to AllSlotSkillInfoCacheList</summary>
        public void ReturnAllSlotSkillInfoElement(global::cs.OneButtonSlotInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AllSlotSkillInfoCacheList.Count;  ++i)
            {
                if (AllSlotSkillInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AllSlotSkillInfoCacheList.Add(element);
            }
        }
    }

    /// <summary>单个所属武器技能配置情况</summary>
    public partial class OneWeaponButtonData
    {
        public OneWeaponButtonData()
        {
            AllWeaponButtonInfo = new List<global::cs.OneSkillButtonData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AllWeaponButtonInfo</summary>
        public List<global::cs.OneSkillButtonData> AllWeaponButtonInfoCacheList = new List<global::cs.OneSkillButtonData>(50);

        public global::cs.EnmWeaponTypeID WeaponType { get; set; }

        /// <summary>武器类型</summary>
        public List<global::cs.OneSkillButtonData> AllWeaponButtonInfo { get; set; }


        public void Clear()
        {
            WeaponType = 0;
            if (AllWeaponButtonInfo != null)
            {
                for (int i = 0; i < AllWeaponButtonInfo.Count;  ++i)
                {
                    AllWeaponButtonInfo[i].Clear();
                    ReturnAllWeaponButtonInfoElement(AllWeaponButtonInfo[i]);
                }
                AllWeaponButtonInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AllWeaponButtonInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AllWeaponButtonInfoCacheList.Add(new global::cs.OneSkillButtonData());
            }
        }

        /// <summary>get a free element from AllWeaponButtonInfoCacheList</summary>
        public global::cs.OneSkillButtonData GetFreeAllWeaponButtonInfoElement()
        {
            global::cs.OneSkillButtonData ret = null;
            if (AllWeaponButtonInfoCacheList.Count > 0)
            {
                 ret = AllWeaponButtonInfoCacheList[0];
                AllWeaponButtonInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.OneSkillButtonData();
            }
            return ret;
        }

        /// <summary>return a free element to AllWeaponButtonInfoCacheList</summary>
        public void ReturnAllWeaponButtonInfoElement(global::cs.OneSkillButtonData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AllWeaponButtonInfoCacheList.Count;  ++i)
            {
                if (AllWeaponButtonInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AllWeaponButtonInfoCacheList.Add(element);
            }
        }
    }

    /// <summary>玩家身上技能信息Skill信息</summary>
    public partial class SkillRoleInfo
    {
        public SkillRoleInfo()
        {
            AllSkillTipsInfo = new List<global::cs.OneSkillTipsData>();
            AllWeaponButtonInfo = new List<global::cs.OneWeaponButtonData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AllSkillTipsInfo</summary>
        public List<global::cs.OneSkillTipsData> AllSkillTipsInfoCacheList = new List<global::cs.OneSkillTipsData>(50);

        /// <summary>a cache list for AllWeaponButtonInfo</summary>
        public List<global::cs.OneWeaponButtonData> AllWeaponButtonInfoCacheList = new List<global::cs.OneWeaponButtonData>(50);

        /// <summary>技能所有学习情况</summary>
        public List<global::cs.OneSkillTipsData> AllSkillTipsInfo { get; set; }

        /// <summary>
        /// <para>已经学习的技能信息</para>
        /// <para>玩家所有武器技能装备情况</para>
        /// </summary>
        public List<global::cs.OneWeaponButtonData> AllWeaponButtonInfo { get; set; }


        public void Clear()
        {
            if (AllSkillTipsInfo != null)
            {
                for (int i = 0; i < AllSkillTipsInfo.Count;  ++i)
                {
                    AllSkillTipsInfo[i].Clear();
                    ReturnAllSkillTipsInfoElement(AllSkillTipsInfo[i]);
                }
                AllSkillTipsInfo.Clear();
            }
            if (AllWeaponButtonInfo != null)
            {
                for (int i = 0; i < AllWeaponButtonInfo.Count;  ++i)
                {
                    AllWeaponButtonInfo[i].Clear();
                    ReturnAllWeaponButtonInfoElement(AllWeaponButtonInfo[i]);
                }
                AllWeaponButtonInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AllSkillTipsInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AllSkillTipsInfoCacheList.Add(new global::cs.OneSkillTipsData());
            }
            AllWeaponButtonInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AllWeaponButtonInfoCacheList.Add(new global::cs.OneWeaponButtonData());
            }
        }

        /// <summary>get a free element from AllSkillTipsInfoCacheList</summary>
        public global::cs.OneSkillTipsData GetFreeAllSkillTipsInfoElement()
        {
            global::cs.OneSkillTipsData ret = null;
            if (AllSkillTipsInfoCacheList.Count > 0)
            {
                 ret = AllSkillTipsInfoCacheList[0];
                AllSkillTipsInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.OneSkillTipsData();
            }
            return ret;
        }

        /// <summary>return a free element to AllSkillTipsInfoCacheList</summary>
        public void ReturnAllSkillTipsInfoElement(global::cs.OneSkillTipsData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AllSkillTipsInfoCacheList.Count;  ++i)
            {
                if (AllSkillTipsInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AllSkillTipsInfoCacheList.Add(element);
            }
        }

        /// <summary>get a free element from AllWeaponButtonInfoCacheList</summary>
        public global::cs.OneWeaponButtonData GetFreeAllWeaponButtonInfoElement()
        {
            global::cs.OneWeaponButtonData ret = null;
            if (AllWeaponButtonInfoCacheList.Count > 0)
            {
                 ret = AllWeaponButtonInfoCacheList[0];
                AllWeaponButtonInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.OneWeaponButtonData();
            }
            return ret;
        }

        /// <summary>return a free element to AllWeaponButtonInfoCacheList</summary>
        public void ReturnAllWeaponButtonInfoElement(global::cs.OneWeaponButtonData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AllWeaponButtonInfoCacheList.Count;  ++i)
            {
                if (AllWeaponButtonInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AllWeaponButtonInfoCacheList.Add(element);
            }
        }
    }

    /// <summary> 三元组，用于表示方向、位置</summary>
    public partial class Triple
    {
        public Triple()
        {
            Clear();
        }
        public int x { get; set; }

        public int y { get; set; }

        public int z { get; set; }


        public void Clear()
        {
            x = 0;
            y = 0;
            z = 0;
        }
    }

    /// <summary> 进入视野的玩家信息</summary>
    public partial class HeroEnterViewInfo
    {
        public HeroEnterViewInfo()
        {
            AttrList = new List<global::cs.AttrData>();
            Buff = new List<global::cs.SingleBuffInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AttrList</summary>
        public List<global::cs.AttrData> AttrListCacheList = new List<global::cs.AttrData>(50);

        /// <summary>a cache list for Buff</summary>
        public List<global::cs.SingleBuffInfo> BuffCacheList = new List<global::cs.SingleBuffInfo>(50);

        /// <summary> 玩家账号 id</summary>
        public global::cs.MyUint64 RoleID { get; set; }

        /// <summary> 移动方向</summary>
        public global::cs.Triple Direct { get; set; }

        /// <summary> 位置</summary>
        public global::cs.Triple Pos { get; set; }

        /// <summary> 速度 m/s</summary>
        public uint Speed { get; set; }

        /// <summary> 角色名字</summary>
        public string RoleName { get; set; }

        /// <summary> 属性列表</summary>
        public List<global::cs.AttrData> AttrList { get; set; }

        /// <summary>自身除key-value外actor属性</summary>
        public global::cs.ViewOtherInfo OtherView { get; set; }

        /// <summary>
        /// <para>视野中其他属性</para>
        /// <para>buff数据</para>
        /// </summary>
        public List<global::cs.SingleBuffInfo> Buff { get; set; }

        /// <summary>帮会id</summary>
        public global::cs.MyUint64 FactionID { get; set; }


        public void Clear()
        {
            if (RoleID != null)
            {
                RoleID.Clear();
            }
            if (Direct != null)
            {
                Direct.Clear();
            }
            if (Pos != null)
            {
                Pos.Clear();
            }
            Speed = 0;
            RoleName = "";
            if (AttrList != null)
            {
                for (int i = 0; i < AttrList.Count;  ++i)
                {
                    AttrList[i].Clear();
                    ReturnAttrListElement(AttrList[i]);
                }
                AttrList.Clear();
            }
            if (OtherView != null)
            {
                OtherView.Clear();
            }
            if (Buff != null)
            {
                for (int i = 0; i < Buff.Count;  ++i)
                {
                    Buff[i].Clear();
                    ReturnBuffElement(Buff[i]);
                }
                Buff.Clear();
            }
            if (FactionID != null)
            {
                FactionID.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AttrListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AttrListCacheList.Add(new global::cs.AttrData());
            }
            BuffCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                BuffCacheList.Add(new global::cs.SingleBuffInfo());
            }
        }

        /// <summary>get a free element from AttrListCacheList</summary>
        public global::cs.AttrData GetFreeAttrListElement()
        {
            global::cs.AttrData ret = null;
            if (AttrListCacheList.Count > 0)
            {
                 ret = AttrListCacheList[0];
                AttrListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AttrData();
            }
            return ret;
        }

        /// <summary>return a free element to AttrListCacheList</summary>
        public void ReturnAttrListElement(global::cs.AttrData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AttrListCacheList.Count;  ++i)
            {
                if (AttrListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AttrListCacheList.Add(element);
            }
        }

        /// <summary>get a free element from BuffCacheList</summary>
        public global::cs.SingleBuffInfo GetFreeBuffElement()
        {
            global::cs.SingleBuffInfo ret = null;
            if (BuffCacheList.Count > 0)
            {
                 ret = BuffCacheList[0];
                BuffCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SingleBuffInfo();
            }
            return ret;
        }

        /// <summary>return a free element to BuffCacheList</summary>
        public void ReturnBuffElement(global::cs.SingleBuffInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < BuffCacheList.Count;  ++i)
            {
                if (BuffCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                BuffCacheList.Add(element);
            }
        }
    }

    /// <summary> 进入视野的 npc 信息</summary>
    public partial class NpcEnterViewInfo
    {
        public NpcEnterViewInfo()
        {
            AttrList = new List<global::cs.AttrData>();
            Buff = new List<global::cs.SingleBuffInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AttrList</summary>
        public List<global::cs.AttrData> AttrListCacheList = new List<global::cs.AttrData>(50);

        /// <summary>a cache list for Buff</summary>
        public List<global::cs.SingleBuffInfo> BuffCacheList = new List<global::cs.SingleBuffInfo>(50);

        /// <summary> npc GID, 全局唯一的 ID</summary>
        public global::cs.MyUint64 ActorID { get; set; }

        /// <summary> npc id，表格里的 id</summary>
        public uint NpcID { get; set; }

        /// <summary> 移动方向</summary>
        public global::cs.Triple Direct { get; set; }

        /// <summary> 位置</summary>
        public global::cs.Triple Pos { get; set; }

        /// <summary> 速度 m/s</summary>
        public uint Speed { get; set; }

        /// <summary> 属性列表</summary>
        public List<global::cs.AttrData> AttrList { get; set; }

        /// <summary>缩放比例</summary>
        public global::cs.Triple Scale { get; set; }

        /// <summary>召唤npc的主人ID</summary>
        public global::cs.MyUint64 MasterID { get; set; }

        /// <summary>子弹类npc做技能的主客户端userID</summary>
        public global::cs.MyUint64 DoSkillUserID { get; set; }

        /// <summary>buff数据</summary>
        public List<global::cs.SingleBuffInfo> Buff { get; set; }

        /// <summary>是否出生进入视野</summary>
        public bool IsBirth { get; set; }


        public void Clear()
        {
            if (ActorID != null)
            {
                ActorID.Clear();
            }
            NpcID = 0;
            if (Direct != null)
            {
                Direct.Clear();
            }
            if (Pos != null)
            {
                Pos.Clear();
            }
            Speed = 0;
            if (AttrList != null)
            {
                for (int i = 0; i < AttrList.Count;  ++i)
                {
                    AttrList[i].Clear();
                    ReturnAttrListElement(AttrList[i]);
                }
                AttrList.Clear();
            }
            if (Scale != null)
            {
                Scale.Clear();
            }
            if (MasterID != null)
            {
                MasterID.Clear();
            }
            if (DoSkillUserID != null)
            {
                DoSkillUserID.Clear();
            }
            if (Buff != null)
            {
                for (int i = 0; i < Buff.Count;  ++i)
                {
                    Buff[i].Clear();
                    ReturnBuffElement(Buff[i]);
                }
                Buff.Clear();
            }
            IsBirth = false;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AttrListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AttrListCacheList.Add(new global::cs.AttrData());
            }
            BuffCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                BuffCacheList.Add(new global::cs.SingleBuffInfo());
            }
        }

        /// <summary>get a free element from AttrListCacheList</summary>
        public global::cs.AttrData GetFreeAttrListElement()
        {
            global::cs.AttrData ret = null;
            if (AttrListCacheList.Count > 0)
            {
                 ret = AttrListCacheList[0];
                AttrListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AttrData();
            }
            return ret;
        }

        /// <summary>return a free element to AttrListCacheList</summary>
        public void ReturnAttrListElement(global::cs.AttrData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AttrListCacheList.Count;  ++i)
            {
                if (AttrListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AttrListCacheList.Add(element);
            }
        }

        /// <summary>get a free element from BuffCacheList</summary>
        public global::cs.SingleBuffInfo GetFreeBuffElement()
        {
            global::cs.SingleBuffInfo ret = null;
            if (BuffCacheList.Count > 0)
            {
                 ret = BuffCacheList[0];
                BuffCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SingleBuffInfo();
            }
            return ret;
        }

        /// <summary>return a free element to BuffCacheList</summary>
        public void ReturnBuffElement(global::cs.SingleBuffInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < BuffCacheList.Count;  ++i)
            {
                if (BuffCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                BuffCacheList.Add(element);
            }
        }
    }

    /// <summary>物品ID和个数</summary>
    public partial class SelectGoods
    {
        public SelectGoods()
        {
            Clear();
        }
        /// <summary>物品ID</summary>
        public uint ItemNo { get; set; }

        /// <summary>个数</summary>
        public uint Num { get; set; }


        public void Clear()
        {
            ItemNo = 0;
            Num = 0;
        }
    }

    /// <summary>阵营属性组</summary>
    public partial class CampAttr
    {
        public CampAttr()
        {
            Clear();
        }
        public int iKey { get; set; }

        public int iValue { get; set; }


        public void Clear()
        {
            iKey = 0;
            iValue = 0;
        }
    }

    /// <summary>附件</summary>
    public partial class Appendix
    {
        public Appendix()
        {
            PositionStrengLevel = 0;
            Clear();
        }
        /// <summary>装备</summary>
        public global::cs.Equip EquipAppendix { get; set; }

        /// <summary>道具</summary>
        public global::cs.Good GoodAppendix { get; set; }

        /// <summary>如果是装备发送改装备部位强化等级</summary>
        public int PositionStrengLevel { get; set; }


        public void Clear()
        {
            if (EquipAppendix != null)
            {
                EquipAppendix.Clear();
            }
            if (GoodAppendix != null)
            {
                GoodAppendix.Clear();
            }
        }
    }

    public partial class ChatPlayerInfo
    {
        public ChatPlayerInfo()
        {
            Clear();
        }
        /// <summary> 发送者角色ID</summary>
        public ulong RoleID { get; set; }

        /// <summary> 发送者名称</summary>
        public string RoleName { get; set; }

        /// <summary> 玩家等级</summary>
        public int RoleGrade { get; set; }

        /// <summary> 玩家职业 @see EnmWeaponTypeID</summary>
        public int WeaponType { get; set; }


        public void Clear()
        {
            RoleID = 0;
            RoleName = "";
            RoleGrade = 0;
            WeaponType = 0;
        }
    }

    /// <summary>玩家私聊消息数据</summary>
    public partial class PlayerChatData
    {
        public PlayerChatData()
        {
            PlayerChatInfo = new List<global::cs.PlayerChatData.ChatData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for PlayerChatInfo</summary>
        public List<global::cs.PlayerChatData.ChatData> PlayerChatInfoCacheList = new List<global::cs.PlayerChatData.ChatData>(50);

        /// <summary> 玩家离线聊天消息</summary>
        public List<global::cs.PlayerChatData.ChatData> PlayerChatInfo { get; set; }


        public void Clear()
        {
            if (PlayerChatInfo != null)
            {
                for (int i = 0; i < PlayerChatInfo.Count;  ++i)
                {
                    PlayerChatInfo[i].Clear();
                    ReturnPlayerChatInfoElement(PlayerChatInfo[i]);
                }
                PlayerChatInfo.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            PlayerChatInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                PlayerChatInfoCacheList.Add(new global::cs.PlayerChatData.ChatData());
            }
        }

        /// <summary>get a free element from PlayerChatInfoCacheList</summary>
        public global::cs.PlayerChatData.ChatData GetFreePlayerChatInfoElement()
        {
            global::cs.PlayerChatData.ChatData ret = null;
            if (PlayerChatInfoCacheList.Count > 0)
            {
                 ret = PlayerChatInfoCacheList[0];
                PlayerChatInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.PlayerChatData.ChatData();
            }
            return ret;
        }

        /// <summary>return a free element to PlayerChatInfoCacheList</summary>
        public void ReturnPlayerChatInfoElement(global::cs.PlayerChatData.ChatData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < PlayerChatInfoCacheList.Count;  ++i)
            {
                if (PlayerChatInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                PlayerChatInfoCacheList.Add(element);
            }
        }
        /// <summary> 一条消息记录</summary>
        public partial class ChatMsg
        {
            public ChatMsg()
            {
                Clear();
            }
            /// <summary> 聊天消息接收时间</summary>
            public uint ReceiveTime { get; set; }

            /// <summary> 聊天消息</summary>
            public string ChatMessage { get; set; }


            public void Clear()
            {
                ReceiveTime = 0;
                ChatMessage = "";
            }
        }

        /// <summary> 聊天数据</summary>
        public partial class ChatData
        {
            public ChatData()
            {
                ChatContent = new List<global::cs.PlayerChatData.ChatMsg>();
                InitAllCacheList();
                Clear();
            }
            /// <summary>a cache list for ChatContent</summary>
            public List<global::cs.PlayerChatData.ChatMsg> ChatContentCacheList = new List<global::cs.PlayerChatData.ChatMsg>(50);

            /// <summary> 聊天玩家信息</summary>
            public global::cs.ChatPlayerInfo BaseInfo { get; set; }

            /// <summary> 聊天内容</summary>
            public List<global::cs.PlayerChatData.ChatMsg> ChatContent { get; set; }


            public void Clear()
            {
                if (BaseInfo != null)
                {
                    BaseInfo.Clear();
                }
                if (ChatContent != null)
                {
                    for (int i = 0; i < ChatContent.Count;  ++i)
                    {
                        ChatContent[i].Clear();
                        ReturnChatContentElement(ChatContent[i]);
                    }
                    ChatContent.Clear();
                }
            }

            /// <summary>init all the cache lists</summary>
            public void InitAllCacheList()
            {
                ChatContentCacheList.Clear();
                for (int i = 0; i < 50; ++i)
                {
                    ChatContentCacheList.Add(new global::cs.PlayerChatData.ChatMsg());
                }
            }

            /// <summary>get a free element from ChatContentCacheList</summary>
            public global::cs.PlayerChatData.ChatMsg GetFreeChatContentElement()
            {
                global::cs.PlayerChatData.ChatMsg ret = null;
                if (ChatContentCacheList.Count > 0)
                {
                     ret = ChatContentCacheList[0];
                    ChatContentCacheList.RemoveAt(0);
                }
                else
                {
                     ret = new global::cs.PlayerChatData.ChatMsg();
                }
                return ret;
            }

            /// <summary>return a free element to ChatContentCacheList</summary>
            public void ReturnChatContentElement(global::cs.PlayerChatData.ChatMsg element)
            {
                bool alreadyInList = false;
                for (int i = 0; i < ChatContentCacheList.Count;  ++i)
                {
                    if (ChatContentCacheList[i] == element)
                    {
                        alreadyInList = true;
                        break;
                    }
                }
                if (!alreadyInList)
                {
                    element.Clear();
                    ChatContentCacheList.Add(element);
                }
            }
        }

    }

    /// <summary>单个buff信息</summary>
    public partial class SingleBuffInfo
    {
        public SingleBuffInfo()
        {
            Clear();
        }
        public uint uiBuffID { get; set; }

        /// <summary>buffid</summary>
        public uint uiLastTime { get; set; }

        /// <summary>buff剩余时长</summary>
        public uint uiBuffLevel { get; set; }


        public void Clear()
        {
            uiBuffID = 0;
            uiLastTime = 0;
            uiBuffLevel = 0;
        }
    }

    public partial class SingleOutWardInfo
    {
        public SingleOutWardInfo()
        {
            Clear();
        }
        /// <summary> 外观部位类型 @EnmOutWardPartType</summary>
        public uint OutWardPartType { get; set; }

        /// <summary> 外观ID</summary>
        public uint OutWardID { get; set; }


        public void Clear()
        {
            OutWardPartType = 0;
            OutWardID = 0;
        }
    }

    public partial class RideInfo
    {
        public RideInfo()
        {
            Clear();
        }
        /// <summary>坐骑id</summary>
        public uint RideID { get; set; }

        /// <summary>@cs_define_enum.EnmRideActionType</summary>
        public int ActionType { get; set; }


        public void Clear()
        {
            RideID = 0;
            ActionType = 0;
        }
    }

    /// <summary>视野中其他对象信息</summary>
    public partial class ViewOtherInfo
    {
        public ViewOtherInfo()
        {
            OutWardInfo = new List<global::cs.SingleOutWardInfo>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for OutWardInfo</summary>
        public List<global::cs.SingleOutWardInfo> OutWardInfoCacheList = new List<global::cs.SingleOutWardInfo>(50);

        public uint uiClothseID { get; set; }

        /// <summary>上衣id</summary>
        public uint uiWeaponID { get; set; }

        /// <summary>武器id</summary>
        public List<global::cs.SingleOutWardInfo> OutWardInfo { get; set; }

        /// <summary>外观信息</summary>
        public global::cs.RideInfo RideInfo { get; set; }

        /// <summary>坐骑信息</summary>
        public uint PickState { get; set; }


        public void Clear()
        {
            uiClothseID = 0;
            uiWeaponID = 0;
            if (OutWardInfo != null)
            {
                for (int i = 0; i < OutWardInfo.Count;  ++i)
                {
                    OutWardInfo[i].Clear();
                    ReturnOutWardInfoElement(OutWardInfo[i]);
                }
                OutWardInfo.Clear();
            }
            if (RideInfo != null)
            {
                RideInfo.Clear();
            }
            PickState = 0;
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            OutWardInfoCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                OutWardInfoCacheList.Add(new global::cs.SingleOutWardInfo());
            }
        }

        /// <summary>get a free element from OutWardInfoCacheList</summary>
        public global::cs.SingleOutWardInfo GetFreeOutWardInfoElement()
        {
            global::cs.SingleOutWardInfo ret = null;
            if (OutWardInfoCacheList.Count > 0)
            {
                 ret = OutWardInfoCacheList[0];
                OutWardInfoCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.SingleOutWardInfo();
            }
            return ret;
        }

        /// <summary>return a free element to OutWardInfoCacheList</summary>
        public void ReturnOutWardInfoElement(global::cs.SingleOutWardInfo element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < OutWardInfoCacheList.Count;  ++i)
            {
                if (OutWardInfoCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                OutWardInfoCacheList.Add(element);
            }
        }
    }

    /// <summary>打造广播消息</summary>
    public partial class ForgeMsg
    {
        public ForgeMsg()
        {
            Clear();
        }
        /// <summary>role name</summary>
        public string Rolename { get; set; }

        /// <summary>序列号</summary>
        public uint MsgID { get; set; }

        /// <summary>equip</summary>
        public global::cs.Equip EquipInfo { get; set; }


        public void Clear()
        {
            Rolename = "";
            MsgID = 0;
            if (EquipInfo != null)
            {
                EquipInfo.Clear();
            }
        }
    }

    /// <summary>广播消息 CS_BROAD_MSG_NOTIFY = 2296</summary>
    public partial class CSBroadForgeEquipNotify
    {
        public CSBroadForgeEquipNotify()
        {
            MsgList = new List<global::cs.ForgeMsg>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for MsgList</summary>
        public List<global::cs.ForgeMsg> MsgListCacheList = new List<global::cs.ForgeMsg>(50);

        /// <summary>消息体</summary>
        public List<global::cs.ForgeMsg> MsgList { get; set; }


        public void Clear()
        {
            if (MsgList != null)
            {
                for (int i = 0; i < MsgList.Count;  ++i)
                {
                    MsgList[i].Clear();
                    ReturnMsgListElement(MsgList[i]);
                }
                MsgList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            MsgListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                MsgListCacheList.Add(new global::cs.ForgeMsg());
            }
        }

        /// <summary>get a free element from MsgListCacheList</summary>
        public global::cs.ForgeMsg GetFreeMsgListElement()
        {
            global::cs.ForgeMsg ret = null;
            if (MsgListCacheList.Count > 0)
            {
                 ret = MsgListCacheList[0];
                MsgListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.ForgeMsg();
            }
            return ret;
        }

        /// <summary>return a free element to MsgListCacheList</summary>
        public void ReturnMsgListElement(global::cs.ForgeMsg element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < MsgListCacheList.Count;  ++i)
            {
                if (MsgListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                MsgListCacheList.Add(element);
            }
        }
    }

    public partial class RoleAttr
    {
        public RoleAttr()
        {
            AttrList = new List<global::cs.AttrData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for AttrList</summary>
        public List<global::cs.AttrData> AttrListCacheList = new List<global::cs.AttrData>(50);

        public List<global::cs.AttrData> AttrList { get; set; }


        public void Clear()
        {
            if (AttrList != null)
            {
                for (int i = 0; i < AttrList.Count;  ++i)
                {
                    AttrList[i].Clear();
                    ReturnAttrListElement(AttrList[i]);
                }
                AttrList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            AttrListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AttrListCacheList.Add(new global::cs.AttrData());
            }
        }

        /// <summary>get a free element from AttrListCacheList</summary>
        public global::cs.AttrData GetFreeAttrListElement()
        {
            global::cs.AttrData ret = null;
            if (AttrListCacheList.Count > 0)
            {
                 ret = AttrListCacheList[0];
                AttrListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AttrData();
            }
            return ret;
        }

        /// <summary>return a free element to AttrListCacheList</summary>
        public void ReturnAttrListElement(global::cs.AttrData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AttrListCacheList.Count;  ++i)
            {
                if (AttrListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AttrListCacheList.Add(element);
            }
        }
    }

    /// <summary> CS_OSS_LOG_REQ = 2356; 客户端上报 oss 日志</summary>
    public partial class CSOSSLogReq
    {
        public CSOSSLogReq()
        {
            Clear();
        }
        public byte[] OSSLog { get; set; }


        public void Clear()
        {
        }
    }

    /// <summary>坐标</summary>
    public partial class ReviveLocID
    {
        public ReviveLocID()
        {
            Clear();
        }
        public int LocID { get; set; }


        public void Clear()
        {
            LocID = 0;
        }
    }

    public partial class FightSoul
    {
        public FightSoul()
        {
            Clear();
        }
        /// <summary>武魂ID</summary>
        public uint SoulID { get; set; }

        /// <summary>武魂等级</summary>
        public uint SoulGrade { get; set; }


        public void Clear()
        {
            SoulID = 0;
            SoulGrade = 0;
        }
    }

    public partial class OfflineExp
    {
        public OfflineExp()
        {
            Clear();
        }
        /// <summary>离线时间</summary>
        public uint OfflineTime { get; set; }

        /// <summary>免费托管经验</summary>
        public uint FreeOfflineExp { get; set; }

        /// <summary>三秋丹倍率</summary>
        public uint SanQiuDanRate { get; set; }

        /// <summary>三秋丹单价</summary>
        public uint SanQiuDanPrice { get; set; }


        public void Clear()
        {
            OfflineTime = 0;
            FreeOfflineExp = 0;
            SanQiuDanRate = 0;
            SanQiuDanPrice = 0;
        }
    }

    public partial class PositionStrengthenInfo
    {
        public PositionStrengthenInfo()
        {
            Clear();
        }
        /// <summary>position id</summary>
        public uint PositionID { get; set; }

        /// <summary>现在等级</summary>
        public uint StrengLevel { get; set; }

        /// <summary>额外加成几率</summary>
        public uint ExtraAddRate { get; set; }


        public void Clear()
        {
            PositionID = 0;
            StrengLevel = 0;
            ExtraAddRate = 0;
        }
    }

    /// <summary>玩家战斗数据</summary>
    public partial class PlayerFightInfo
    {
        public PlayerFightInfo()
        {
            EquipList = new List<global::cs.Equip>();
            AttrList = new List<global::cs.AttrData>();
            InitAllCacheList();
            Clear();
        }
        /// <summary>a cache list for EquipList</summary>
        public List<global::cs.Equip> EquipListCacheList = new List<global::cs.Equip>(50);

        /// <summary>a cache list for AttrList</summary>
        public List<global::cs.AttrData> AttrListCacheList = new List<global::cs.AttrData>(50);

        public global::cs.MyUint64 RoleID { get; set; }

        public string RoleName { get; set; }

        public uint Weapon { get; set; }

        public uint Level { get; set; }

        public global::cs.ViewOtherInfo viewInfo { get; set; }

        /// <summary> 装备</summary>
        public List<global::cs.Equip> EquipList { get; set; }

        /// <summary> 技能</summary>
        public global::cs.SkillRoleInfo SkillData { get; set; }

        /// <summary> 玩家基础属性</summary>
        public List<global::cs.AttrData> AttrList { get; set; }


        public void Clear()
        {
            if (RoleID != null)
            {
                RoleID.Clear();
            }
            RoleName = "";
            Weapon = 0;
            Level = 0;
            if (viewInfo != null)
            {
                viewInfo.Clear();
            }
            if (EquipList != null)
            {
                for (int i = 0; i < EquipList.Count;  ++i)
                {
                    EquipList[i].Clear();
                    ReturnEquipListElement(EquipList[i]);
                }
                EquipList.Clear();
            }
            if (SkillData != null)
            {
                SkillData.Clear();
            }
            if (AttrList != null)
            {
                for (int i = 0; i < AttrList.Count;  ++i)
                {
                    AttrList[i].Clear();
                    ReturnAttrListElement(AttrList[i]);
                }
                AttrList.Clear();
            }
        }

        /// <summary>init all the cache lists</summary>
        public void InitAllCacheList()
        {
            EquipListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                EquipListCacheList.Add(new global::cs.Equip());
            }
            AttrListCacheList.Clear();
            for (int i = 0; i < 50; ++i)
            {
                AttrListCacheList.Add(new global::cs.AttrData());
            }
        }

        /// <summary>get a free element from EquipListCacheList</summary>
        public global::cs.Equip GetFreeEquipListElement()
        {
            global::cs.Equip ret = null;
            if (EquipListCacheList.Count > 0)
            {
                 ret = EquipListCacheList[0];
                EquipListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.Equip();
            }
            return ret;
        }

        /// <summary>return a free element to EquipListCacheList</summary>
        public void ReturnEquipListElement(global::cs.Equip element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < EquipListCacheList.Count;  ++i)
            {
                if (EquipListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                EquipListCacheList.Add(element);
            }
        }

        /// <summary>get a free element from AttrListCacheList</summary>
        public global::cs.AttrData GetFreeAttrListElement()
        {
            global::cs.AttrData ret = null;
            if (AttrListCacheList.Count > 0)
            {
                 ret = AttrListCacheList[0];
                AttrListCacheList.RemoveAt(0);
            }
            else
            {
                 ret = new global::cs.AttrData();
            }
            return ret;
        }

        /// <summary>return a free element to AttrListCacheList</summary>
        public void ReturnAttrListElement(global::cs.AttrData element)
        {
            bool alreadyInList = false;
            for (int i = 0; i < AttrListCacheList.Count;  ++i)
            {
                if (AttrListCacheList[i] == element)
                {
                    alreadyInList = true;
                    break;
                }
            }
            if (!alreadyInList)
            {
                element.Clear();
                AttrListCacheList.Add(element);
            }
        }
    }

    /// <summary> pk模式</summary>
    public enum EnmPkMode
    {
        PkMode_None = 0,
        PkMode_Peace = 1,
        /// <summary>和平模式</summary>
        PkMode_Group = 2,
        /// <summary>团队模式</summary>
        PkMode_AllKill = 3,
    }


    public enum EnmMapPKType
    {
        MapType_Normal = 0,
        /// <summary>普通地图</summary>
        MapType_OutdoorPk = 1,
        /// <summary>野外pk地图</summary>
        MapType_FamilyScene = 2,
        /// <summary>家族领地</summary>
        MapType_Room = 3,
        /// <summary>多人副本</summary>
        MapType_WarOfRoyalCity = 4,
        /// <summary>皇城之战</summary>
        MapType_ZhuangZhouDream = 5,
        /// <summary>庄周梦境</summary>
        MapType_TTTower = 6,
        MapType_DynRoom = 7,
    }










































































































































































}
