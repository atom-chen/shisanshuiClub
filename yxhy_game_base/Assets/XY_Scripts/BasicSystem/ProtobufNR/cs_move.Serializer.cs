// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace cs
{
    public partial class CSEnterMapInfoNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapInfoNotify Deserialize(Stream stream)
        {
            var instance = new CSEnterMapInfoNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapInfoNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSEnterMapInfoNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapInfoNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSEnterMapInfoNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSEnterMapInfoNotify Deserialize(byte[] buffer)
        {
            var instance = new CSEnterMapInfoNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSEnterMapInfoNotify Deserialize(byte[] buffer, global::cs.CSEnterMapInfoNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapInfoNotify Deserialize(Stream stream, global::cs.CSEnterMapInfoNotify instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Rotation == null)
                            instance.Rotation = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Rotation);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.PosType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.NodeID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        if (instance.RoomID == null)
                            instance.RoomID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoomID);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.DynamicEnterType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapInfoNotify DeserializeLengthDelimited(Stream stream, global::cs.CSEnterMapInfoNotify instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Rotation == null)
                            instance.Rotation = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Rotation);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.PosType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.NodeID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        if (instance.RoomID == null)
                            instance.RoomID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoomID);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.DynamicEnterType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapInfoNotify DeserializeLength(Stream stream, int length, global::cs.CSEnterMapInfoNotify instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Rotation == null)
                            instance.Rotation = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Rotation);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.PosType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 Varint
                    case 40:
                        instance.NodeID = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        if (instance.RoomID == null)
                            instance.RoomID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoomID);
                        continue;
                    // Field 7 Varint
                    case 56:
                        instance.DynamicEnterType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSEnterMapInfoNotify instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MapID);
            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            if (instance.Rotation != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿msField.SetLength(0);
                global::cs.Triple.Serialize(msField, instance.Rotation);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                msField.WriteTo(stream);

            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.PosType);
            // Key for field: 5, Varint
            stream.WriteByte(40);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.NodeID);
            if (instance.RoomID != null)
            {
                // Key for field: 6, LengthDelimited
                stream.WriteByte(50);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.RoomID);
                // Length delimited byte array
                uint length6 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length6);
                msField.WriteTo(stream);

            }
            // Key for field: 7, Varint
            stream.WriteByte(56);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.DynamicEnterType);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSEnterMapInfoNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSEnterMapInfoNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSEnterMapReadyReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReadyReq Deserialize(Stream stream)
        {
            var instance = new CSEnterMapReadyReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReadyReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSEnterMapReadyReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReadyReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSEnterMapReadyReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSEnterMapReadyReq Deserialize(byte[] buffer)
        {
            var instance = new CSEnterMapReadyReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSEnterMapReadyReq Deserialize(byte[] buffer, global::cs.CSEnterMapReadyReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReadyReq Deserialize(Stream stream, global::cs.CSEnterMapReadyReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReadyReq DeserializeLengthDelimited(Stream stream, global::cs.CSEnterMapReadyReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReadyReq DeserializeLength(Stream stream, int length, global::cs.CSEnterMapReadyReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSEnterMapReadyReq instance)
        {
            var msField = stack.Pop();
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSEnterMapReadyReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSEnterMapReadyReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSEnterMapReadyRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReadyRes Deserialize(Stream stream)
        {
            var instance = new CSEnterMapReadyRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReadyRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSEnterMapReadyRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReadyRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSEnterMapReadyRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSEnterMapReadyRes Deserialize(byte[] buffer)
        {
            var instance = new CSEnterMapReadyRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSEnterMapReadyRes Deserialize(byte[] buffer, global::cs.CSEnterMapReadyRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReadyRes Deserialize(Stream stream, global::cs.CSEnterMapReadyRes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReadyRes DeserializeLengthDelimited(Stream stream, global::cs.CSEnterMapReadyRes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReadyRes DeserializeLength(Stream stream, int length, global::cs.CSEnterMapReadyRes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSEnterMapReadyRes instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RetCode);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MapID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSEnterMapReadyRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSEnterMapReadyRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSHeroMoveReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSHeroMoveReq Deserialize(Stream stream)
        {
            var instance = new CSHeroMoveReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSHeroMoveReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSHeroMoveReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSHeroMoveReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSHeroMoveReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSHeroMoveReq Deserialize(byte[] buffer)
        {
            var instance = new CSHeroMoveReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSHeroMoveReq Deserialize(byte[] buffer, global::cs.CSHeroMoveReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSHeroMoveReq Deserialize(Stream stream, global::cs.CSHeroMoveReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSHeroMoveReq DeserializeLengthDelimited(Stream stream, global::cs.CSHeroMoveReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSHeroMoveReq DeserializeLength(Stream stream, int length, global::cs.CSHeroMoveReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSHeroMoveReq instance)
        {
            var msField = stack.Pop();
            if (instance.Direct == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Direct is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Direct);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSHeroMoveReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSHeroMoveReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSHeroMoveRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSHeroMoveRes Deserialize(Stream stream)
        {
            var instance = new CSHeroMoveRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSHeroMoveRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSHeroMoveRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSHeroMoveRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSHeroMoveRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSHeroMoveRes Deserialize(byte[] buffer)
        {
            var instance = new CSHeroMoveRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSHeroMoveRes Deserialize(byte[] buffer, global::cs.CSHeroMoveRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSHeroMoveRes Deserialize(Stream stream, global::cs.CSHeroMoveRes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSHeroMoveRes DeserializeLengthDelimited(Stream stream, global::cs.CSHeroMoveRes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSHeroMoveRes DeserializeLength(Stream stream, int length, global::cs.CSHeroMoveRes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSHeroMoveRes instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RetCode);
            if (instance.Pos != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                global::cs.Triple.Serialize(msField, instance.Pos);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSHeroMoveRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSHeroMoveRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSReportHeroLocation
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSReportHeroLocation Deserialize(Stream stream)
        {
            var instance = new CSReportHeroLocation();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSReportHeroLocation DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSReportHeroLocation();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSReportHeroLocation DeserializeLength(Stream stream, int length)
        {
            var instance = new CSReportHeroLocation();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSReportHeroLocation Deserialize(byte[] buffer)
        {
            var instance = new CSReportHeroLocation();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSReportHeroLocation Deserialize(byte[] buffer, global::cs.CSReportHeroLocation instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSReportHeroLocation Deserialize(Stream stream, global::cs.CSReportHeroLocation instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSReportHeroLocation DeserializeLengthDelimited(Stream stream, global::cs.CSReportHeroLocation instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSReportHeroLocation DeserializeLength(Stream stream, int length, global::cs.CSReportHeroLocation instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSReportHeroLocation instance)
        {
            var msField = stack.Pop();
            if (instance.Direct == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Direct is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Direct);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSReportHeroLocation instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSReportHeroLocation instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSActorMoveNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorMoveNotify Deserialize(Stream stream)
        {
            var instance = new CSActorMoveNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorMoveNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSActorMoveNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorMoveNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSActorMoveNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSActorMoveNotify Deserialize(byte[] buffer)
        {
            var instance = new CSActorMoveNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSActorMoveNotify Deserialize(byte[] buffer, global::cs.CSActorMoveNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorMoveNotify Deserialize(Stream stream, global::cs.CSActorMoveNotify instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorMoveNotify DeserializeLengthDelimited(Stream stream, global::cs.CSActorMoveNotify instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorMoveNotify DeserializeLength(Stream stream, int length, global::cs.CSActorMoveNotify instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Direct == null)
                            instance.Direct = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Direct);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSActorMoveNotify instance)
        {
            var msField = stack.Pop();
            if (instance.ActorID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ActorID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.ActorID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.Direct == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Direct is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Direct);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            msField.WriteTo(stream);

            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ActorType);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSActorMoveNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSActorMoveNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSActorEnterViewNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorEnterViewNotify Deserialize(Stream stream)
        {
            var instance = new CSActorEnterViewNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorEnterViewNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSActorEnterViewNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorEnterViewNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSActorEnterViewNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSActorEnterViewNotify Deserialize(byte[] buffer)
        {
            var instance = new CSActorEnterViewNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSActorEnterViewNotify Deserialize(byte[] buffer, global::cs.CSActorEnterViewNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorEnterViewNotify Deserialize(Stream stream, global::cs.CSActorEnterViewNotify instance)
        {
            if (instance.HeroInfo == null)
                instance.HeroInfo = new List<global::cs.HeroEnterViewInfo>();
            if (instance.NpcInfo == null)
                instance.NpcInfo = new List<global::cs.NpcEnterViewInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.HeroEnterViewInfo HeroInfoElement = instance.GetFreeHeroInfoElement();
                        instance.HeroInfo.Add(global::cs.HeroEnterViewInfo.DeserializeLengthDelimited(stream, HeroInfoElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.NpcEnterViewInfo NpcInfoElement = instance.GetFreeNpcInfoElement();
                        instance.NpcInfo.Add(global::cs.NpcEnterViewInfo.DeserializeLengthDelimited(stream, NpcInfoElement));
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FullViewFlag = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorEnterViewNotify DeserializeLengthDelimited(Stream stream, global::cs.CSActorEnterViewNotify instance)
        {
            if (instance.HeroInfo == null)
                instance.HeroInfo = new List<global::cs.HeroEnterViewInfo>();
            if (instance.NpcInfo == null)
                instance.NpcInfo = new List<global::cs.NpcEnterViewInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.HeroEnterViewInfo HeroInfoElement = instance.GetFreeHeroInfoElement();
                        instance.HeroInfo.Add(global::cs.HeroEnterViewInfo.DeserializeLengthDelimited(stream, HeroInfoElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.NpcEnterViewInfo NpcInfoElement = instance.GetFreeNpcInfoElement();
                        instance.NpcInfo.Add(global::cs.NpcEnterViewInfo.DeserializeLengthDelimited(stream, NpcInfoElement));
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FullViewFlag = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorEnterViewNotify DeserializeLength(Stream stream, int length, global::cs.CSActorEnterViewNotify instance)
        {
            if (instance.HeroInfo == null)
                instance.HeroInfo = new List<global::cs.HeroEnterViewInfo>();
            if (instance.NpcInfo == null)
                instance.NpcInfo = new List<global::cs.NpcEnterViewInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.HeroEnterViewInfo HeroInfoElement = instance.GetFreeHeroInfoElement();
                        instance.HeroInfo.Add(global::cs.HeroEnterViewInfo.DeserializeLengthDelimited(stream, HeroInfoElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.NpcEnterViewInfo NpcInfoElement = instance.GetFreeNpcInfoElement();
                        instance.NpcInfo.Add(global::cs.NpcEnterViewInfo.DeserializeLengthDelimited(stream, NpcInfoElement));
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.FullViewFlag = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSActorEnterViewNotify instance)
        {
            var msField = stack.Pop();
            if (instance.HeroInfo != null)
            {
                foreach (var i1 in instance.HeroInfo)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.HeroEnterViewInfo.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
            if (instance.NpcInfo != null)
            {
                foreach (var i2 in instance.NpcInfo)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::cs.NpcEnterViewInfo.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.FullViewFlag);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSActorEnterViewNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSActorEnterViewNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSActorLeaveViewNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorLeaveViewNotify Deserialize(Stream stream)
        {
            var instance = new CSActorLeaveViewNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorLeaveViewNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSActorLeaveViewNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorLeaveViewNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSActorLeaveViewNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSActorLeaveViewNotify Deserialize(byte[] buffer)
        {
            var instance = new CSActorLeaveViewNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSActorLeaveViewNotify Deserialize(byte[] buffer, global::cs.CSActorLeaveViewNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorLeaveViewNotify Deserialize(Stream stream, global::cs.CSActorLeaveViewNotify instance)
        {
            if (instance.HeroList == null)
                instance.HeroList = new List<global::cs.CSActorLeaveViewNotify.LeaveInfo>();
            if (instance.NpcList == null)
                instance.NpcList = new List<global::cs.CSActorLeaveViewNotify.LeaveInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.CSActorLeaveViewNotify.LeaveInfo HeroListElement = instance.GetFreeHeroListElement();
                        instance.HeroList.Add(global::cs.CSActorLeaveViewNotify.LeaveInfo.DeserializeLengthDelimited(stream, HeroListElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.CSActorLeaveViewNotify.LeaveInfo NpcListElement = instance.GetFreeNpcListElement();
                        instance.NpcList.Add(global::cs.CSActorLeaveViewNotify.LeaveInfo.DeserializeLengthDelimited(stream, NpcListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorLeaveViewNotify DeserializeLengthDelimited(Stream stream, global::cs.CSActorLeaveViewNotify instance)
        {
            if (instance.HeroList == null)
                instance.HeroList = new List<global::cs.CSActorLeaveViewNotify.LeaveInfo>();
            if (instance.NpcList == null)
                instance.NpcList = new List<global::cs.CSActorLeaveViewNotify.LeaveInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.CSActorLeaveViewNotify.LeaveInfo HeroListElement = instance.GetFreeHeroListElement();
                        instance.HeroList.Add(global::cs.CSActorLeaveViewNotify.LeaveInfo.DeserializeLengthDelimited(stream, HeroListElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.CSActorLeaveViewNotify.LeaveInfo NpcListElement = instance.GetFreeNpcListElement();
                        instance.NpcList.Add(global::cs.CSActorLeaveViewNotify.LeaveInfo.DeserializeLengthDelimited(stream, NpcListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorLeaveViewNotify DeserializeLength(Stream stream, int length, global::cs.CSActorLeaveViewNotify instance)
        {
            if (instance.HeroList == null)
                instance.HeroList = new List<global::cs.CSActorLeaveViewNotify.LeaveInfo>();
            if (instance.NpcList == null)
                instance.NpcList = new List<global::cs.CSActorLeaveViewNotify.LeaveInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        global::cs.CSActorLeaveViewNotify.LeaveInfo HeroListElement = instance.GetFreeHeroListElement();
                        instance.HeroList.Add(global::cs.CSActorLeaveViewNotify.LeaveInfo.DeserializeLengthDelimited(stream, HeroListElement));
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.CSActorLeaveViewNotify.LeaveInfo NpcListElement = instance.GetFreeNpcListElement();
                        instance.NpcList.Add(global::cs.CSActorLeaveViewNotify.LeaveInfo.DeserializeLengthDelimited(stream, NpcListElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSActorLeaveViewNotify instance)
        {
            var msField = stack.Pop();
            if (instance.HeroList != null)
            {
                foreach (var i1 in instance.HeroList)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    global::cs.CSActorLeaveViewNotify.LeaveInfo.Serialize(msField, i1);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    msField.WriteTo(stream);

                }
            }
            if (instance.NpcList != null)
            {
                foreach (var i2 in instance.NpcList)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::cs.CSActorLeaveViewNotify.LeaveInfo.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSActorLeaveViewNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSActorLeaveViewNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        public partial class LeaveInfo
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static LeaveInfo Deserialize(Stream stream)
            {
                var instance = new LeaveInfo();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static LeaveInfo DeserializeLengthDelimited(Stream stream)
            {
                var instance = new LeaveInfo();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static LeaveInfo DeserializeLength(Stream stream, int length)
            {
                var instance = new LeaveInfo();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static LeaveInfo Deserialize(byte[] buffer)
            {
                var instance = new LeaveInfo();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static global::cs.CSActorLeaveViewNotify.LeaveInfo Deserialize(byte[] buffer, global::cs.CSActorLeaveViewNotify.LeaveInfo instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static global::cs.CSActorLeaveViewNotify.LeaveInfo Deserialize(Stream stream, global::cs.CSActorLeaveViewNotify.LeaveInfo instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.ActorID == null)
                                instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                            else
                                global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static global::cs.CSActorLeaveViewNotify.LeaveInfo DeserializeLengthDelimited(Stream stream, global::cs.CSActorLeaveViewNotify.LeaveInfo instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.ActorID == null)
                                instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                            else
                                global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static global::cs.CSActorLeaveViewNotify.LeaveInfo DeserializeLength(Stream stream, int length, global::cs.CSActorLeaveViewNotify.LeaveInfo instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.ActorID == null)
                                instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                            else
                                global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            [ThreadStatic]
            static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, LeaveInfo instance)
            {
                var msField = stack.Pop();
                if (instance.ActorID == null)
                    throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ActorID is required by the proto specification.");
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.ActorID);
                // Length delimited byte array
                uint length1 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                msField.WriteTo(stream);

                stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(LeaveInfo instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, LeaveInfo instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }

    }

    public partial class CSJumpPosInSceneNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpPosInSceneNotify Deserialize(Stream stream)
        {
            var instance = new CSJumpPosInSceneNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpPosInSceneNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSJumpPosInSceneNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpPosInSceneNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSJumpPosInSceneNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSJumpPosInSceneNotify Deserialize(byte[] buffer)
        {
            var instance = new CSJumpPosInSceneNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSJumpPosInSceneNotify Deserialize(byte[] buffer, global::cs.CSJumpPosInSceneNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpPosInSceneNotify Deserialize(Stream stream, global::cs.CSJumpPosInSceneNotify instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Rotation == null)
                            instance.Rotation = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Rotation);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpPosInSceneNotify DeserializeLengthDelimited(Stream stream, global::cs.CSJumpPosInSceneNotify instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Rotation == null)
                            instance.Rotation = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Rotation);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpPosInSceneNotify DeserializeLength(Stream stream, int length, global::cs.CSJumpPosInSceneNotify instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Rotation == null)
                            instance.Rotation = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Rotation);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSJumpPosInSceneNotify instance)
        {
            var msField = stack.Pop();
            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.Rotation != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                global::cs.Triple.Serialize(msField, instance.Rotation);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSJumpPosInSceneNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSJumpPosInSceneNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSJumpSceneReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpSceneReq Deserialize(Stream stream)
        {
            var instance = new CSJumpSceneReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpSceneReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSJumpSceneReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpSceneReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSJumpSceneReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSJumpSceneReq Deserialize(byte[] buffer)
        {
            var instance = new CSJumpSceneReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSJumpSceneReq Deserialize(byte[] buffer, global::cs.CSJumpSceneReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpSceneReq Deserialize(Stream stream, global::cs.CSJumpSceneReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.JumpPoint = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.NpcActorID == null)
                            instance.NpcActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.NpcActorID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpSceneReq DeserializeLengthDelimited(Stream stream, global::cs.CSJumpSceneReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.JumpPoint = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.NpcActorID == null)
                            instance.NpcActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.NpcActorID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpSceneReq DeserializeLength(Stream stream, int length, global::cs.CSJumpSceneReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.JumpPoint = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.NpcActorID == null)
                            instance.NpcActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.NpcActorID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSJumpSceneReq instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.JumpPoint);
            if (instance.NpcActorID != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.NpcActorID);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSJumpSceneReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSJumpSceneReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSJumpSceneRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpSceneRes Deserialize(Stream stream)
        {
            var instance = new CSJumpSceneRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpSceneRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSJumpSceneRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSJumpSceneRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSJumpSceneRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSJumpSceneRes Deserialize(byte[] buffer)
        {
            var instance = new CSJumpSceneRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSJumpSceneRes Deserialize(byte[] buffer, global::cs.CSJumpSceneRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpSceneRes Deserialize(Stream stream, global::cs.CSJumpSceneRes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpSceneRes DeserializeLengthDelimited(Stream stream, global::cs.CSJumpSceneRes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSJumpSceneRes DeserializeLength(Stream stream, int length, global::cs.CSJumpSceneRes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSJumpSceneRes instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RetCode);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSJumpSceneRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSJumpSceneRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSChgCityTimeOutNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSChgCityTimeOutNotify Deserialize(Stream stream)
        {
            var instance = new CSChgCityTimeOutNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSChgCityTimeOutNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSChgCityTimeOutNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSChgCityTimeOutNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSChgCityTimeOutNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSChgCityTimeOutNotify Deserialize(byte[] buffer)
        {
            var instance = new CSChgCityTimeOutNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSChgCityTimeOutNotify Deserialize(byte[] buffer, global::cs.CSChgCityTimeOutNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSChgCityTimeOutNotify Deserialize(Stream stream, global::cs.CSChgCityTimeOutNotify instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSChgCityTimeOutNotify DeserializeLengthDelimited(Stream stream, global::cs.CSChgCityTimeOutNotify instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSChgCityTimeOutNotify DeserializeLength(Stream stream, int length, global::cs.CSChgCityTimeOutNotify instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSChgCityTimeOutNotify instance)
        {
            var msField = stack.Pop();
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSChgCityTimeOutNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSChgCityTimeOutNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSCityHostNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSCityHostNotify Deserialize(Stream stream)
        {
            var instance = new CSCityHostNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSCityHostNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSCityHostNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSCityHostNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSCityHostNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSCityHostNotify Deserialize(byte[] buffer)
        {
            var instance = new CSCityHostNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSCityHostNotify Deserialize(byte[] buffer, global::cs.CSCityHostNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSCityHostNotify Deserialize(Stream stream, global::cs.CSCityHostNotify instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Addr == null)
                            instance.Addr = global::cs.TconndAddr.DeserializeLengthDelimited(stream);
                        else
                            global::cs.TconndAddr.DeserializeLengthDelimited(stream, instance.Addr);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSCityHostNotify DeserializeLengthDelimited(Stream stream, global::cs.CSCityHostNotify instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Addr == null)
                            instance.Addr = global::cs.TconndAddr.DeserializeLengthDelimited(stream);
                        else
                            global::cs.TconndAddr.DeserializeLengthDelimited(stream, instance.Addr);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSCityHostNotify DeserializeLength(Stream stream, int length, global::cs.CSCityHostNotify instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Addr == null)
                            instance.Addr = global::cs.TconndAddr.DeserializeLengthDelimited(stream);
                        else
                            global::cs.TconndAddr.DeserializeLengthDelimited(stream, instance.Addr);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSCityHostNotify instance)
        {
            var msField = stack.Pop();
            if (instance.Addr != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                global::cs.TconndAddr.Serialize(msField, instance.Addr);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSCityHostNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSCityHostNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSStopMoveNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSStopMoveNotify Deserialize(Stream stream)
        {
            var instance = new CSStopMoveNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSStopMoveNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSStopMoveNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSStopMoveNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSStopMoveNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSStopMoveNotify Deserialize(byte[] buffer)
        {
            var instance = new CSStopMoveNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSStopMoveNotify Deserialize(byte[] buffer, global::cs.CSStopMoveNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSStopMoveNotify Deserialize(Stream stream, global::cs.CSStopMoveNotify instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Toward == null)
                            instance.Toward = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Toward);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.TargetActorID == null)
                            instance.TargetActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.TargetActorID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSStopMoveNotify DeserializeLengthDelimited(Stream stream, global::cs.CSStopMoveNotify instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Toward == null)
                            instance.Toward = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Toward);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.TargetActorID == null)
                            instance.TargetActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.TargetActorID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSStopMoveNotify DeserializeLength(Stream stream, int length, global::cs.CSStopMoveNotify instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.Toward == null)
                            instance.Toward = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Toward);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.TargetActorID == null)
                            instance.TargetActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.TargetActorID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSStopMoveNotify instance)
        {
            var msField = stack.Pop();
            if (instance.ActorID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ActorID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.ActorID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ActorType);
            if (instance.Toward == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Toward is required by the proto specification.");
            // Key for field: 4, LengthDelimited
            stream.WriteByte(34);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Toward);
            // Length delimited byte array
            uint length4 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
            msField.WriteTo(stream);

            if (instance.TargetActorID != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.TargetActorID);
                // Length delimited byte array
                uint length5 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSStopMoveNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSStopMoveNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSActorAttrChangeNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorAttrChangeNotify Deserialize(Stream stream)
        {
            var instance = new CSActorAttrChangeNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorAttrChangeNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSActorAttrChangeNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSActorAttrChangeNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSActorAttrChangeNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSActorAttrChangeNotify Deserialize(byte[] buffer)
        {
            var instance = new CSActorAttrChangeNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSActorAttrChangeNotify Deserialize(byte[] buffer, global::cs.CSActorAttrChangeNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorAttrChangeNotify Deserialize(Stream stream, global::cs.CSActorAttrChangeNotify instance)
        {
            if (instance.RoleAttr == null)
                instance.RoleAttr = new List<global::cs.AttrData>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.AttrData RoleAttrElement = instance.GetFreeRoleAttrElement();
                        instance.RoleAttr.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, RoleAttrElement));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.OtherView == null)
                            instance.OtherView = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.OtherView);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorAttrChangeNotify DeserializeLengthDelimited(Stream stream, global::cs.CSActorAttrChangeNotify instance)
        {
            if (instance.RoleAttr == null)
                instance.RoleAttr = new List<global::cs.AttrData>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.AttrData RoleAttrElement = instance.GetFreeRoleAttrElement();
                        instance.RoleAttr.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, RoleAttrElement));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.OtherView == null)
                            instance.OtherView = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.OtherView);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSActorAttrChangeNotify DeserializeLength(Stream stream, int length, global::cs.CSActorAttrChangeNotify instance)
        {
            if (instance.RoleAttr == null)
                instance.RoleAttr = new List<global::cs.AttrData>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.AttrData RoleAttrElement = instance.GetFreeRoleAttrElement();
                        instance.RoleAttr.Add(global::cs.AttrData.DeserializeLengthDelimited(stream, RoleAttrElement));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.OtherView == null)
                            instance.OtherView = global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream);
                        else
                            global::cs.ViewOtherInfo.DeserializeLengthDelimited(stream, instance.OtherView);
                        continue;
                    // Field 4 LengthDelimited
                    case 34:
                        if (instance.FactionID == null)
                            instance.FactionID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.FactionID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSActorAttrChangeNotify instance)
        {
            var msField = stack.Pop();
            if (instance.ActorID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ActorID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.ActorID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.RoleAttr != null)
            {
                foreach (var i2 in instance.RoleAttr)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::cs.AttrData.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            if (instance.OtherView != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                ﻿msField.SetLength(0);
                global::cs.ViewOtherInfo.Serialize(msField, instance.OtherView);
                // Length delimited byte array
                uint length3 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
                msField.WriteTo(stream);

            }
            if (instance.FactionID != null)
            {
                // Key for field: 4, LengthDelimited
                stream.WriteByte(34);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.FactionID);
                // Length delimited byte array
                uint length4 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length4);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSActorAttrChangeNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSActorAttrChangeNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSMoveIntoNpcAreaReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMoveIntoNpcAreaReq Deserialize(Stream stream)
        {
            var instance = new CSMoveIntoNpcAreaReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMoveIntoNpcAreaReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSMoveIntoNpcAreaReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMoveIntoNpcAreaReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSMoveIntoNpcAreaReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSMoveIntoNpcAreaReq Deserialize(byte[] buffer)
        {
            var instance = new CSMoveIntoNpcAreaReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSMoveIntoNpcAreaReq Deserialize(byte[] buffer, global::cs.CSMoveIntoNpcAreaReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMoveIntoNpcAreaReq Deserialize(Stream stream, global::cs.CSMoveIntoNpcAreaReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.IntoOpt = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.NpcID == null)
                            instance.NpcID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.NpcID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMoveIntoNpcAreaReq DeserializeLengthDelimited(Stream stream, global::cs.CSMoveIntoNpcAreaReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.IntoOpt = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.NpcID == null)
                            instance.NpcID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.NpcID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMoveIntoNpcAreaReq DeserializeLength(Stream stream, int length, global::cs.CSMoveIntoNpcAreaReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.IntoOpt = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.NpcID == null)
                            instance.NpcID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.NpcID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSMoveIntoNpcAreaReq instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.IntoOpt);
            if (instance.NpcID != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.NpcID);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSMoveIntoNpcAreaReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSMoveIntoNpcAreaReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSMoveIntoNpcAreaRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMoveIntoNpcAreaRes Deserialize(Stream stream)
        {
            var instance = new CSMoveIntoNpcAreaRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMoveIntoNpcAreaRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSMoveIntoNpcAreaRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMoveIntoNpcAreaRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSMoveIntoNpcAreaRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSMoveIntoNpcAreaRes Deserialize(byte[] buffer)
        {
            var instance = new CSMoveIntoNpcAreaRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSMoveIntoNpcAreaRes Deserialize(byte[] buffer, global::cs.CSMoveIntoNpcAreaRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMoveIntoNpcAreaRes Deserialize(Stream stream, global::cs.CSMoveIntoNpcAreaRes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.retcode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMoveIntoNpcAreaRes DeserializeLengthDelimited(Stream stream, global::cs.CSMoveIntoNpcAreaRes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.retcode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMoveIntoNpcAreaRes DeserializeLength(Stream stream, int length, global::cs.CSMoveIntoNpcAreaRes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.retcode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSMoveIntoNpcAreaRes instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.retcode);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSMoveIntoNpcAreaRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSMoveIntoNpcAreaRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSEnterMapReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReq Deserialize(Stream stream)
        {
            var instance = new CSEnterMapReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSEnterMapReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSEnterMapReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSEnterMapReq Deserialize(byte[] buffer)
        {
            var instance = new CSEnterMapReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSEnterMapReq Deserialize(byte[] buffer, global::cs.CSEnterMapReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReq Deserialize(Stream stream, global::cs.CSEnterMapReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.LevelType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReq DeserializeLengthDelimited(Stream stream, global::cs.CSEnterMapReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.LevelType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapReq DeserializeLength(Stream stream, int length, global::cs.CSEnterMapReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.LevelType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSEnterMapReq instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MapID);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.LevelType);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSEnterMapReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSEnterMapReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSEnterMapRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapRes Deserialize(Stream stream)
        {
            var instance = new CSEnterMapRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSEnterMapRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSEnterMapRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSEnterMapRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSEnterMapRes Deserialize(byte[] buffer)
        {
            var instance = new CSEnterMapRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSEnterMapRes Deserialize(byte[] buffer, global::cs.CSEnterMapRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapRes Deserialize(Stream stream, global::cs.CSEnterMapRes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapRes DeserializeLengthDelimited(Stream stream, global::cs.CSEnterMapRes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSEnterMapRes DeserializeLength(Stream stream, int length, global::cs.CSEnterMapRes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSEnterMapRes instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RetCode);
            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MapID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSEnterMapRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSEnterMapRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSQingkungReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQingkungReq Deserialize(Stream stream)
        {
            var instance = new CSQingkungReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQingkungReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSQingkungReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQingkungReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSQingkungReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSQingkungReq Deserialize(byte[] buffer)
        {
            var instance = new CSQingkungReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSQingkungReq Deserialize(byte[] buffer, global::cs.CSQingkungReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQingkungReq Deserialize(Stream stream, global::cs.CSQingkungReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.QingkungID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQingkungReq DeserializeLengthDelimited(Stream stream, global::cs.CSQingkungReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.QingkungID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQingkungReq DeserializeLength(Stream stream, int length, global::cs.CSQingkungReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.QingkungID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSQingkungReq instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.QingkungID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSQingkungReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSQingkungReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSQingkungRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQingkungRes Deserialize(Stream stream)
        {
            var instance = new CSQingkungRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQingkungRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSQingkungRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQingkungRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSQingkungRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSQingkungRes Deserialize(byte[] buffer)
        {
            var instance = new CSQingkungRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSQingkungRes Deserialize(byte[] buffer, global::cs.CSQingkungRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQingkungRes Deserialize(Stream stream, global::cs.CSQingkungRes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQingkungRes DeserializeLengthDelimited(Stream stream, global::cs.CSQingkungRes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQingkungRes DeserializeLength(Stream stream, int length, global::cs.CSQingkungRes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSQingkungRes instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RetCode);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSQingkungRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSQingkungRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSQinkungNotify
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQinkungNotify Deserialize(Stream stream)
        {
            var instance = new CSQinkungNotify();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQinkungNotify DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSQinkungNotify();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSQinkungNotify DeserializeLength(Stream stream, int length)
        {
            var instance = new CSQinkungNotify();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSQinkungNotify Deserialize(byte[] buffer)
        {
            var instance = new CSQinkungNotify();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSQinkungNotify Deserialize(byte[] buffer, global::cs.CSQinkungNotify instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQinkungNotify Deserialize(Stream stream, global::cs.CSQinkungNotify instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.QingkungID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQinkungNotify DeserializeLengthDelimited(Stream stream, global::cs.CSQinkungNotify instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.QingkungID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSQinkungNotify DeserializeLength(Stream stream, int length, global::cs.CSQinkungNotify instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 Varint
                    case 16:
                        instance.QingkungID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSQinkungNotify instance)
        {
            var msField = stack.Pop();
            if (instance.ActorID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ActorID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.ActorID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            // Key for field: 2, Varint
            stream.WriteByte(16);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.QingkungID);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSQinkungNotify instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSQinkungNotify instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class MiniMonsterInfo
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MiniMonsterInfo Deserialize(Stream stream)
        {
            var instance = new MiniMonsterInfo();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MiniMonsterInfo DeserializeLengthDelimited(Stream stream)
        {
            var instance = new MiniMonsterInfo();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MiniMonsterInfo DeserializeLength(Stream stream, int length)
        {
            var instance = new MiniMonsterInfo();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MiniMonsterInfo Deserialize(byte[] buffer)
        {
            var instance = new MiniMonsterInfo();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.MiniMonsterInfo Deserialize(byte[] buffer, global::cs.MiniMonsterInfo instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.MiniMonsterInfo Deserialize(Stream stream, global::cs.MiniMonsterInfo instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MonsterID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.MiniMonsterInfo DeserializeLengthDelimited(Stream stream, global::cs.MiniMonsterInfo instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MonsterID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.MiniMonsterInfo DeserializeLength(Stream stream, int length, global::cs.MiniMonsterInfo instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MonsterID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MiniMonsterInfo instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MonsterID);
            if (instance.ActorID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ActorID is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.ActorID);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            msField.WriteTo(stream);

            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MiniMonsterInfo instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, MiniMonsterInfo instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSMiniMapInfoReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMiniMapInfoReq Deserialize(Stream stream)
        {
            var instance = new CSMiniMapInfoReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMiniMapInfoReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSMiniMapInfoReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMiniMapInfoReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSMiniMapInfoReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSMiniMapInfoReq Deserialize(byte[] buffer)
        {
            var instance = new CSMiniMapInfoReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSMiniMapInfoReq Deserialize(byte[] buffer, global::cs.CSMiniMapInfoReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMiniMapInfoReq Deserialize(Stream stream, global::cs.CSMiniMapInfoReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMiniMapInfoReq DeserializeLengthDelimited(Stream stream, global::cs.CSMiniMapInfoReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMiniMapInfoReq DeserializeLength(Stream stream, int length, global::cs.CSMiniMapInfoReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSMiniMapInfoReq instance)
        {
            var msField = stack.Pop();
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSMiniMapInfoReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSMiniMapInfoReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSMiniMapInfoRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMiniMapInfoRes Deserialize(Stream stream)
        {
            var instance = new CSMiniMapInfoRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMiniMapInfoRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSMiniMapInfoRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSMiniMapInfoRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSMiniMapInfoRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSMiniMapInfoRes Deserialize(byte[] buffer)
        {
            var instance = new CSMiniMapInfoRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSMiniMapInfoRes Deserialize(byte[] buffer, global::cs.CSMiniMapInfoRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMiniMapInfoRes Deserialize(Stream stream, global::cs.CSMiniMapInfoRes instance)
        {
            if (instance.MonsterInfo == null)
                instance.MonsterInfo = new List<global::cs.MiniMonsterInfo>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.MiniMonsterInfo MonsterInfoElement = instance.GetFreeMonsterInfoElement();
                        instance.MonsterInfo.Add(global::cs.MiniMonsterInfo.DeserializeLengthDelimited(stream, MonsterInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMiniMapInfoRes DeserializeLengthDelimited(Stream stream, global::cs.CSMiniMapInfoRes instance)
        {
            if (instance.MonsterInfo == null)
                instance.MonsterInfo = new List<global::cs.MiniMonsterInfo>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.MiniMonsterInfo MonsterInfoElement = instance.GetFreeMonsterInfoElement();
                        instance.MonsterInfo.Add(global::cs.MiniMonsterInfo.DeserializeLengthDelimited(stream, MonsterInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSMiniMapInfoRes DeserializeLength(Stream stream, int length, global::cs.CSMiniMapInfoRes instance)
        {
            if (instance.MonsterInfo == null)
                instance.MonsterInfo = new List<global::cs.MiniMonsterInfo>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        // repeated
                        global::cs.MiniMonsterInfo MonsterInfoElement = instance.GetFreeMonsterInfoElement();
                        instance.MonsterInfo.Add(global::cs.MiniMonsterInfo.DeserializeLengthDelimited(stream, MonsterInfoElement));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSMiniMapInfoRes instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RetCode);
            if (instance.MonsterInfo != null)
            {
                foreach (var i2 in instance.MonsterInfo)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    global::cs.MiniMonsterInfo.Serialize(msField, i2);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    msField.WriteTo(stream);

                }
            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSMiniMapInfoRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSMiniMapInfoRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSCheckSelfLocReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSCheckSelfLocReq Deserialize(Stream stream)
        {
            var instance = new CSCheckSelfLocReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSCheckSelfLocReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSCheckSelfLocReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSCheckSelfLocReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSCheckSelfLocReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSCheckSelfLocReq Deserialize(byte[] buffer)
        {
            var instance = new CSCheckSelfLocReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSCheckSelfLocReq Deserialize(byte[] buffer, global::cs.CSCheckSelfLocReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSCheckSelfLocReq Deserialize(Stream stream, global::cs.CSCheckSelfLocReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.RoomID == null)
                            instance.RoomID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoomID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSCheckSelfLocReq DeserializeLengthDelimited(Stream stream, global::cs.CSCheckSelfLocReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.RoomID == null)
                            instance.RoomID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoomID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSCheckSelfLocReq DeserializeLength(Stream stream, int length, global::cs.CSCheckSelfLocReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.MapID = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.RoomID == null)
                            instance.RoomID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.RoomID);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSCheckSelfLocReq instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, instance.MapID);
            if (instance.RoomID != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                ﻿msField.SetLength(0);
                global::cs.MyUint64.Serialize(msField, instance.RoomID);
                // Length delimited byte array
                uint length2 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                msField.WriteTo(stream);

            }
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSCheckSelfLocReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSCheckSelfLocReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSSynPositionReq
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSSynPositionReq Deserialize(Stream stream)
        {
            var instance = new CSSynPositionReq();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSSynPositionReq DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSSynPositionReq();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSSynPositionReq DeserializeLength(Stream stream, int length)
        {
            var instance = new CSSynPositionReq();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSSynPositionReq Deserialize(byte[] buffer)
        {
            var instance = new CSSynPositionReq();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSSynPositionReq Deserialize(byte[] buffer, global::cs.CSSynPositionReq instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSSynPositionReq Deserialize(Stream stream, global::cs.CSSynPositionReq instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSSynPositionReq DeserializeLengthDelimited(Stream stream, global::cs.CSSynPositionReq instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSSynPositionReq DeserializeLength(Stream stream, int length, global::cs.CSSynPositionReq instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        if (instance.ActorID == null)
                            instance.ActorID = global::cs.MyUint64.DeserializeLengthDelimited(stream);
                        else
                            global::cs.MyUint64.DeserializeLengthDelimited(stream, instance.ActorID);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Pos == null)
                            instance.Pos = global::cs.Triple.DeserializeLengthDelimited(stream);
                        else
                            global::cs.Triple.DeserializeLengthDelimited(stream, instance.Pos);
                        continue;
                    // Field 3 Varint
                    case 24:
                        instance.ActorType = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Type = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSSynPositionReq instance)
        {
            var msField = stack.Pop();
            if (instance.ActorID == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("ActorID is required by the proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            ﻿msField.SetLength(0);
            global::cs.MyUint64.Serialize(msField, instance.ActorID);
            // Length delimited byte array
            uint length1 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
            msField.WriteTo(stream);

            if (instance.Pos == null)
                throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Pos is required by the proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            global::cs.Triple.Serialize(msField, instance.Pos);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            msField.WriteTo(stream);

            // Key for field: 3, Varint
            stream.WriteByte(24);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.ActorType);
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.Type);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSSynPositionReq instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSSynPositionReq instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    public partial class CSSynPositionRes
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSSynPositionRes Deserialize(Stream stream)
        {
            var instance = new CSSynPositionRes();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSSynPositionRes DeserializeLengthDelimited(Stream stream)
        {
            var instance = new CSSynPositionRes();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CSSynPositionRes DeserializeLength(Stream stream, int length)
        {
            var instance = new CSSynPositionRes();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CSSynPositionRes Deserialize(byte[] buffer)
        {
            var instance = new CSSynPositionRes();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static global::cs.CSSynPositionRes Deserialize(byte[] buffer, global::cs.CSSynPositionRes instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static global::cs.CSSynPositionRes Deserialize(Stream stream, global::cs.CSSynPositionRes instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSSynPositionRes DeserializeLengthDelimited(Stream stream, global::cs.CSSynPositionRes instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static global::cs.CSSynPositionRes DeserializeLength(Stream stream, int length, global::cs.CSSynPositionRes instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Varint
                    case 8:
                        instance.RetCode = (int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        [ThreadStatic]
        static global::SilentOrbit.ProtocolBuffers.MemoryStreamStack stack = new global::SilentOrbit.ProtocolBuffers.ThreadUnsafeStack();
        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CSSynPositionRes instance)
        {
            var msField = stack.Pop();
            // Key for field: 1, Varint
            stream.WriteByte(8);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.RetCode);
            stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CSSynPositionRes instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CSSynPositionRes instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

}
