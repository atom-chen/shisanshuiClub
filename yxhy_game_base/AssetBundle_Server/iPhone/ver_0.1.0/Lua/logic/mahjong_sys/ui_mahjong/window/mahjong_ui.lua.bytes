require "logic/mahjong_sys/_model/room_usersdata_center"
require "logic/mahjong_sys/_model/room_usersdata"
require "logic/mahjong_sys/_model/operatorcachedata"
require "logic/mahjong_sys/_model/operatordata"
require "logic/mahjong_sys/ui_mahjong/mahjong_ui_sys"
require "logic/mahjong_sys/ui_mahjong/mahjong_player_ui"
require "logic/animations_sys/animations_sys"
require "logic/invite_sys/invite_sys"
require "logic/gvoice_sys/gvoice_sys"
require "logic/common_ui/rules_ui"

local addClickCallbackSelf = addClickCallbackSelf
local addPressedCallbackSelf = addPressedCallbackSelf

local base = require("logic.framework.ui.uibase.ui_window")
local mahjong_ui = class("mahjong_ui", base)

local instance = nil

function mahjong_ui:ctor()
	base.ctor(self)
	self.zhuangTimer = nil
	self.getDateTimer = nil
	self.specialCardList = {}
	self.gvoice_engin = nil
	instance = self
end

function mahjong_ui:OnInit()

	self:InitView()
	self.chatTextTab = {"赶紧出，你在孵蛋啊！","快点吧，我等的花都谢了","催催催~急着送钱啊？","还让不让我摸牌了！",
	"这什么牌呐，摸什么打什么","辛辛苦苦很多年，一把回到解放前","你家里是开银行的吧","来呀~互相伤害呀",
	"你这样以后没朋友的","你能胡个大点的牌不？","我有大把银子，有本事来就来拿"}
	self.chatImgTab = {"1","2","3","4","5","6","7","8","9","10","11","12"}
end

function mahjong_ui:OnOpen()
	UpdateBeat:Add(slot(self.Update, self))
	self:InitLogic()
	self:InitPlayers()
	self:StartGetDataTimer()
	self:SetGameInfoVisible(false)
    self:SetAllHuaPointVisible(false)

    
--	chat_ui:InitUI(chatTextTab,chatImgTab)

	self.gvoice_engin = gvoice_sys.GetEngine()
	ui_sound_mgr.PlayBgSound("mahjong_bgm")	
end

function mahjong_ui:OnClose()
	gps_data.ResetGpsData()
	UpdateBeat:Remove(slot(self.Update, self))
	self:UnInit()

	self.gvoice_engin = nil
end

function mahjong_ui:PlayOpenAmination()
end
function mahjong_ui:OnRefreshDepth()
	if self.playerList then
		for k,v in pairs(self.playerList) do
			local playerComponent = v
			--表情层设定
			if playerComponent then
				playerComponent.sortingOrder = self.sortingOrder
				playerComponent.m_subPanelCount = self.m_subPanelCount
			end

		end
	end
	if self.operTipsView then
		self.operTipsView.sortingOrder = self.sortingOrder
		self.operTipsView.m_subPanelCount = self.m_subPanelCount
	end
end

function mahjong_ui:InitView()
	self.panelTr = self:GetTransform("Panel")

	self.exitBtnGo = self:GetGameObject("Panel/Anchor_TopLeft/exit")
	addClickCallbackSelf(self.exitBtnGo, self.Onbtn_exitClick, self)

	self.moreBtnGo = self:GetGameObject("Panel/Anchor_TopRight/morePanel/more")
	self.moreBtnGo:SetActive(true)
	addClickCallbackSelf(self.moreBtnGo, self.Onbtn_moreClick, self)

	self.readyBtnGo = self:GetGameObject("Panel/Anchor_Center/readyBtns/ready")
	addClickCallbackSelf(self.readyBtnGo, self.Onbtn_readyClick, self)

	self.inviteBtnGo = self:GetGameObject("Panel/Anchor_Center/readyBtns/invideFriend")
	addClickCallbackSelf(self.inviteBtnGo, self.Onbtn_inviteClick, self)

	self.closeRoomBtnGo = self:GetGameObject("Panel/Anchor_Center/readyBtns/closeRoom")
	addClickCallbackSelf(self.closeRoomBtnGo, self.Onbtn_closeRoomClick, self)

	self.voiceBtnGo = self:GetGameObject("Panel/Anchor_Right/voice")
	addClickCallbackSelf(self.voiceBtnGo, self.Onbtn_voiceClick, self)
	addPressedCallbackSelf(self.voiceBtnGo.transform, "", self.Onbtn_voicePressed, self)
	self:AddSoundDragEventListener(self.voiceBtnGo)

	self.chatBtnGo = self:GetGameObject("Panel/Anchor_Right/chat")
	addClickCallbackSelf(self.chatBtnGo, self.Onbtn_chatClick, self)



	-- self.copyBtnGo = self:GetGameObject("Panel/Anchor_TopLeft/btn_copy")
	self.copyBtnGo = self:GetGameObject("Panel/Anchor_Center/readyBtns/copyNumber")
	addClickCallbackSelf(self.copyBtnGo, self.Onbtn_CopyRoomNum, self)

	self.powerSp = self:GetComponent("Panel/Anchor_TopLeft/phoneInfo/power/slider", typeof(UISprite))
	self.timeLabel = self:GetComponent("Panel/Anchor_TopLeft/phoneInfo/timeLbl", typeof(UILabel))

	self.leftCardLabel = self:GetComponent("Panel/Anchor_TopLeft/leftCardInfo/leftCard", typeof(UILabel))
	self.leftCardGo = self:GetGameObject("Panel/Anchor_TopLeft/leftCardInfo")

	self.roundNumLabel = self:GetComponent("Panel/Anchor_TopRight/roundInfo/round", typeof(UILabel))
	self.roundNumGo = self:GetGameObject("Panel/Anchor_TopRight/roundInfo")

	self.zhuangTipsGo = self:GetGameObject("Panel/Anchor_Center/zhuanTips")
	self.zhuangTipsGo:SetActive(false)

	-- self:InitPlayers()

	-- @todo 互动表情界面重写
	----设置互动表情位置
	local maxPeopleNum = 4
	local posTbl = config_mgr.getConfig("cfg_mahjongpos",maxPeopleNum)
	for i=1,maxPeopleNum do
		local playerTrans = child(self.panelTr, "Anchor_Center/Players/Player"..i)
		self:InitInteractionView(playerTrans.gameObject,posTbl["pos"][i])
	end

	self.specialCardGo = self:GetGameObject("Panel/Anchor_TopLeft/specialCard")
	self.specialCardGo:SetActive(false)
	self.specialCardList = {}
	self.specialCardList[1] = self.specialCardGo

	-- 荒庄
	self.huangGo = self:GetGameObject("Panel/Anchor_Center/huang")
	self.huangGo:SetActive(false)
	self.huangSpTr = self:GetTransform("Panel/Anchor_Center/huang/Sprite")

	self.tingBackGo = self:GetGameObject("Panel/Anchor_Center/tingGuo")
	self.tingBackGo:SetActive(false)
	addClickCallbackSelf(self.tingBackGo, self.Onbtn_TingBack, self)

	self:AdjustPosOnIPhone()

	self:InitCardShowView()
    self:InitVoteView()
    self:InitOperTipsView()
    self:InitMoreBtnsView()
    self:InitSoundView()

    -- this.SetAllScoreVisible(false)
    self:HideAllReadyBtns()
    self:InitXiaPaoView()

	--苹果审核隐藏界面
	if G_isAppleVerifyInvite then
		local btn_Invite=self.inviteBtnGo
		if btn_Invite then
			btn_Invite.gameObject:SetActive(false)
		end
		self.inviteBtnGo = nil
	end
end

function mahjong_ui:AdjustPosOnIPhone()
	-- if data_center.GetCurPlatform() ~= "IPhonePlayer" or not YX_APIManage.Instance:isIphoneX() then
	-- 	return
	-- end

	-- --iPhoneX适配
	-- local delayTimer = Timer.New(function()
	-- 	local widgetPanel = child(self.transform, "Panel")
	-- 	if widgetPanel then
	-- 		local Anchor_TopRight = child(widgetPanel, "Anchor_TopRight")
	-- 		if Anchor_TopRight then
	-- 		  local localPos = Anchor_TopRight.gameObject.transform.localPosition
	-- 		  Anchor_TopRight.gameObject.transform.localPosition = Vector3(localPos.x -60, localPos.y, localPos.z)
	-- 		end
	-- 		local Anchor_Right = child(widgetPanel, "Anchor_Right")
	-- 		if Anchor_Right then
	-- 		  local localPos = Anchor_Right.gameObject.transform.localPosition
	-- 		  Anchor_Right.gameObject.transform.localPosition = Vector3(localPos.x -60, localPos.y, localPos.z)
	-- 		end

	-- 		--copyBtn
	-- 		local btn_copy = child(widgetPanel, "Anchor_TopLeft/btn_copy")
	-- 		if btn_copy then
	-- 		  local localPos = btn_copy.gameObject.transform.localPosition
	-- 		  btn_copy.gameObject.transform.localPosition = Vector3(localPos.x +60, localPos.y, localPos.z)
	-- 		end
	-- 	end
	-- end, 0.1, 1)
	-- delayTimer:Start()
end




function mahjong_ui:Onbtn_exitClick()
	report_sys.EventUpload(31,player_data.GetGameId())
	if roomdata_center.isStart or roomdata_center.isRoundStart then
		MessageBox.ShowYesNoBox(GetDictString(6030), function() mahjong_play_sys.VoteDrawReq(true) end)
		return
	end

	ui_sound_mgr.PlaySoundClip(data_center.GetAppConfDataTble().appPath.."/sound/common/audio_close_dialog")
	MessageBox.ShowYesNoBox(GetDictString(5001), function() mahjong_play_sys.LeaveReq() end)
end

-- 更多按钮
function mahjong_ui:Onbtn_moreClick()
	self:SetMorePanel()
end

-- 准备按钮
function mahjong_ui:Onbtn_readyClick()	
	ui_sound_mgr.PlaySoundClip(data_center.GetAppConfDataTble().appPath.."/sound/common/audio_ready")
	mahjong_play_sys.ReadyGameReq()
end

function mahjong_ui:Onbtn_inviteClick()
	local loginType = data_center.GetPlatform()
	local name, des = ShareStrUtil.GetShareStr()
	invite_sys.inviteFriend(loginType,roomdata_center.roomnumber,name, des)
	report_sys.EventUpload(29,player_data.GetGameId())
end

-- 解散房间
function mahjong_ui:Onbtn_closeRoomClick()
	report_sys.EventUpload(30,player_data.GetGameId())
  	MessageBox.ShowYesNoBox(GetDictString(6031), function() mahjong_play_sys.DissolutionRoom() end)
end

-- 语音按钮
function mahjong_ui:Onbtn_voiceClick()
	report_sys.EventUpload(32,player_data.GetGameId())
end

-- 聊天按钮
function mahjong_ui:Onbtn_chatClick()
	report_sys.EventUpload(33,player_data.GetGameId())
	--chat_ui:SetChatPanle()
	UI_Manager:Instance():ShowUiForms("chat_ui",UiCloseType.UiCloseType_CloseNothing,nil,self.chatTextTab,self.chatImgTab)
end

--复制房号点击事件
function mahjong_ui:Onbtn_CopyRoomNum()
	local str = roomdata_center.roomnumber
	YX_APIManage.Instance:onCopy(str,function()UI_Manager:Instance():FastTip(GetDictString(6043))end)
end

function mahjong_ui:Onbtn_voicePressed(go, isPress)
	self.recordView:Press(go, isPress)
end


function mahjong_ui:Onbtn_TingBack()
	Notifier.dispatchCmd(cmdName.MAHJONG_TING_CARD)
end


-- todo  整理
function mahjong_ui:AddSoundDragEventListener(obj)
  if not IsNil(obj) then
    addDragCallbackSelf(obj, function (go, delta)
      self.recordView:Drag(go, delta)
    end)
  end
end



function mahjong_ui:InitPlayers()
	self.playerList = {}
    for i=1,4 do
    	local playerTrans = child(self.panelTr, "Anchor_Center/Players/Player"..i)
    	if playerTrans ~= nil then
    		local playerComponent = mahjong_player_ui.New(playerTrans)
	        if roomdata_center.MaxPlayer() == 2 and (i ~= 2 and i ~= 4 ) then
	    		  table.insert(self.playerList, playerComponent)
	    		  gps_data.SetTotalPlayer({1,3})
	        elseif roomdata_center.MaxPlayer() == 3 then
	          local myLogicSeat = player_seat_mgr.GetMyLogicSeat()
	          if myLogicSeat == 1 then
	            if i ~= 4 then
	              table.insert(self.playerList, playerComponent)
	              gps_data.SetTotalPlayer({1,2,3})
	            end
	          elseif myLogicSeat == 2 then
	            if i ~= 3 then
	              table.insert(self.playerList, playerComponent)
	              gps_data.SetTotalPlayer({1,2,4})
	            end
	          elseif myLogicSeat == 3 then
	            if i ~= 2 then
	              table.insert(self.playerList, playerComponent)
	              gps_data.SetTotalPlayer({1,3,4})
	            end
	          end
	        elseif roomdata_center.MaxPlayer() == 4 then
	          table.insert(self.playerList, playerComponent)
	          gps_data.SetTotalPlayer({1,2,3,4})
	        end
    		playerTrans.gameObject:SetActive(false)
    	end
    end
end



-- 吃杠选择界面
function mahjong_ui:InitCardShowView()
	self.cardShowView = require "logic/mahjong_sys/ui_mahjong/mahjong_show_card_ui"
	self.cardShowView:SetTransform(child(self.panelTr, "Anchor_Center/cardShowView"))
end

function mahjong_ui:InitVoteView()
	self.voteView = require("logic/voteQuit/vote_view"):create(child(self.panelTr, "Anchor_TopRight/voteView").gameObject)
	-- self.voteView = vote_quit_view.New()
	-- self.voteView:SetTransform(child(self.panelTr, "Anchor_TopRight/voteView"))
	self.voteView:Hide()
end

function mahjong_ui:InitOperTipsView()
  local class = require "logic/mahjong_sys/ui_mahjong/views/OperTipsView"
  self.operTipsView = class:create(child(self.panelTr, "Anchor_Center/opertips").gameObject)
  self.operTipsView:Hide()
end

-- 更多面板
function mahjong_ui:InitMoreBtnsView()
  self.moreBtnsView = require "logic/mahjong_sys/ui_mahjong/views/MoreBtnsView":
  create(nil, self.moreContainerClickAnimation, subComponentGet(self.panelTr, "Anchor_TopRight/morePanel/more/Sprite", typeof(UIRect)))
  self.moreBtnsView:SetGo(child(self.panelTr, "Anchor_TopRight/morePanel/bg").gameObject)
  self.moreBtnsView:SetActive(false)
end
-- 录音界面
function mahjong_ui:InitSoundView()
  local class = require "logic/mahjong_sys/ui_mahjong/views/RecordSoundView"
  self.recordView = class:create(child(self.panelTr, "Anchor_Center/sound").gameObject)
  self.recordView:SetActive(false)
end
-- 下注界面
function mahjong_ui:InitXiaPaoView( ... )
  self.xiaPaoView = require( "logic/mahjong_sys/ui_mahjong/game/game_buyHourse_view"):create()
end



--设置互动表情面板位置
function mahjong_ui:InitInteractionView(go,tbl)
  self.InteractionView = require "logic/interaction/InteractionView":
  create(go,nil,tbl)

  if self.InteractionView then
  	self.InteractionView:InitViewByConfig()
  end
end


function mahjong_ui:StartGetDataTimer()
	self.timeLabel.text = tostring(os.date("%H:%M"))
	self.getDateTimer = Timer.New(
		function()
			self.timeLabel.text = tostring(os.date("%H:%M"))
		end
		,30,-1)
	self.getDateTimer:Start()
end

function mahjong_ui:RegistEvent()
	Notifier.regist(cmdName.MSG_VOICE_INFO, slot(self.OnMsgVoiceInfoHandler, self))
  	Notifier.regist(cmdName.MSG_VOICE_PLAY_BEGIN, slot(self.OnMsgVoicePlayBegin, self))
  	Notifier.regist(cmdName.MSG_VOICE_PLAY_END, slot(self.OnMsgVoicePlayEnd, self))

  	Notifier.regist(cmdName.MSG_CHAT_TEXT, slot(self.OnMsgChatText, self))
  	Notifier.regist(cmdName.MSG_CHAT_IMAGA, slot(self.OnMsgChatImaga, self))
  	Notifier.regist(cmdName.MSG_CHAT_INTERACTIN, slot(self.OnMsgChatInteractin, self))
end

function mahjong_ui:UnregistEvent()
	Notifier.remove(cmdName.MSG_VOICE_INFO, slot(self.OnMsgVoiceInfoHandler, self))
  	Notifier.remove(cmdName.MSG_VOICE_PLAY_BEGIN, slot(self.OnMsgVoicePlayBegin, self))
  	Notifier.remove(cmdName.MSG_VOICE_PLAY_END, slot(self.OnMsgVoicePlayEnd, self))

  	Notifier.remove(cmdName.MSG_CHAT_TEXT, slot(self.OnMsgChatText, self))
  	Notifier.remove(cmdName.MSG_CHAT_IMAGA, slot(self.OnMsgChatImaga, self))
  	Notifier.remove(cmdName.MSG_CHAT_INTERACTIN, slot(self.OnMsgChatInteractin, self))
end


function mahjong_ui:OnMsgVoiceInfoHandler(fileID)
  mahjong_play_sys.ChatReq(3, tostring(fileID), nil)
end

function mahjong_ui:OnMsgVoicePlayEnd(viewSeat)
  self.playerList[viewSeat].SetSoundTextureState(false)
end

function mahjong_ui:OnMsgVoicePlayBegin(viewSeat)
  self.playerList[viewSeat].SetSoundTextureState(true)
end

function mahjong_ui:OnMsgChatText(para)
  viewSeat = para["viewSeat"]
  contentType = para["contentType"]
  content = para["content"]
  givewho = para["givewho"]
  self.playerList[viewSeat].SetChatText(content)
end

function mahjong_ui:OnMsgChatImaga(para)
  viewSeat = para["viewSeat"]
  contentType = para["contentType"]
  content = para["content"]
  givewho = para["givewho"]
  self.playerList[viewSeat].SetChatImg(content)
end

function mahjong_ui:OnMsgChatInteractin(para)
  viewSeat = para["viewSeat"]
  contentType = para["contentType"]
  content = para["content"]
  givewho = para["givewho"]
  self.playerList[givewho].ShowInteractinAnimation(viewSeat,content)
end

function mahjong_ui:GetTransformPanel()
	return self.panelTr
end


--显示准备按钮
function mahjong_ui:SetReadyBtnVisible(value)
	self.readyBtnGo:SetActive(value)
end

--邀请好友
function mahjong_ui:SetInviteBtnVisible(value)
	if self.inviteBtnGo then
		self.inviteBtnGo:SetActive(value)
	end
end

function mahjong_ui:SetCloseBtnVisible(value)
	self.closeRoomBtnGo:SetActive(value)
end

--复制房号按钮
function mahjong_ui:SetCopyRnoVisible(value)
	self.copyBtnGo:SetActive(value)
end

-- 打开准备相关按钮
function mahjong_ui:ShowReadyBtns()
	local isFirstJu = not roomdata_center.isRoundStart
	self:SetReadyBtnVisible(true)
	self:SetInviteBtnVisible(isFirstJu)
	self:SetCopyRnoVisible(isFirstJu)
	local isRoomOwner = player_seat_mgr.GetMyLogicSeat() == roomdata_center.ownerLogicSeat
	self:SetCloseBtnVisible(isRoomOwner and isFirstJu)
	-- if isRoomOwner then
	-- 	LuaHelper.SetTransformLocalX(self.inviteBtnGo.transform, 103)
	-- 	if isFirstJu then
	-- 		LuaHelper.SetTransformLocalX(self.closeRoomBtnGo.transform, -103)
	-- 	else
	-- 		LuaHelper.SetTransformLocalX(self.closeRoomBtnGo.transform, 0)
	-- 	end
	-- else
	-- 	LuaHelper.SetTransformLocalX(self.inviteBtnGo.transform, 0)
	-- end
	if isRoomOwner then
		if self.inviteBtnGo then
			LuaHelper.SetTransformLocalX(self.inviteBtnGo.transform, 193)
			if isFirstJu then
				LuaHelper.SetTransformLocalX(self.copyBtnGo.transform, 0)
				LuaHelper.SetTransformLocalX(self.closeRoomBtnGo.transform, -193)
			else
				LuaHelper.SetTransformLocalX(self.closeRoomBtnGo.transform, 0)
			end
		else
			if isFirstJu then
				LuaHelper.SetTransformLocalX(self.copyBtnGo.transform, 133)
				LuaHelper.SetTransformLocalX(self.closeRoomBtnGo.transform, -133)
			else
				LuaHelper.SetTransformLocalX(self.closeRoomBtnGo.transform, 0)
			end
		end

	else
		if self.inviteBtnGo then
			LuaHelper.SetTransformLocalX(self.copyBtnGo.transform, -133)
			LuaHelper.SetTransformLocalX(self.inviteBtnGo.transform, 133)
		else
			LuaHelper.SetTransformLocalX(self.copyBtnGo.transform, 0)
		end
	end
end

function mahjong_ui:HideAllReadyBtns()
	self:SetReadyBtnVisible(false)
	self:SetInviteBtnVisible(false)
	self:SetCloseBtnVisible(false)
	self:SetCopyRnoVisible(false)
end

function mahjong_ui:ShowHeadEffect(viewSeat)
	if self.headEffect then
		EffectMgr.StopEffect(self.headEffect)
	end
	for i=1,#self.playerList do 
		if i==viewSeat then
    		self.headEffect = self.playerList[i].SetHeadEffect(i==viewSeat)
    	end
  	end
end

function mahjong_ui:SetGameInfoVisible(value)
  value = value or false
  self.leftCardGo:SetActive(value)
  self.roundNumGo:SetActive(true)
end

function mahjong_ui:GetPlayerHuaPointPos(viewSeat)
	local player = self.playerList[viewSeat]
	if player == nil then
		return nil
	else
		return player.GetHuaPointPos()
	end
end

function mahjong_ui:ShowUIAnimation(effectName)
	mahjong_effectMgr:PlayUIEffectByName(effectName,self.panelTr)
end

-- 更新玩家花牌数量
function mahjong_ui:SetFlowerCardNum(viewSeat, count)
	if self.playerList[viewSeat] ~= nil then
		self.playerList[viewSeat].SetRoomCardNum(count)
	end
end

function mahjong_ui:SetMorePanel()
  self.moreBtnsView:SetActive(not self.moreBtnsView.isActive)
end

function mahjong_ui:moreContainerClickAnimation()
  instance.moreBtnGo:SendMessage("OnClick")
end

function mahjong_ui:SetPowerState(value)
	--[[local spName = ""
	if value > 0.8 then
		spName = "dc_1"
	elseif value >0.6 then
		spName = "dc_2"
	elseif value >0.4 then
		spName = "dc_3"
	elseif value >0.2 then
		spName = "dc_4"
	else 
		spName = "dc_5"
	end
	self.powerSp.spriteName = spName--]]
	local sp_width = 29
	self.powerSp.width = sp_width * value
end

-- 剩余牌数
function mahjong_ui:SetLeftCard( num )
	self.leftCardLabel.text = num
end

function mahjong_ui:CallPlayer(funcName, viewSeat, ...)
	if self.playerList[viewSeat] == nil then
		return
	end
	self.playerList[viewSeat][funcName](...)
end

--设置玩家信息
function mahjong_ui:SetPlayerInfo( viewSeat, usersdata)
	if self.playerList[viewSeat] ~= nil then
		self.playerList[viewSeat].Show(usersdata, viewSeat)
	end
end

function mahjong_ui:SetAllHuaPointVisible(value)
  if mode_manager.GetCurrentMode() ~= nil then
    local cfg = mode_manager.GetCurrentMode().config
    if cfg.gameCfg.flowerOnTable  then
      value = false
    end
  end
	for i = 1, #self.playerList do
		self.playerList[i].SetHuaPointVisible(value)
	end
end

function mahjong_ui:SetAllScoreVisible(value)
	for i = 1, #self.playerList do
		self.playerList[i].SetScoreVisible(value)
	end
end

--隐藏玩家信息
function mahjong_ui:HidePlayer(viewSeat)
	self:CallPlayer("Hide", viewSeat)
	-- if self.playerList[viewSeat] ~= nil then
	-- 	self.playerList[viewSeat].Hide()
	-- end
end

--设置托管状态
function mahjong_ui:SetPlayerMachine(viewSeat, isMachine )
	if self.playerList[viewSeat] ~= nil then
		self.playerList[viewSeat].SetMachine(isMachine)
	end
end

--更新玩家金币

function mahjong_ui:SetPlayerCoin( viewSeat,value)
	if self.playerList[viewSeat] ~= nil then
		--this.playerList[viewSeat].SetScore(value)
	end
end


--设置玩家在线状态
function mahjong_ui:SetPlayerLineState(viewSeat, isOnLine )
	-- if self.playerList[viewSeat] ~= nil then
	-- 	self.playerList[viewSeat].SetOffline(not isOnLine)
	-- end
	self:CallPlayer("SetOffline", viewSeat, not isOnLine)
end

--更新玩家分数
function mahjong_ui:SetPlayerScore( viewSeat,value)
	if self.playerList[viewSeat] ~= nil then
		self.playerList[viewSeat].SetScore(value)
	end
end

--设置玩家准备状态
function mahjong_ui:SetPlayerReady( viewSeat,isReady )
	--Trace("viewSeat-------------------------------------"..tostring(viewSeat))
	-- if self.playerList[viewSeat] ~= nil then
	-- 	self.playerList[viewSeat].SetReady(isReady)
	-- end
	self:CallPlayer("SetReady", viewSeat, isReady)
end

function mahjong_ui:SetBanker( viewSeat )
	-- if self.playerList[viewSeat] ~= nil then
	-- 	self.playerList[viewSeat].SetBanker(true)
	-- end
	self:CallPlayer("SetBanker", viewSeat, true)
end

--设置连庄数
function mahjong_ui:SetLianZhuang(viewSeat,lianZhuang)
  if self.playerList[viewSeat] ~= nil then
    self.playerList[viewSeat].SetLianZhuang(lianZhuang)
  end
end

function mahjong_ui:SetRoundInfo(cur, total)
	total = total or 4
  if roomdata_center.bSupportKe then
    self.roundNumLabel.text = "局数:" .. cur
  else
	 self.roundNumLabel.text = "局数:" .. cur .. "/" .. total 
  end
end


--显示下跑按钮
function mahjong_ui:ShowXiaPao(list)
  self.xiaPaoView:Show(list)
end

--显示下跑按钮
function mahjong_ui:HideXiaPao()
  self.xiaPaoView:Hide()
	--compTbl.xiapao.gameObject:SetActive(false)
end

function mahjong_ui:SetXiaoPao( viewSeat,beishu )
	if self.playerList[viewSeat] ~= nil then
		self.playerList[viewSeat].SetPao(beishu)
	end
end

function mahjong_ui:HideAllPaoState()
  for i = 1, #self.playerList do
    self.playerList[i].UpdateXiaPaoState(1)
  end
end

function mahjong_ui:UpdateXiaPaoState(viewSeat, state)
  if self.playerList[viewSeat] ~= nil then
    self.playerList[viewSeat].UpdateXiaPaoState(state)
  end
end

--隐藏所有吓跑
function mahjong_ui:HideAllXiaPao()
	for i=1,#self.playerList do
		self.playerList[i].HidePao()
	end
end

function mahjong_ui:ShowSpecialCard(value,index)
	local index = index or 1
	local obj = self.specialCardList[index]
	if obj == nil then
		obj = self:CreateSpecialCardUI( index )
		self.specialCardList[index] = obj
	end
	local comp = child(obj.transform,"card_bg/card").gameObject:GetComponent(typeof(UISprite))
	comp.spriteName = value.."_hand"
	obj.gameObject:SetActive(true)
end

function mahjong_ui:CreateSpecialCardUI( index )
	local obj = newobject(self.specialCardList[1])
	local pos = self.specialCardList[1].transform.localPosition
	obj.transform:SetParent(self.specialCardList[1].transform.parent, false)
	if index == 2 then
		obj.transform.localPosition = Vector3(pos.x + 70,pos.y,pos.z)
	elseif index == 3 then
		obj.transform.localPosition = Vector3(pos.x ,pos.y + 30,pos.z)
	elseif index == 4 then
		obj.transform.localPosition = Vector3(pos.x + 70,pos.y + 30,pos.z)
	end
	return obj
end

function mahjong_ui:GetSpeciaCardPos(index)
	local index = index or 1
	return self.specialCardList[index].position
end

function mahjong_ui:HideSpecialCard()
  if self.specialCardList ~= nil then
    for _,v in ipairs(self.specialCardList) do
      if not IsNil(v.gameObject) then
        v.gameObject:SetActive(false)
      end
    end
  end
end

--显示操作提示
function mahjong_ui:ShowOperTips()
	self.operTipsView:Show()
end

function mahjong_ui:GetOperTipShowState()
	return self.operTipsView.isActive
end

--隐藏操作提示
function mahjong_ui:HideOperTips(isNotHideShowCard)
	self.operTipsView:Hide()
	self.cardShowView:HideIfChi()
end

--游戏结束
function mahjong_ui:GameEnd()
	self:HideSpecialCard()
	self.cardShowView:Hide()
	self.cardShowView:ShowHuBtn(false)
	self:SetAllHuaPointVisible(false)
	for i = 1, #self.playerList do
		self.playerList[i].SetBanker(false)
	end
	self:ShowHeadEffect(0)
end

--重置所有状态，用于游戏结束后
function mahjong_ui:ResetAll()
	for i=1,#self.playerList do
		self.playerList[i].SetBanker(false)
		self.playerList[i].SetRoomCardNum(0)
	end
	--self.HideAllXiaPao()
	self:HideRewards()
	--self.HideHunPai()
	self:SetGameInfoVisible(false)
	self.cardShowView:Hide()
	self.cardShowView:ShowHuBtn(false)
	self:ShowHeadEffect(0)
	self:HideAllXiaPao()
	self:HideAllPaoState()
	-- self.HideAllReadyBtns()
end

function mahjong_ui:ShowZhuanTips()
	if self.zhuangTimer ~= nil then
		self.zhuangTimer:Stop()
	end
	if self.zhuanTipsGo ~= nil then
		self.zhuanTipsGo:SetActive(true)
		self.zhuangTimer = Timer.New(function ()
			if self.zhuanTipsGo  ~= nil then
				self.zhuanTipsGo :SetActive(false)
			end
			self.zhuangTimer = nil
			-- body
		end, 2)
		self.zhuangTimer:Start()
	end
end



function mahjong_ui:HideRewards()
	UI_Manager:Instance():CloseUiForms("mahjong_small_reward_ui")
end


function mahjong_ui:ShowHuang(callback)
	self.huangSpTr.localPosition = Vector3(0,500,0)
	self.huangSpTr:DOLocalMove(Vector3(0,100,0),1,false):SetEase(DG.Tweening.Ease.OutBounce):OnComplete(function()
		callback()
		self.huangGo:SetActive(false)
	end)
	self.huangGo:SetActive(true)
end


--双游 三游状态
function mahjong_ui:SetYoustatus(viewSeat,status)
	self.playerList[viewSeat].SetYoustatus(status)
end

function mahjong_ui:SetChild(trans,posName,scale,pos)
	local posName = posName or "Anchor_Center"
	local posTrans = child(self.panelTr, posName)
	trans:SetParent(posTrans)
	trans.localScale = scale or Vector3.one
	trans.localPosition = pos or Vector3.zero
end

function mahjong_ui:ShowTingBackBtn()
    self.tingBackGo:SetActive(true)
end

function mahjong_ui:HideTingBackBtn()
    self.tingBackGo:SetActive(false)
end


function mahjong_ui:InitLogic()
	self:InitBatteryAndSignal()
	self:RegistEvent()
end

function mahjong_ui:UnInit()
	self:UnInitBatteryAndSignal()
	self:UnregistEvent()

	if self.getDateTimer ~= nil then
		self.getDateTimer:Stop()
		self.getDateTimer = nil
	end

	if self.zhuangTimer ~= nil then
		self.zhuangTimer:Stop()
		self.zhuangTimer = nil
	end

	for i = 1, #self.playerList do
		self.playerList[i]:OnDestroy()
	end

	UI_Manager:Instance():CloseUiForms("chat_ui")

	self.moreBtnsView:SetActive(false)
	self.recordView:Hide()
	self:HideOperTips()
	self:HideSpecialCard()
	self.voteView:Hide()
	self.xiaPaoView:Hide()
end

function mahjong_ui:Update()
	if self.gvoice_engin ~= nil then
		self.gvoice_engin:Poll()
	end
end


function mahjong_ui:InitBatteryAndSignal()
	--监听电量及网络信号强度
    YX_APIManage.Instance:setBatteryCallback(function(msg)
      local msgTable = ParseJsonStr(msg)
      local precent = tonumber(msgTable.percent)  or 0
      self:SetPowerState(precent/100.0)
    end)
end

function mahjong_ui:UnInitBatteryAndSignal()
	YX_APIManage.Instance.batteryCallBack = nil
	YX_APIManage.Instance.signalCallBack = nil
end

return mahjong_ui
