--[[--
 * @Description: 牛牛UI 控制层
 * @Author:      xuemin.lin
 * @FileName:    niuniu_ui_controller.lua
 * @DateTime:    2017-10-12
 ]]


require "logic/gameplay/cmd_shisanshui"
require "logic/mahjong_sys/_model/room_usersdata_center"
require "logic/mahjong_sys/_model/room_usersdata"
require "logic/mahjong_sys/_model/operatorcachedata"
require "logic/mahjong_sys/_model/operatordata"
--require "logic/niuniu_sys/ui/niuniu_large_result"

local niuniu_ui_controller = class("niuniu_ui_controller")
local niuniu_ui = nil
function niuniu_ui_controller:ctor()
	self.niuniu_data_manage = require("logic.niuniu_sys.cmd_manage.niuniu_data_manage"):GetInstance()
	self.gvbl = player_seat_mgr.GetViewSeatByLogicSeat
	self.gvbln = player_seat_mgr.GetViewSeatByLogicSeatNum
	self.gmls = player_seat_mgr.GetMyLogicSeat
	self.isReconnect = false
	self.result_para_data = {}
	self.niuniu_ui = UI_Manager:Instance():GetUiFormsInShowList("niuniu_ui")
	self.tableComponent = nil
	self.isFirstJu = true
end

function niuniu_ui_controller:OnPlayerEnter( tbl )
	Trace(GetTblData(tbl))
	if niuniu_ui == nil then
		niuniu_ui = UI_Manager:Instance():GetUiFormsInShowList("niuniu_ui1")
	end
	if self.tableComponent == nil then
		self.tableComponent = require("logic.niuniu_sys.cmd_manage.niuniu_msg_manage"):GetInstance():GetNiuNiuSceneControllerInstance().tableComponent
	end
	local viewSeat = self.gvbl(tbl["_src"])
	local logicSeat = player_seat_mgr.GetLogicSeatByStr(tbl["_src"])
	local uid = tbl["_para"]["_uid"]
	local userdata = room_usersdata.New()
	userdata.name = tbl["_para"]["_uid"]
	userdata.uid =  tbl["_para"]["_uid"]
	userdata.coin = tbl["_para"]["score"]["coin"]
	userdata.viewSeat = viewSeat
	userdata.logicSeat = logicSeat
	userdata.vip  = 0
	userdata.saved = tbl["_para"]["saved"]
	if self.niuniu_data_manage.roomInfo.owner_uid == uid then
		userdata.owner = true
	end
	
	room_usersdata_center.AddUser(logicSeat,userdata)
	self.niuniu_ui:SetPlayerInfo( viewSeat, userdata)
    --加载头像
	local param={["uid"] = userdata.uid,["type"]=1}

	local nameDone = false
	local urlDone = false

	local name = hall_data.GetPlayerPrefs(uid.."name")
	local headurl = hall_data.GetPlayerPrefs(uid.."headurl")
	if name ~= nil and headurl ~= nil then
		userdata.name = name
		userdata.headurl = headurl
		room_usersdata_center.AddUser(logicSeat,userdata)
		self.niuniu_ui:SetPlayerInfo(viewSeat, userdata)
	end

	http_request_interface.getGameInfo(param,function (str) 
		local s=string.gsub(str,"\\/","/")
        local t=ParseJsonStr(s)

        if t["data"].nickname~=name then
			userdata.name = t["data"].nickname
			hall_data.SetPlayerPrefs(uid.."name",t["data"].nickname)
		end

		nameDone = true
		if urlDone then
			room_usersdata_center.AddUser(logicSeat,userdata)
		
			self.niuniu_ui:SetPlayerInfo(viewSeat, userdata)
		end
	end)

	http_request_interface.getImage({tbl["_para"]["_uid"]},function(str2)
		local s2=string.gsub(str2,"\\/","/")
    	local t2=ParseJsonStr(s2)
    	
    	if t2["data"][1].imageurl~=headurl then
			userdata.headurl = t2["data"][1].imageurl
			userdata.imagetype = t2["data"][1].imagetype
			hall_data.SetPlayerPrefs(uid.."headurl",t2["data"][1].imageurl)
		end

		urlDone = true
		if nameDone then
			room_usersdata_center.AddUser(logicSeat,userdata)
			self.niuniu_ui:SetPlayerInfo(viewSeat, userdata)
		end
	end)
	
	Trace("----------------------------------------------------SetPlayerInfo")
	
--	self.niuniu_ui:ShowDissolveRoom(false)
	local currentRoomPlayerCount = room_usersdata_center.GetRoomPlayerCount()
	if tonumber(currentRoomPlayerCount) == tonumber(self.niuniu_data_manage.roomInfo.nPlayerNum) then
		self.niuniu_ui.before_starting_operation_view:ShowInviteBtn(false) --如果进入的坐位号等于房间的人数，那么就是满员了，这时隐藏邀请按钮
	else
		self.niuniu_ui.before_starting_operation_view:ShowInviteBtn(true)
	end
	self.niuniu_ui:SetLeftCard()--显示房间局数
	self.niuniu_ui:SetGameInfo("房号:", self.niuniu_data_manage:GetNiuNiuRoomInfo().rno)
	if viewSeat < 1 then
		logError("座位出错，必须检查服务器数据！！！！！！！！！！！！！！！",viewSeat," ",tbl["_src"])
	end
	local isOwner = self.niuniu_data_manage:IsOwner()
	if isOwner == true then
		if roomdata_center.isStart == false then
			self.niuniu_ui.before_starting_operation_view:ShowDissolveRoom(true)--显有房主可以解散房间
		end
	else
		self.niuniu_ui.before_starting_operation_view:ShowDissolveRoom(false)
	end
	Trace("OnPlayerEnter------------------"..tostring(tonumber(gmls)))
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_ENTER) 
end

function niuniu_ui_controller:OnAskChooseBanker()
	local tbl = self.niuniu_data_manage.AskChooseBanker
	Trace("固定庄家:"..GetTblData(tbl))
	self.niuniu_ui:IsShowChooseBanker(true)
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmd_niuniu.ASK_CHOOSEBANKER)
end

function niuniu_ui_controller:OnBanker()
	Trace("定庄完成")
	self.niuniu_ui:IsShowChooseBanker(false)
	self.niuniu_ui:IsShowBankerList(false)--隐藏抢庄按钮
	local OnBankData = self.niuniu_data_manage.BankerData
	local viewSeat = self.gvbln(OnBankData._para.banker)
	local dice = OnBankData._para.dice
	--停止抢庄的倒计时,并隐藏倒计时按钮
	self.niuniu_ui:StopCountDownTimer()
	self.niuniu_ui:IsShowCountDownSlider(false)
	self.niuniu_ui:ShowXiaoPaoPanel(false)
	--隐藏头顶所有状态显示
	self.niuniu_ui:SetAllState(false)
	local mode = self.niuniu_data_manage.roomInfo.GameSetting.takeTurnsMode
	if mode ~= niuniu_rule_define.SUB_BULL_BANKER.SUB_BULL_BANKER_FIXED then
		local diceViewSeat = {}
		if dice ~= nil and #dice > 0 then
			for i,v in ipairs(dice) do
				local vs = self.gvbln(v)
				table.insert(diceViewSeat,vs)
			end
		end
		
		self.niuniu_ui:SetPlayBianKuang(diceViewSeat,viewSeat,true,function()			
			Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_BANKER)
			return
		end)
	else
		self.niuniu_ui:SetBanker(viewSeat)
		Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_BANKER)
	end
end

function niuniu_ui_controller:OnPlayerReady()
	tbl = self.niuniu_data_manage.ReadyData
	local viewSeat = self.gvbl(tbl["_src"])
	if viewSeat == 1 then
		self:ReSetAll()
		self.niuniu_ui:ShowDisTimerLab(false)
	else
		self.niuniu_ui:ResetPlayerByViewSeate(viewSeat)
	end
--	self.niuniu_ui:SetPlayerReady(viewSeat, true)
	self.niuniu_ui:SetState(viewSeat,true,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_YIZHUNBEI,self.tableComponent)
	Trace("玩家准备好"..tostring(viewSeat))
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_READY)
end

--提示抢庄(自由抢庄模式，明牌抢庄模式)
function niuniu_ui_controller:OnAskRobbanker()
	Trace("提示抢庄")
	local mode = self.niuniu_data_manage.roomInfo.GameSetting.takeTurnsMode
	local tbl = self.niuniu_data_manage.AskRobbankerData
	self.niuniu_ui:SetBankerBtnByMode(mode,tbl)
	--显示抢庄中
	self.niuniu_ui:SetAllState(true,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_QIANGZHUANGZHONG,self.tableComponent)
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE,cmd_niuniu.ASK_ROBBANKER )
end

--抢庄倍数通知
function niuniu_ui_controller:OnRobbanker(tbl)
	Trace("抢庄倍数通知")
	--显示抢与不抢
	local robbankerData = self.niuniu_data_manage.OnRobbankerData
	local viewSeat =self.gvbln(robbankerData._para._chair)
	 --0表示不抢 >0表示抢
	local state = robbankerData._para.nBeishu
	if state == 0 then
		self.niuniu_ui:SetState(viewSeat,true,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_BUQIANGZHUAN,self.tableComponent)
	else
		self.niuniu_ui:SetState(viewSeat,false,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_QIANGZHUANG,self.tableComponent)
		self.niuniu_ui:SetBeiShu(viewSeat,state,"倍")
	end
	if viewSeat == 1 then
		self.niuniu_ui:IsShowBankerList(false)
	end
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmd_niuniu.ROBBANKER)
end

function niuniu_ui_controller:OnGameStart()	
	local subRound = self.niuniu_data_manage.GameStartData._para.subRound
	self.niuniu_ui:SetLeftCard(subRound)
--	self.niuniu_ui:SetAllPlayerReady(false)
	self.niuniu_ui:SetAllState(false)
	self.niuniu_ui.before_starting_operation_view:ShowInviteBtn(false)
	self.niuniu_ui.before_starting_operation_view:ShowDissolveRoom(false)
--	self.niuniu_ui:IsShowBeiShuiBtn(false)
	--self.niuniu_ui:ShowDisTimerLab(false)
	self.niuniu_ui:SetXiaoPao(0)
	roomdata_center.isStart = true
	ui_sound_mgr.PlaySoundClip(data_center.GetAppConfDataTble().appPath.."/sound/common/duijukaishi")
	--播放发牌，洗牌动画 do something
	coroutine.start(function()
		self.niuniu_ui:PlayGameStartAnimation()
		coroutine.wait(2)
		Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_GAMESTART)
	end)
end


--提示亮牌
function niuniu_ui_controller:OnAskOpenCard()
	Trace("提示亮牌")
	local tbl = self.niuniu_data_manage.OnAskOpenCardData 
	if self.isReconnect == false then
		self.niuniu_ui:SetAllState(true,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_CUOPAIZHONG,self.tableComponent)
	end
	self.niuniu_ui.before_starting_operation_view:IsShowCuoPaiBtn(true)
	self.niuniu_ui.before_starting_operation_view:IsShowOpenCardBtn(true)
	local timeo = tbl.timeo - tbl.time
	self.niuniu_ui:SetAskPoenCard(timeo,function()
		self.niuniu_ui:StopCountDownTimer()
		self.niuniu_ui:IsShowCountDownSlider(false)
		self.niuniu_ui:ShowXiaoPaoPanel(false) 
	end)
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmd_niuniu.ASK_OPENCARD)
end

--某人已经亮牌
function niuniu_ui_controller:OnOpenCard(tbl)
	Trace("某人已经亮牌")
	local tbl = self.niuniu_data_manage.OnOpenCardData
	local viewSeat = self.gvbl(tbl._src)
	self.niuniu_ui:SetState(viewSeat,false,"",self.tableComponent)
	if viewSeat == 1 then
		self.niuniu_ui.before_starting_operation_view:IsShowOpenCardBtn(false)
	end
	
end

function niuniu_ui_controller:OnCompareResult()
	self.niuniu_ui:SetAskPoenCard(0)
	self.niuniu_ui.before_starting_operation_view:IsShowOpenCardBtn(false)
	self.niuniu_ui.before_starting_operation_view:IsShowCuoPaiBtn(false)
	self.niuniu_ui:SetFinishState(false)
	self.niuniu_ui:SetTiposition(false)
	self.niuniu_ui:SetAllState(false)
end

 function niuniu_ui_controller:OnCompareStart(tbl)
	self.niuniu_ui.before_starting_operation_view:ShowInviteBtn(false)
	self.niuniu_ui.before_starting_operation_view:ShowDissolveRoom(false)
	self.niuniu_ui:ReSetReadCard(false)

	coroutine.start(function ()
		 --播放比牌动画
   		self.niuniu_ui:PlayerStartGameAnimation()
    	Trace("开始播放比牌动画")
    	coroutine.wait(1)
   		Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmd_shisanshui.COMPARE_START)
	end)
end

 function niuniu_ui_controller:OnGameDeal( tbl )
	self.niuniu_ui:IsShowBeiShuiBtn(false)
	self.isReconnect = false
end


function niuniu_ui_controller:OnGameEnd()
	self.niuniu_ui:SetAllState(false)
end

 function niuniu_ui_controller:OnGameRewards()
	
	local rewardData = self.niuniu_data_manage.SmallRewardData
	local rewards = rewardData._para.rewards
	local banker = self.gvbln(rewardData._para.banker)
	coroutine.start(function()		
		for i,v in ipairs(rewards) do
			local viewSeat = self.gvbl(v._chair)
			if v.all_score < 0 then
				local viewSeat = self.gvbl(v._chair)
				if viewSeat ~= banker then
					self.niuniu_ui:SetPlayerLightFrame(1)
					self.niuniu_ui:glodCoinFlyAnimation(viewSeat,banker)
					if v.all_score == nil then v.all_score = 0 end
					self.niuniu_ui:ShowPlayerTotalPoints(viewSeat, tonumber(v.all_score))
				else
					self.niuniu_ui:ShowPlayerTotalPoints(viewSeat, tonumber(v.all_score))
				end
			end
		end
		coroutine.wait(0.5)
		self.niuniu_ui:ReSetAllGoldCoinAnimationState()
		for i,v in ipairs(rewards) do
			if v.all_score > 0 then
				local viewSeat = self.gvbl(v._chair)
				if viewSeat ~= banker then
					local score = v.all_score
					if score == nil then score = 0 end
					self.niuniu_ui:ShowPlayerTotalPoints(viewSeat, tonumber(score))
					self.niuniu_ui:SetPlayerLightFrame(viewSeat)
					self.niuniu_ui:glodCoinFlyAnimation(banker,viewSeat)
					if v.all_score == nil then v.all_score = 0 end
					self.niuniu_ui:ShowPlayerTotalPoints(viewSeat, tonumber(v.all_score))
				else
					self.niuniu_ui:ShowPlayerTotalPoints(viewSeat, tonumber(v.all_score))
				end
			end
		end
		coroutine.wait(1)
		self.niuniu_ui:ReSetAllGoldCoinAnimationState()
		Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_SMALL_SETTLEMENT) --确认完成结算完成消息
	end)
end

--牛牛大结算处理
 function niuniu_ui_controller:ShowLargeResult(tbl)
	if (tbl ~= nil ) then
		local niuniu_largeResult_data = require("logic/niuniu_sys/large_result/niuniu_largeResult_data"):create(tbl._para)
		UI_Manager:Instance():ShowUiForms("poker_largeResult_ui",UiCloseType.UiCloseType_CloseNothing,function() 
			Trace("Close poker_largeResult_ui")
		end,niuniu_largeResult_data)
	end
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE,cmdName.GAME_SOCKET_BIG_SETTLEMENT)
end

 function niuniu_ui_controller:OnAskReady()
	tbl = self.niuniu_data_manage.AskReadyData
	local timeo = tbl.timeo
	local timeEnd = timeo
	Trace("等待举手, 时间："..tostring(timeo).."  结束时间： "..tostring(timeEnd))

	room_data.SetReadyTime(timeEnd - tbl.time)
	if(timeEnd ~= -1 ) then 
		self.niuniu_ui:dismissLeftime(timeEnd)
	end

	self.niuniu_ui:SetLeftCard()
	self.niuniu_ui.before_starting_operation_view:ShowReadyBtn()
	--如果断线重连回来，没有比牌结果，会导致这个按钮没有清除，所以得在这里清一下。
	self.niuniu_ui.before_starting_operation_view:IsShowCuoPaiBtn(false)
	self.niuniu_ui:SetFinishState(false)
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_ASK_READY)
end

 function niuniu_ui_controller:OnSyncBegin( tbl )
	Trace("重连同步开始")
	self.isReconnect = true
	if self.niuniu_ui.voteView ~= nil then
		self.niuniu_ui.voteView:Hide()
	end
	self:ReSetAll()
	self.niuniu_ui:SetAllState(false)
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_SYNC_BEGIN)
end

--重连同步
 function niuniu_ui_controller:OnSyncTable()
	--[[
	   prepare     = "deal",       --发牌(4张)
            deal        = "robbanker",  --抢庄
            robbanker   = "mult",        --下注
            mult         = "deallast",    --发最后一张牌
            deallast    = "opencard",   --亮牌
            opencard    = "compare",    --比牌
            compare     = "reward",     --结算
            reward      = "gameend",    --游戏结束
            gameend     = "prepare",    --下一局
]]
	Trace("重连同步表")
	local tbl  = self.niuniu_data_manage.OnSyncTableData
	local mode = self.niuniu_data_manage.roomInfo.GameSetting.takeTurnsMode
	local nCurrJu = self.niuniu_data_manage.roomInfo.nCurrJu
	local sCurrStage = tbl._para.sCurrStage
	self.niuniu_ui.before_starting_operation_view:ShowDissolveRoom(false)
	roomdata_center.isStart = false
	
	if mode == niuniu_rule_define.SUB_BULL_BANKER.SUB_BULL_BANKER_FIXED then
		if sCurrStage ~= "choosebanker" and sCurrStage ~= "prepare"  then
			roomdata_center.isStart = true
		else
			if nCurrJu > 1 then
				roomdata_center.isStart = true
			end
		end
	else
		if sCurrStage ~= "prepare"  then
			roomdata_center.isStart = true
		else
			if nCurrJu > 1 then
				roomdata_center.isStart = true
			end
		end
	end
	
	local banker = tbl._para.banker--庄家的id
	if banker ~= nil and banker > 0 then
		if self.niuniu_data_manage.BankerData == nil then
			self.niuniu_data_manage.BankerData = {}
			local _para = {}
			_para.banker = banker
			self.niuniu_data_manage.BankerData._para = _para
		else
			self.niuniu_data_manage.BankerData._para.banker = banker
		end
		
		self.niuniu_ui:HideAllBanker()
		local viewSeat = self.gvbln(banker)
		self.niuniu_ui:SetBanker(viewSeat)
		local bankerBeishu = tbl._para.bankerBeishu
		if bankerBeishu ~= nil then    --(明牌抢庄)庄家倍数
			self.niuniu_ui:SetBeiShu(viewSeat,bankerBeishu,"倍")
		end
	end
	
	local playerState = tbl._para.stPlayerState
	if playerState ~= nil then		 --玩家状态0没人 1 没准备 2已准备
		for i ,v in ipairs(playerState) do
			local viewSeat = self.gvbln(i)
			if v == 1 then
			--	self.niuniu_ui:SetPlayerReady(viewSeat,false)
				self.niuniu_ui:SetState(viewSeat,false,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_YIZHUNBEI,self.tableComponent)
				if viewSeat == 1 then
					self.niuniu_ui.before_starting_operation_view:ShowReadyBtn()
					
					--固定庄家模式，先选庄再准备，所以没有庄家的时候，不显示准备按钮
				
					if	mode == niuniu_rule_define.SUB_BULL_BANKER.SUB_BULL_BANKER_FIXED and banker == 0 then
						self.niuniu_ui.before_starting_operation_view:HideReadyBtn()
					end
					
					--如果还没准备并且是第一局而且是房主本人，那么可以解散房间
					if nCurrJu <= 1 then
						if self.niuniu_data_manage:IsOwner() and roomdata_center.isStart ==false then
							self.niuniu_ui.before_starting_operation_view:ShowDissolveRoom(true)
						end
					end
				end
			elseif v == 2 then
				if tbl._para.sCurrStage ~= "prepare" then
				--	self.niuniu_ui:SetPlayerReady(viewSeat,false)
					self.niuniu_ui:SetState(viewSeat,false,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_YIZHUNBEI,self.tableComponent)
				else
				--	self.niuniu_ui:SetPlayerReady(viewSeat,true)
					self.niuniu_ui:SetState(viewSeat,true,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_YIZHUNBEI,self.tableComponent)
				end
				
				if viewSeat == 1 then
					self.niuniu_ui.before_starting_operation_view:HideReadyBtn()
					if nCurrJu <= 1 then
						if self.niuniu_data_manage:IsOwner()  and roomdata_center.isStart ==false then
							self.niuniu_ui.before_starting_operation_view:ShowDissolveRoom(true)
						end
					end
				end
			end
		end
	end
	local playersUid = tbl._para.stPlayerUid ----玩家uid
	local playerRob = tbl._para.stPlayerRob		-- --玩家抢庄状态：-1还没操作, 0不抢，>0抢庄倍数
	if playerRob ~= nil and tbl._para.sCurrStage == "robbanker" then
		for i,v in ipairs(playerRob) do
			local viewSeat = self.gvbln(i)
			if v == 0 then
				self.niuniu_ui:SetState(viewSeat,true,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_BUQIANGZHUAN,self.tableComponent)
			elseif v > 0 then
					self.niuniu_ui:SetState(viewSeat,false,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_QIANGZHUANG,self.tableComponent)
					self.niuniu_ui:SetBeiShu(viewSeat,v,"倍")
					logError("viewSeat :"..tostring(viewSeat).." "..v.."倍")
			end
		end
	end	
	local bankerViewSeat = self.gvbln(tbl["_para"]["banker"]) 
	local multLogicState = tbl["_para"]["stPlayerMult"]
	if (tbl~=nil and tbl["_para"]["sCurrStage"] == "mult") then
		self.niuniu_ui:RefreshXiaZhuZhong(bankerViewSeat,multLogicState,self.tableComponent)
	end
	if multLogicState ~= nil  then	--玩家下注状态：-1还没操作，>0下注底分 得显示按钮跟手排
		for i,v in ipairs(multLogicState) do
			local viewSeat = self.gvbln(i)			
			if v > 0 then
				self.niuniu_ui:SetBeiShu(viewSeat,v,"分")
				logError("viewSeat :"..tostring(viewSeat).." "..v.."分")
			end
		end
	end
		--玩家亮牌状态：-1没亮，1亮
	local stPlayerBright = tbl["_para"]["stPlayerBright"]
	
	if (tbl~=nil and tbl["_para"]["sCurrStage"] == "opencard") then
		if stPlayerBright ~= nil then
			for i,v in ipairs(stPlayerBright) do
			local viewSeat = self.gvbln(i)			
			if v == -1 then
				self.niuniu_ui:SetState(viewSeat,true,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_CUOPAIZHONG,self.tableComponent)
			elseif v == 1 then
				self.niuniu_ui:SetState(viewSeat,false,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_CUOPAIZHONG,self.tableComponent)
			end
		end
		end
	end
	
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_SYNC_TABLE)
end

 function niuniu_ui_controller:OnSyncEnd( tbl )
	Trace("重连同步结束")
	Trace(GetTblData(tbl))
	self.isReconnect = false
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_SYNC_END)
end

 function niuniu_ui_controller:OnLeaveEnd( tbl )
	Trace("用户离开")

	local viewSeat = self.gvbl(tbl._src)
	self.niuniu_ui:HidePlayer(viewSeat)
	local logicSeat =  player_seat_mgr.GetLogicSeatByStr(tbl["_src"])
	local viewSeat = self.gvbln(logicSeat)
--	self.niuniu_ui:SetPlayerReady(viewSeat,false)
	self.niuniu_ui:SetState(viewSeat,false,niuniu_rule_define.SUB_BULL_STATE.SUB_BULL_STATE_YIZHUNBEI,self.tableComponent)
	room_usersdata_center.RemoveUser(logicSeat)
	local sessionData = player_data.GetSessionData()
	if tonumber(tbl._para._chair) == tonumber(sessionData["_chair"]) then
		room_usersdata_center.RemoveAll()
	end
	local currentRoomPeopleCount = room_usersdata_center.GetRoomPlayerCount()

	local roomMaxPeopleCount = self.niuniu_data_manage.roomInfo.nPlayerNum
	if tonumber(currentRoomPeopleCount) < tonumber(roomMaxPeopleCount) then
		self.niuniu_ui.before_starting_operation_view:ShowInviteBtn(true)
	else
		self.niuniu_ui.before_starting_operation_view:ShowInviteBtn(false)
	end
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_PLAYER_LEAVE)
end

 function niuniu_ui_controller:OnPlayerOffline()
	local tbl =  self.niuniu_data_manage.offlineData
	Trace(GetTblData(tbl))
	local viewSeat = self.gvbl(tbl._src)
	if  tbl._para.active == nil  then
		if  roomdata_center.isStart == true then
		else
			self.niuniu_ui:HidePlayer(viewSeat)
		end
	elseif  tbl._para.active ~= nil and tbl._para.active == 1 then
		self.niuniu_ui:SetPlayerLineState(viewSeat, false)
	elseif tbl._para.active ~= nil and tbl._para.active == 0 then
		self.niuniu_ui:SetPlayerLineState(viewSeat, true)
	else
		self.niuniu_ui:SetPlayerLineState(viewSeat, false)
	end
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_SOCKET_OFFLINE)
end

--//////////////////////////投票 start////////////////////////////

 function niuniu_ui_controller:OnVoteDraw(tbl)
	local viewSeat = self.gvbl(tbl["_src"])
	--vote_quit_ui.AddVote(tbl._para.accept, viewSeat)
	Notifier.dispatchCmd(GameEvent.OnAddVote, tbl._para.accept, viewSeat)
	self.niuniu_ui.voteView:AddVote(tbl._para.accept, viewSeat)
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_NIT_VOTE_DRAW)
end

 function niuniu_ui_controller:OnVoteStart(tbl)
	Trace("OnVoteStart~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
	local viewSeat = self.gvbln(tbl["_para"].who)
	if viewSeat == 1 then
		roomdata_center.isSelfVote = true
	end
	local time = tbl._para.timeout
	local name = room_usersdata_center.GetUserByViewSeat(viewSeat).name
	if viewSeat ~= 1 then
		-- vote_quit_ui.Show(name, function(value) 
		-- 	if value == true then
		-- 	end
		-- 	niuniu_play_sys.VoteDrawReq(value)
		--  end, roomdata_center.MaxPlayer(), time)
		UI_Manager:Instance():ShowUiForms("VoteQuitUI", nil, nil, name, 
			function(value)	niuniu_play_sys.VoteDrawReq(value) end, time)
	end
	self.niuniu_ui.voteView:Show(roomdata_center.MaxPlayer())
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_VOTE_DRAW_START)
end

 function niuniu_ui_controller:OnVoteEnd(tbl)
	local confirm = tbl._para.confirm
	if confirm == false and roomdata_center.isSelfVote == true then
		-- UI_Manager:Instance():ShowGoldBox(GetDictString(6048),  {function() UI_Manager:Instance():CloseUiForms("message_box") end},
		-- {"fonts_01"})
		MessageBox.ShowSingleBox(GetDictString(6048))
	end
	roomdata_center.isSelfVote = false

	UI_Manager:Instance():CloseUiForms("VoteQuitUI")
	self.niuniu_ui.voteView:Hide()
	--true: 协商和局成立； false:协商和局失败或超时
	if tbl["_para"]["confirm"] == true then
	
	end
	
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.GAME_VOTE_DRAW_END)
end

--更新玩家积分
 function niuniu_ui_controller:RoomSumScore(tbl)
	Trace("更新玩家积分")
	local _para = tbl._para
	
	local viewSeat = self.gvbl(tbl["_src"])
	local score = _para["nRoomSumScore"]
	--local viewSeat = _para["_chair"]
	print("总分： "..tostring(score))
	if score == nil then score = 0 end
	self.niuniu_ui:AddPlayerScore(viewSeat, tonumber(score))
	Trace("座位号:"..tostring(viewSeat).." 总积分:"..tostring(score))
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmd_shisanshui.ROOM_SUM_SCORE)
end
--点击亮牌之后，UI显示牛几的按钮
 function niuniu_ui_controller:RecommondCard(nCardType)
	if nCardType == nil then
		local dealData = self.niuniu_data_manage.DealData
		if dealData == nil then
			logError("发牌数据为空！")
			return
		end
		nCardType = dealData._para.nCardType
	end
	self.niuniu_ui.before_starting_operation_view:IsShowCuoPaiBtn(false)
	self.niuniu_ui:SetTiposition(false)
	self.niuniu_ui.before_starting_operation_view:IsShowOpenCardBtn(false,nCardType)
	niuniu_play_sys.OpenCardReq()
	--开牌了，隐藏搓 牌状态提示
	self.niuniu_ui:SetState(1,false,"",self.tableComponent)
	Trace("点击亮牌之后，UI显示牛几的按钮:"..tostring(nCardType))
end

--//////////////////////////投票 end//////////////////////////////

 function niuniu_ui_controller:OnPointsRefresh( tbl )
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.F1_POINTS_REFRESH)
end

--聊天
 function niuniu_ui_controller:OnPlayerChat( tbl )
	local viewSeat = self.gvbl(tbl._src)
	local contentType = tbl["_para"]["contenttype"]
	local content = tbl["_para"]["content"]
	local givewho = self.gvbl(tbl["_para"]["givewho"])

	if roomdata_center.isStart == true then		
	else		
	end
--	chat_ui:DealChat(viewSeat,contentType,content,givewho)
	chat_model.DealChat(viewSeat,contentType,content,givewho)
end

--提示闲家选择倍数
 function niuniu_ui_controller:OnAskMult()
	Trace("提示下注选择分数")
	local tbl = self.niuniu_data_manage.OnAskMultData
	local timeOut = tbl["timeo"] - tbl.time
	self.niuniu_ui:SetXiaoPao(tonumber(timeOut),function()end)
	self.niuniu_ui:SetBeiShuBtnCount()
	sessionData = player_data.GetSessionData()
	if self.niuniu_data_manage:IsBanker() then
		self.niuniu_ui:SetXiaoPaoLabelByStr("请等待其他玩家下注...")
		self.niuniu_ui:IsShowBeiShuiBtn(false)
	else
		self.niuniu_ui:IsShowBeiShuiBtn(true)
	end
	--除了庄家，显示下注中
	if self.isReconnect == false then
		local bankerData = self.niuniu_data_manage.BankerData
		if bankerData == nil then
			logError("庄家的数据不能为空！！！！！")
		else
			local bankerViewSeat = self.gvbln(bankerData._para.banker)
			self.niuniu_ui:SetXiaZhuZhong(bankerViewSeat,self.tableComponent)
		end
	end
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmd_shisanshui.FuZhouSSS_ASKMULT)
end

--选择倍数回调
 function niuniu_ui_controller:OnMult(tbl)
	local tbl = self.niuniu_data_manage.OnMultData
	local para = tbl["_para"]
	local p1 = para["p1"]
	local p2 = para["p2"]
	local p3 = para["p3"]
	local p4 = para["p4"]
	local p5 = para["p5"]
	local p6 = para["p6"]
	local viewSeat = 1
	local value = 0
	if p1 ~= nil then
		viewSeat =  self.gvbln(1)
		value = p1
	elseif p2 ~= nil  then
		viewSeat = self.gvbln(2)
		value = p2
	elseif p3 ~= nil then
		viewSeat =  self.gvbln(3)
		value = p3
	elseif p4 ~= nil then
		viewSeat =  self.gvbln(4)
		value = p4
	elseif p5 ~= nil then
		viewSeat =  self.gvbln(5)
		value = p5
	elseif p6 ~= nil then
		viewSeat =  self.gvbln(6)
		value = p6
	end
	if viewSeat == 1 then
		self.niuniu_ui:IsShowBeiShuiBtn(false)
	end
	self.niuniu_ui:SetState(viewSeat,false,"",self.tableComponent)
	self.niuniu_ui:SetBeiShu(viewSeat,value,"分")
	Trace("个人选择倍数回调，座位"..tostring(viewSeat).."倍数"..tostring(value))
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmd_shisanshui.FuZhouSSS_MULT)
end

--所有人倍数回调
 function niuniu_ui_controller:OnAllMult()
	Trace("所有人倍数回调")
	self.niuniu_ui:IsShowBeiShuiBtn(false)
	self.niuniu_ui:StopCountDownTimer()
	self.niuniu_ui:IsShowCountDownSlider(false)
	self.niuniu_ui:ShowXiaoPaoPanel(false)
	
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE,cmd_shisanshui.FuZhouSSS_ALLMULT)
end

--显示特殊排型动画
 function niuniu_ui_controller:OnSpecialCardType(tbl)
	self.niuniu_ui:ShowSpecialCardIcon(tbl)
end

function niuniu_ui_controller:ShowSpecialCardAnimation(tbl)
	self.niuniu_ui:ShowSpecialCardAnimation(tbl)
end

--显示理牌提示
 function niuniu_ui_controller:OnReadCard(tbl)
	self.niuniu_ui:SetReadCardState(tbl)
end

function niuniu_ui_controller:EarlySettlement(tbl)
	Trace("管理员强制提前进行游戏结算")
	UI_Manager:Instance():FastTip("本房间已被管理员解散，牌局即将结束")
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.MSG_EARLY_SETTLEMENT)
end

function niuniu_ui_controller:FreezeUser(tbl)
	Trace("管理员封号")
	UI_Manager:Instance():CloseUiForms("message_box")
	game_scene.gotoLogin()
    game_scene.GoToLoginHandle()
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.MSG_FREEZE_USER)
end

function niuniu_ui_controller:FreezeOwner(tbl)
	Trace("管理员封号")
	UI_Manager:Instance():CloseUiForms("message_box")
	game_scene.gotoLogin()
    game_scene.GoToLoginHandle()
	Notifier.dispatchCmd(cmdName.MSG_HANDLE_DONE, cmdName.MSG_FREEZE_OWNER)
end

--获得最后一张牌的坐标
function niuniu_ui_controller:OnGetLastCardPosition(position)
	self.niuniu_ui:SetTiposition(true,position)
end

function niuniu_ui_controller:SetFinishState(tbl)
	local viewSeat = tbl.viewSeat
	self.niuniu_ui:SetFinishState(true,tbl.position)
end

function niuniu_ui_controller:ReSetAll()
	self.niuniu_ui:ResetAll()
end

function niuniu_ui_controller:Init()

end

function niuniu_ui_controller:UInit()

end

---------------缓存头像到本地-----------------
function niuniu_ui_controller:GetHeadPic(textureComp, url )
	Trace("GetHeadPic "..url)

	DownloadCachesMgr.Instance:LoadImage(url,function( code,texture )
		--Trace("!!!!!!!!!state:"..tostring(state))
		textureComp.mainTexture = texture 
	end)
end

function niuniu_ui_controller:getuserimage(tx,itype,iurl)
    itype=itype or data_center.GetLoginUserInfo().imagetype
    iurl=iurl or data_center.GetLoginUserInfo().imageurl
    local imagetype=itype
    local imageurl=iurl
    if  tonumber(imagetype)~=2 then
        imageurl="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=190291064,674331088&fm=58"  
    end
    http_request_interface.getimage(imageurl,tx.width,tx.height,function (states,tex)tx.mainTexture=tex end)
end

return niuniu_ui_controller
