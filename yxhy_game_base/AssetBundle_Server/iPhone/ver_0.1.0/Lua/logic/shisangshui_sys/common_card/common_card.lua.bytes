--[[--
 * @Description: 发牌下来时判断特殊牌型
 * @Author:      zhy
 * @FileName:    prepare_special.lua
 * @DateTime:    2017-07-05
 ]]
 
require "logic/shisangshui_sys/place_card/place_card"
--require "logic/shisangshui_sys/shisangshui_play_sys"
require "logic/shisangshui_sys/lib/lib_sp_card_logic"
require "logic/shisangshui_sys/card_define"
local base = require("logic.framework.ui.uibase.ui_window")
local common_card = class("common_card",base)

function common_card:ctor()
	base.ctor(self)
	--最大等待时间
	self.timeSecond = 3
	--所有牌
	self.my_cards = {}

	self.cardTranTbl = {}
	--特殊牌型
	self. card_type = nil

	self.card_type_bg = nil

	self.bg_type_altasName = {
		[1] = "wulong",                          --散牌(乌龙)    
		 [2] = "duizi",                          --一对
		 [3] = "erdui",                          --两对
		 [4] = "santiao",                             --三条
		 [5] = "shunzi",                        --顺子
		 [6] = "tonghua",                             --同花
		 [7] = "hulu",                        --葫芦
		 [8] = "tiezhi",                              --铁支(炸弹)
		 [9] = "tonghuashun",                    --同花顺
		 [10] = "wutong",                           -- 五同
		[11] = "chongsan",						--冲三
		[12] = "zhongdunhulu",					--中墩葫芦
		[13] = "duiguichongqian"				--对鬼冲三
	}
end 

function common_card:OnInit()
   self:initinfor()
end

function common_card:OnOpen( ... )
	if self.args ~= nil and table.nums(self.args) == 5 then
		local cards = self.args[1]
		local nSpecialType = self.args[2]
		local pos = self.args[3]
		local localSecond = self.args[4]
		local index = self.args[5]
		self:Show(cards, nSpecialType, pos, localSecond,index)
	end
end

function common_card:Show(cards, nSpecialType, pos, localSecond,index)
	Trace("显示普通牌型"..tostring(nSpecialType))
	if tonumber(nSpecialType) == 4 then 
		if index == 1 then
			-- 在首墩就叫冲
			nSpecialType = 11
		end
	elseif tonumber(nSpecialType) == 7 then
		if index == 2 then
			nSpecialType = 12
		end
	end	
	ui_sound_mgr.PlaySoundClip(data_center.GetResRootPath().."/sound/cardtpye_girl/normaltype/".. NormalTypeMusicConfig[nSpecialType])
	if table.nums(self.cardTranTbl) ~= 0 then
		for i, v in pairs(self.cardTranTbl) do
			if v ~= nil then
				v.gameObject.transform.parent = nil
				v.gameObject:SetActive(false)
				GameObject.Destroy(v.gameObject)
			--	GameObject.DestroyImmediate(v.gameObject)
			end
		end
		self.cardTranTbl = {}
	end
	self.transform.localPosition = pos
	if localSecond ~= nil then
		self.timeSecond =0.65
	else
		self.timeSecond =0.65
	end
	self.transform.localScale = Vector3.New(1, 1, 1)
	--OutBounce
	self.transform:DOScale(Vector3(1.1, 1.1, 1.1), 0.2):SetEase(DG.Tweening.Ease.Linear):OnComplete(function ()
			self.transform:DOScale(Vector3(1,1,1), 0.2):SetEase(DG.Tweening.Ease.Linear)
			end)
	Trace("---------cards------"..tostring(cards).."  dun: "..tostring(dun))
	my_cards = cards
	self:LoadAllCard(cards, nSpecialType)
end

function common_card:initinfor()
	self.card_type_bg = componentGet(child(self.transform, "bg"), "UISprite")
end

function common_card:LoadAllCard(cards, nSpecialType)
	local min = 1
	local max = 5
	if #cards == 3 then
		min = 2
		max = 4
	end
	for i = 1, #cards do
		local cardParent = child(self.transform, "cardGrid/"..tostring(min))
		min = min + 1
		if cardParent == nil then
			print("cardGrid == nil")
			return
		end
		local cardObj = newNormalUI(data_center.GetResPokerCommPath().."/card/"..tostring(cards[i]), cardParent)
		self.cardTranTbl[i] = cardObj
		cardObj.transform.localRotation = Quaternion.identity
		componentGet(child(self.cardTranTbl[i].transform, "bg"),"UISprite").depth = i * 2 + 3
		componentGet(child(self.cardTranTbl[i].transform, "num"),"UISprite").depth = i * 2 + 5
		componentGet(child(self.cardTranTbl[i].transform, "color1"),"UISprite").depth = i * 2 + 5
		componentGet(child(self.cardTranTbl[i].transform, "color2"),"UISprite").depth = i * 2 + 5
		if room_data.GetSssRoomDataInfo().isChip == true and cards[i] == 40 then
			child(self.cardTranTbl[i].transform,"ma").gameObject:SetActive(true)
			componentGet(child(self.cardTranTbl[i].transform,"ma"),"UISprite").depth = i * 2 + 4
		end
	end
	self.card_type_bg.spriteName = self.bg_type_altasName[nSpecialType]
end

function common_card:Update()
	if self.timeSecond <= 0 then
	--	this.gameObject:SetActive(false)
		UI_Manager:Instance():CloseUiForms("common_card")
		return
	end
	local timeDelt = Time.deltaTime
	self.timeSecond =  self.timeSecond - timeDelt
	if math.floor(self.timeSecond) < 0 then
		self.timeSecond = 0
	end
end

return common_card
