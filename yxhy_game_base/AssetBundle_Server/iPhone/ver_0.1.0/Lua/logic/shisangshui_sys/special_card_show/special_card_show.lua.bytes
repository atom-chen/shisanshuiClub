--[[--
 * @Description: 发牌下来时判断特殊牌型
 * @Author:      zhy
 * @FileName:    prepare_special.lua
 * @DateTime:    2017-07-05
 ]]
 
require "logic/shisangshui_sys/place_card/place_card"
--require "logic/shisangshui_sys/shisangshui_play_sys"
require "logic/shisangshui_sys/lib/lib_sp_card_logic"

local base = require("logic.framework.ui.uibase.ui_window")
local special_card_show = class("special_card_show",base)

function special_card_show:ctor()
	base.ctor(self)
	self.timeSecond = 3		--最大等待时间
	self.my_cards = {}		--所有牌
	self.cardTranTbl = {}
	self.animalPar = nil
	self.SpecialAnimalName = {
		[GStars_Special_Type.PT_SP_NIL] = "散牌",
		[GStars_Special_Type.PT_SP_THREE_FLUSH] = "santonghua",              --三同花
		[GStars_Special_Type.PT_SP_THREE_STRAIGHT] = "shanshunzi",           --三顺子
		[GStars_Special_Type.PT_SP_SIX_PAIRS] = "liuduiban",                --六对半   6对+散牌
		[GStars_Special_Type.PT_SP_FIVE_PAIR_AND_THREE] = "wuduisantiao",      --五队冲三 5对+3条
		[GStars_Special_Type.PT_SP_SAME_SUIT] = "couyise",             --凑一色
		[GStars_Special_Type.PT_SP_ALL_SMALL] = "quanxiao",             --全小
		[GStars_Special_Type.PT_SP_ALL_BIG] = "quanda",                 --全大
		[GStars_Special_Type.PT_SP_SIX] = "liuliudashun",                     --六六大顺  6同
		[GStars_Special_Type.PT_SP_THREE_STRAIGHT_FLUSH] = "santonghuashun",    --三同花顺
		[GStars_Special_Type.PT_SP_ALL_KING] = "shierhuangzu",                --十二皇族
		[GStars_Special_Type.PT_SP_FIVE_AND_THREE_KING] = "sanhuangwudi",     --三皇五帝 2个5同+3条
		[GStars_Special_Type.PT_SP_THREE_BOMB] = "sanfentianxia",              --三炸弹   3个铁枝
		[GStars_Special_Type.PT_SP_FOUR_THREE] = "ditaosantiao" ,             --四套三条  4个3条
		[GStars_Special_Type.PT_SP_STRAIGHT] = "yitiaolong",               --一条龙
		[GStars_Special_Type.PT_SP_STRAIGHT_FLUSH] = "zhizunqinglong",			--至尊清龙
		[GStars_Special_Type.PT_SP_SEVEN] = "qikaidesheng",			--旗开得胜
		[GStars_Special_Type.PT_SP_EIGHT] = "baxianguohai",			--八仙过海		  
	}
	self.timeDelt = 0
	self.tex_photo = nil
	self.NameLbl = nil
	self.cardGrid = nil
end

function special_card_show:OnInit()
	 self:initinfor()
end

function special_card_show:OnOpen(...)
	self:OnClose()
	local cards = {}
	local nSpecialType = nil
	local viewSeat = nil
	local show_time = 0
	if self.args == nil or #self.args < 3 then
		Trace("特殊牌型参数传的错。请检查参数个数")
	end
	cards = self.args[1]
	nSpecialType = self.args[2]
	viewSeat = self.args[3]
	show_time = self.args[4]
	
	cards = Array.CardSort(cards, nSpecialType)
	ui_sound_mgr.PlaySoundClip(data_center.GetResRootPath().."/sound/cardtpye_girl/specialtype/".. SpecialTypeMusicConfig[nSpecialType])
	self.timeSecond = show_time
	Trace("---------cards------"..tostring(cards))
	self.my_cards = cards
--[[	if table.nums(self.cardTranTbl) ~= 0 then
		for i, v in pairs(self.cardTranTbl) do
			if v ~= nil then
				v.gameObject.transform.parent = nil
				v.gameObject:SetActive(false)
				GameObject.Destroy(v.gameObject)
			end
		end
		self.grid:Reposition()
		self.cardTranTbl = {}
	end--]]
	self:LoadUserInfo(viewSeat)
	self.cardGrid.gameObject:SetActive(true)
	self:LoadAllCard(cards, nSpecialType)
	
end

function special_card_show:OnRefreshDepth()
  if self.animalPar and self.sortingOrder then
    local topLayerIndex = self.sortingOrder +self.m_subPanelCount +1
    Utils.SetEffectSortLayer(self.animalPar.gameObject, topLayerIndex)
  end
end

function special_card_show:OnClose()
	self:StopTime_Dis()
	if table.nums(self.cardTranTbl) ~= 0 then
		for i, v in pairs(self.cardTranTbl) do
			if v ~= nil then
				v.gameObject.transform.parent = nil
				v.gameObject:SetActive(false)
				GameObject.Destroy(v.gameObject)
			--	GameObject.DestroyImmediate(v.gameObject)
				
			end
		end
		self.grid:Reposition()
		self.cardGrid.gameObject:SetActive(false)
		self.cardTranTbl = {}
	end
end

function special_card_show:initinfor()
	self.animalPar = child(self.transform, "animalPar")
	self.tex_photo= componentGet(child(self.transform, "head/headPic"), "UITexture")
	self.NameLbl = componentGet(child(self.transform,"head/Label"), "UILabel")
	self.cardGrid = child(self.transform, "cardGrid")
	self.grid =  componentGet(self.cardGrid,"UIGrid")
end

function special_card_show:LoadAllCard(cards, nSpecialType)
	if self.cardGrid == nil then
		Trace("cardGrid == nil")
		return
	end
	for i, v in pairs(cards) do
		local cardObj = newNormalUI(data_center.GetResPokerCommPath().."/card/"..tostring(v), self.cardGrid)
		self.cardTranTbl[i] = cardObj
		componentGet(child(self.cardTranTbl[i].transform, "bg"),"UISprite").depth = i * 2 + 3
		componentGet(child(self.cardTranTbl[i].transform, "num"),"UISprite").depth = i * 2 + 5
		componentGet(child(self.cardTranTbl[i].transform, "color1"),"UISprite").depth = i * 2 + 5
		componentGet(child(self.cardTranTbl[i].transform, "color2"),"UISprite").depth = i * 2 + 5
		if room_data.GetSssRoomDataInfo().isChip == true and v == 40 then
			child(self.cardTranTbl[i].transform,"ma").gameObject:SetActive(true)
			componentGet(child(self.cardTranTbl[i].transform, "ma"),"UISprite").depth = i * 2 + 4
		end
	end
	

	self.grid:Reposition()
	
	animations_sys.PlayAnimation(self.animalPar,data_center.GetResRootPath().."/effects/special_card_type",self.SpecialAnimalName[nSpecialType],100,100,false, callback)
end

--[[function special_card_show:Update()
	if self.timeSecond <= 0 then
		this.Hide()
		return
	end
	self.timeDelt = Time.deltaTime
	self.timeSecond =  self.timeSecond - self.timeDelt
end--]]

function special_card_show:StartTimer_Dis()
		
	self.disTimer_Elapse = Timer.New(slot(self.OnTimer_Proc_Dis,self),1,self.timeSecond)
	self.disTimer_Elapse:Start()
end

function special_card_show:OnTimer_Proc_Dis()
	if(self.timeSecond >= 1) then
		self.timeSecond = self.timeSecond -1;
	end

	if self.timeSecond <= 0 then
		UI_Manager:Instance():CloseUiForms("special_card_show")
		self:StopTime_Dis()
		return
	end
end

function special_card_show:StopTime_Dis()
	if self.disTimer_Elapse ~= nil then
		self.disTimer_Elapse:Stop()
		Trace("重连解散定时器关")
		self.disTimer_Elapse = nil
	end
end

function special_card_show:LoadUserInfo(viewSeat)
	local userData = room_usersdata_center.GetUserByViewSeat(viewSeat)
	Trace(GetTblData(userData))
	self.NameLbl.text = userData.name
	hall_data.getuserimage(self.tex_photo,2,userData.headurl)
end

function special_card_show:PlayOpenAmination()
	--打开动画重写
end

return special_card_show
