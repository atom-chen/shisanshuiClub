--region *.lua
--Date
--此文件由[BabeLua]插件自动生成

--require"logic/hall_sys/mail_ui/mail_wrap"
--endregion

local base = require("logic.framework.ui.uibase.ui_window")
local mail_ui = class("mail_ui",base)

function mail_ui:ctor()
	base.ctor(self)  
	self.nomailBgGo = nil
	self.leftChildRoot = nil
	self.rightChildRoot = nil
	self.mailData = nil
end

function mail_ui:OnInit()
    self:InitView()
end
function mail_ui:OnOpen()
	self:GetMailData(function()
		if self.mailData ~= nil then
			self:UpdateView(self.mailData)
		end
	end)
end

function mail_ui:PlayOpenAmination()
	--打开动画重写
end

function mail_ui:GetMailData(callback)
	-- UI_Manager:Instance():ShowUiForms("waiting_ui")
	http_request_interface.getEmails(0,function (str) 
        local s = string.gsub(str,"\\/","/")  
        local t = ParseJsonStr(s) 
        if t.ret == 0 then
			self.mailData = t.data
			if callback ~= nil then
				callback()
			end
        end
        UI_Manager:Instance():CloseUiForms("waiting_ui")
    end)
end

function mail_ui:OnRefreshDepth()

  local uiEffect = child(self.gameObject.transform, "panel_mail/Panel_Top/Title/Effect_youxifenxiang")
  if uiEffect and self.sortingOrder then
    local topLayerIndex = self.sortingOrder +self.m_subPanelCount +1
    Utils.SetEffectSortLayer(uiEffect.gameObject, topLayerIndex)
  end
end

function mail_ui:InitView()
    local btn_close = child(self.gameObject.transform,"panel_mail/Panel_Top/btn_close")
    if btn_close ~= nil then
        addClickCallbackSelf(btn_close.gameObject,self.CloseWin,self)
    end  
    self.nomailBgGo = child(self.gameObject.transform, "panel_mail/Panel_Right/nomailBg").gameObject
    self.nomailBgGo:SetActive(false)
	self.mailDetailGo = child(self.gameObject.transform, "panel_mail/Panel_Right/sp_background").gameObject
	self.mailDetailGo:SetActive(false)
	self.leftTimeGo = child(self.gameObject.transform, "panel_mail/Panel_Right/lbl_leftTime").gameObject
	self:InitChildWin()
end

function mail_ui:InitChildWin()
	self.leftChildRoot = child(self.gameObject.transform,"panel_mail/Panel_Left")
	self.rightChildRoot = child(self.gameObject.transform,"panel_mail/Panel_Right")	
end

function mail_ui:UpdateView(data)
	local Ui = self
	self.mail_wrap = require ("logic/hall_sys/mail_ui/mail_wrap"):create()
	self.mail_wrap:InitData(Ui,data)
end

function  mail_ui:CloseWin()
    ui_sound_mgr.PlayCloseClick()
	UI_Manager:Instance():CloseUiForms("mail_ui",true)
end 

function mail_ui:OnClose()
	--hall_ui.ShowMoreRedPoint()
	self.mailData = nil
end
 
return mail_ui