local LoginModel = class("LoginModel")
local json = require "cjson"

function LoginModel:Init()
	self.serverAddr = ""
	self.serverPort = 0
	self.firstLogin = true
	self:AddListener()
end

function LoginModel:Clear()
	self:RemoveListener()
end

function LoginModel:AddListener()
    Notifier.regist(cmdName.MSG_CHANGE_ACCOUNT, self.OnChangeAccount,self)
    Notifier.regist(cmdName.SHOW_PAGE_HALL, self.OnLoginComplite,self)
end

function LoginModel:RemoveListener()
	Notifier.remove(cmdName.MSG_CHANGE_ACCOUNT, self.OnChangeAccount,self)
	Notifier.remove(cmdName.SHOW_PAGE_HALL, self.OnLoginComplite,self)
end

function LoginModel:OnChangeAccount()
	self.firstLogin = true
end

function LoginModel:OnLoginComplite()
	if self.firstLogin then
		join_room_ctrl.QueryState()
	end
	self.firstLogin = false
end

function LoginModel:GetClientConfig(callback)
	HttpProxy.GetClientConfig(function(serverData, errorCode) 
		self:LoadServerAddrAndPort(serverData)
		self:LoadCommonCfg(serverData)

		if callback ~= nil then
			callback()
		end
	end)
end

function LoginModel:OnLoginSuccess()
	model_manager:GetModel("GameModel"):ReqGetCardGameList()
	model_manager:GetModel("openroom_model"):ReqGetCardGameCost()
end

function LoginModel:LoadServerAddrAndPort(serverData)
	local count = #serverData.ConnServer
	local index = 1
	if count > 1 then
		local index = math.round(count + 1)
		if index > count then
			index = count
		end
	end
	self.serverAddr = serverData.ConnServer[index].ServerAddr
	self.serverPort = serverData.ConnServer[index].ServerPort

	global_define.wsurl = "ws://"..self.serverAddr..":"..self.serverPort.."/?uid=%s&token=%s"
	global_define.wsurl = global_define.wsurl .. "&lz=1"
	global_define.gamewsurl = "ws://"..self.serverAddr..":"..self.serverPort.."/%s/%s/?uid=%s&token=%s&lz=1"


	HttpProxy.InitUrlAndPort(self.serverAddr, self.serverPort)
end


function LoginModel:LoadCommonCfg(serverData)
	self.acturl = serverData.CommonConfig.acturl
	self.downloadUrl = serverData.CommonConfig.downloadurl
	self.mjupdateurl = serverData.CommonConfig.mjupdateurl
	self.clubagenturl = serverData.CommonConfig.clubagenturl -- 代理商后台地址
	self.sharelang = serverData.CommonConfig.sharelang -- 分享文本
	self.kickclubcfg = serverData.CommonConfig.kickclubcfg -- 踢人原因文本
	self.customerservice = serverData.CommonConfig.customerservice -- 客服号文本

	model_manager:GetModel("ClubModel").noagentclubcost = serverData.CommonConfig.noagentclubcost or 3000
	model_manager:GetModel("ClubModel").moreclubcost = serverData.CommonConfig.moreclubcost or 300

	global_define.SetURL(self.acturl,self.downloadUrl)
	
	global_define.appConfig.hallShareTitle = serverData.CommonConfig.hallShareTitle
	global_define.appConfig.hallShareQTitle = serverData.CommonConfig.hallShareQTitle
	global_define.appConfig.hallShareFriendContent = serverData.CommonConfig.hallShareFriendContent
	global_define.appConfig.hallShareFriendQContent = serverData.CommonConfig.hallShareFriendQContent


	if self.kickclubcfg == "" then
		self.kickclubcfg = "{}"
	end

	global_define.SetServiceNumber(self.customerservice )
	global_define.SetClubKickReason(json.decode(self.kickclubcfg))		--设置踢人原因文本

	-- global_define.winXin = serverData.CommonConfig.

--	global_define.SetShareContext(self.sharelang)			--设置分享文本
--	global_define.SetClubKickReason(self.kickclubcfg)		--设置踢人原因文本
--	global_define.SetServiceNumber(self.customerservice)		--设置客服号文本
end

return LoginModel